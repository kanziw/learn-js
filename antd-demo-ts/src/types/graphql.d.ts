/* tslint:disable */
import { GraphQLResolveInfo, GraphQLScalarType } from 'graphql';
/**
 * This file is auto-generated by graphql-schema-typescript
 * Please note that any changes in this file may be overwritten
 */
 

/*******************************
 *                             *
 *          TYPE DEFS          *
 *                             *
 *******************************/
export interface GQLQuery {
  codeOfConduct?: GQLCodeOfConduct;
  codesOfConduct?: Array<GQLCodeOfConduct | null>;
  license?: GQLLicense;
  licenses: Array<GQLLicense | null>;
  marketplaceCategories: Array<GQLMarketplaceCategory>;
  marketplaceCategory?: GQLMarketplaceCategory;
  marketplaceListing?: GQLMarketplaceListing;
  marketplaceListings: GQLMarketplaceListingConnection;
  meta: GQLGitHubMetadata;
  node?: GQLNode;
  nodes: Array<GQLNode | null>;
  organization?: GQLOrganization;
  rateLimit?: GQLRateLimit;
  relay: GQLQuery;
  repository?: GQLRepository;
  repositoryOwner?: GQLRepositoryOwner;
  resource?: GQLUniformResourceLocatable;
  search: GQLSearchResultItemConnection;
  topic?: GQLTopic;
  user?: GQLUser;
  viewer: GQLUser;
}

export interface GQLCodeOfConduct {
  body?: string;
  key: string;
  name: string;
  url?: GQLURI;
}

export type GQLURI = any;

export interface GQLLicense extends GQLNode {
  body: string;
  conditions: Array<GQLLicenseRule | null>;
  description?: string;
  featured: boolean;
  hidden: boolean;
  id: string;
  implementation?: string;
  key: string;
  limitations: Array<GQLLicenseRule | null>;
  name: string;
  nickname?: string;
  permissions: Array<GQLLicenseRule | null>;
  pseudoLicense: boolean;
  spdxId?: string;
  url?: GQLURI;
}

export interface GQLNode {
  id: string;
}

/** Use this to resolve interface type Node */
export type GQLPossibleNodeTypeNames =
'License' |
'MarketplaceCategory' |
'MarketplaceListing' |
'App' |
'Organization' |
'Project' |
'ProjectColumn' |
'ProjectCard' |
'Issue' |
'User' |
'Repository' |
'BranchProtectionRule' |
'Ref' |
'PullRequest' |
'UserContentEdit' |
'Label' |
'Reaction' |
'IssueComment' |
'PullRequestCommit' |
'Commit' |
'CommitComment' |
'Status' |
'StatusContext' |
'Tree' |
'Milestone' |
'ReviewRequest' |
'Team' |
'OrganizationInvitation' |
'PullRequestReview' |
'PullRequestReviewComment' |
'AssignedEvent' |
'BaseRefForcePushedEvent' |
'ClosedEvent' |
'CommitCommentThread' |
'CrossReferencedEvent' |
'DemilestonedEvent' |
'DeployedEvent' |
'Deployment' |
'DeploymentStatus' |
'DeploymentEnvironmentChangedEvent' |
'HeadRefDeletedEvent' |
'HeadRefForcePushedEvent' |
'HeadRefRestoredEvent' |
'LabeledEvent' |
'LockedEvent' |
'MergedEvent' |
'MilestonedEvent' |
'PullRequestReviewThread' |
'ReferencedEvent' |
'RenamedTitleEvent' |
'ReopenedEvent' |
'ReviewDismissedEvent' |
'ReviewRequestRemovedEvent' |
'ReviewRequestedEvent' |
'SubscribedEvent' |
'UnassignedEvent' |
'UnlabeledEvent' |
'UnlockedEvent' |
'UnsubscribedEvent' |
'PushAllowance' |
'ProtectedBranch' |
'ReviewDismissalAllowance' |
'DeployKey' |
'Language' |
'Release' |
'ReleaseAsset' |
'RepositoryTopic' |
'Topic' |
'Gist' |
'GistComment' |
'PublicKey' |
'TransferredEvent' |
'OrganizationIdentityProvider' |
'ExternalIdentity' |
'AddedToProjectEvent' |
'BaseRefChangedEvent' |
'Blob' |
'Bot' |
'CommentDeletedEvent' |
'ConvertedNoteToIssueEvent' |
'MentionedEvent' |
'MovedColumnsInProjectEvent' |
'RemovedFromProjectEvent' |
'RepositoryInvitation' |
'Tag';

export interface GQLNodeNameMap {
  Node: GQLNode;
  License: GQLLicense;
  MarketplaceCategory: GQLMarketplaceCategory;
  MarketplaceListing: GQLMarketplaceListing;
  App: GQLApp;
  Organization: GQLOrganization;
  Project: GQLProject;
  ProjectColumn: GQLProjectColumn;
  ProjectCard: GQLProjectCard;
  Issue: GQLIssue;
  User: GQLUser;
  Repository: GQLRepository;
  BranchProtectionRule: GQLBranchProtectionRule;
  Ref: GQLRef;
  PullRequest: GQLPullRequest;
  UserContentEdit: GQLUserContentEdit;
  Label: GQLLabel;
  Reaction: GQLReaction;
  IssueComment: GQLIssueComment;
  PullRequestCommit: GQLPullRequestCommit;
  Commit: GQLCommit;
  CommitComment: GQLCommitComment;
  Status: GQLStatus;
  StatusContext: GQLStatusContext;
  Tree: GQLTree;
  Milestone: GQLMilestone;
  ReviewRequest: GQLReviewRequest;
  Team: GQLTeam;
  OrganizationInvitation: GQLOrganizationInvitation;
  PullRequestReview: GQLPullRequestReview;
  PullRequestReviewComment: GQLPullRequestReviewComment;
  AssignedEvent: GQLAssignedEvent;
  BaseRefForcePushedEvent: GQLBaseRefForcePushedEvent;
  ClosedEvent: GQLClosedEvent;
  CommitCommentThread: GQLCommitCommentThread;
  CrossReferencedEvent: GQLCrossReferencedEvent;
  DemilestonedEvent: GQLDemilestonedEvent;
  DeployedEvent: GQLDeployedEvent;
  Deployment: GQLDeployment;
  DeploymentStatus: GQLDeploymentStatus;
  DeploymentEnvironmentChangedEvent: GQLDeploymentEnvironmentChangedEvent;
  HeadRefDeletedEvent: GQLHeadRefDeletedEvent;
  HeadRefForcePushedEvent: GQLHeadRefForcePushedEvent;
  HeadRefRestoredEvent: GQLHeadRefRestoredEvent;
  LabeledEvent: GQLLabeledEvent;
  LockedEvent: GQLLockedEvent;
  MergedEvent: GQLMergedEvent;
  MilestonedEvent: GQLMilestonedEvent;
  PullRequestReviewThread: GQLPullRequestReviewThread;
  ReferencedEvent: GQLReferencedEvent;
  RenamedTitleEvent: GQLRenamedTitleEvent;
  ReopenedEvent: GQLReopenedEvent;
  ReviewDismissedEvent: GQLReviewDismissedEvent;
  ReviewRequestRemovedEvent: GQLReviewRequestRemovedEvent;
  ReviewRequestedEvent: GQLReviewRequestedEvent;
  SubscribedEvent: GQLSubscribedEvent;
  UnassignedEvent: GQLUnassignedEvent;
  UnlabeledEvent: GQLUnlabeledEvent;
  UnlockedEvent: GQLUnlockedEvent;
  UnsubscribedEvent: GQLUnsubscribedEvent;
  PushAllowance: GQLPushAllowance;
  ProtectedBranch: GQLProtectedBranch;
  ReviewDismissalAllowance: GQLReviewDismissalAllowance;
  DeployKey: GQLDeployKey;
  Language: GQLLanguage;
  Release: GQLRelease;
  ReleaseAsset: GQLReleaseAsset;
  RepositoryTopic: GQLRepositoryTopic;
  Topic: GQLTopic;
  Gist: GQLGist;
  GistComment: GQLGistComment;
  PublicKey: GQLPublicKey;
  TransferredEvent: GQLTransferredEvent;
  OrganizationIdentityProvider: GQLOrganizationIdentityProvider;
  ExternalIdentity: GQLExternalIdentity;
  AddedToProjectEvent: GQLAddedToProjectEvent;
  BaseRefChangedEvent: GQLBaseRefChangedEvent;
  Blob: GQLBlob;
  Bot: GQLBot;
  CommentDeletedEvent: GQLCommentDeletedEvent;
  ConvertedNoteToIssueEvent: GQLConvertedNoteToIssueEvent;
  MentionedEvent: GQLMentionedEvent;
  MovedColumnsInProjectEvent: GQLMovedColumnsInProjectEvent;
  RemovedFromProjectEvent: GQLRemovedFromProjectEvent;
  RepositoryInvitation: GQLRepositoryInvitation;
  Tag: GQLTag;
}

export interface GQLLicenseRule {
  description: string;
  key: string;
  label: string;
}

export interface GQLMarketplaceCategory extends GQLNode {
  description?: string;
  howItWorks?: string;
  id: string;
  name: string;
  primaryListingCount: number;
  resourcePath: GQLURI;
  secondaryListingCount: number;
  slug: string;
  url: GQLURI;
}

export interface GQLMarketplaceListing extends GQLNode {
  app?: GQLApp;
  companyUrl?: GQLURI;
  configurationResourcePath: GQLURI;
  configurationUrl: GQLURI;
  documentationUrl?: GQLURI;
  extendedDescription?: string;
  extendedDescriptionHTML: GQLHTML;
  fullDescription: string;
  fullDescriptionHTML: GQLHTML;
  hasApprovalBeenRequested: boolean;
  hasPublishedFreeTrialPlans: boolean;
  hasTermsOfService: boolean;
  howItWorks?: string;
  howItWorksHTML: GQLHTML;
  id: string;
  installationUrl?: GQLURI;
  installedForViewer: boolean;
  isApproved: boolean;
  isDelisted: boolean;
  isDraft: boolean;
  isPaid: boolean;
  isRejected: boolean;
  logoBackgroundColor: string;
  logoUrl?: GQLURI;
  name: string;
  normalizedShortDescription: string;
  pricingUrl?: GQLURI;
  primaryCategory: GQLMarketplaceCategory;
  privacyPolicyUrl: GQLURI;
  resourcePath: GQLURI;
  screenshotUrls: Array<string | null>;
  secondaryCategory?: GQLMarketplaceCategory;
  shortDescription: string;
  slug: string;
  statusUrl?: GQLURI;
  supportEmail?: string;
  supportUrl: GQLURI;
  termsOfServiceUrl?: GQLURI;
  url: GQLURI;
  viewerCanAddPlans: boolean;
  viewerCanApprove: boolean;
  viewerCanDelist: boolean;
  viewerCanEdit: boolean;
  viewerCanEditCategories: boolean;
  viewerCanEditPlans: boolean;
  viewerCanRedraft: boolean;
  viewerCanReject: boolean;
  viewerCanRequestApproval: boolean;
  viewerHasPurchased: boolean;
  viewerHasPurchasedForAllOrganizations: boolean;
  viewerIsListingAdmin: boolean;
}

export interface GQLApp extends GQLNode {
  createdAt: GQLDateTime;
  databaseId?: number;
  description?: string;
  id: string;
  logoBackgroundColor: string;
  logoUrl: GQLURI;
  name: string;
  slug: string;
  updatedAt: GQLDateTime;
  url: GQLURI;
}

export type GQLDateTime = any;

export type GQLHTML = any;

export interface GQLMarketplaceListingConnection {
  edges?: Array<GQLMarketplaceListingEdge | null>;
  nodes?: Array<GQLMarketplaceListing | null>;
  pageInfo: GQLPageInfo;
  totalCount: number;
}

export interface GQLMarketplaceListingEdge {
  cursor: string;
  node?: GQLMarketplaceListing;
}

export interface GQLPageInfo {
  endCursor?: string;
  hasNextPage: boolean;
  hasPreviousPage: boolean;
  startCursor?: string;
}

export interface GQLGitHubMetadata {
  gitHubServicesSha: GQLGitObjectID;
  gitIpAddresses?: Array<string>;
  hookIpAddresses?: Array<string>;
  importerIpAddresses?: Array<string>;
  isPasswordAuthenticationVerifiable: boolean;
  pagesIpAddresses?: Array<string>;
}

export type GQLGitObjectID = any;

export interface GQLOrganization extends GQLActor, GQLNode, GQLProjectOwner, GQLRegistryPackageOwner, GQLRegistryPackageSearch, GQLRepositoryOwner, GQLUniformResourceLocatable {
  avatarUrl: GQLURI;
  databaseId?: number;
  description?: string;
  email?: string;
  id: string;
  isVerified: boolean;
  location?: string;
  login: string;
  members: GQLUserConnection;
  name?: string;
  newTeamResourcePath: GQLURI;
  newTeamUrl: GQLURI;
  organizationBillingEmail?: string;
  pinnedRepositories: GQLRepositoryConnection;
  project?: GQLProject;
  projects: GQLProjectConnection;
  projectsResourcePath: GQLURI;
  projectsUrl: GQLURI;
  repositories: GQLRepositoryConnection;
  repository?: GQLRepository;
  requiresTwoFactorAuthentication?: boolean;
  resourcePath: GQLURI;
  samlIdentityProvider?: GQLOrganizationIdentityProvider;
  team?: GQLTeam;
  teams: GQLTeamConnection;
  teamsResourcePath: GQLURI;
  teamsUrl: GQLURI;
  url: GQLURI;
  viewerCanAdminister: boolean;
  viewerCanCreateProjects: boolean;
  viewerCanCreateRepositories: boolean;
  viewerCanCreateTeams: boolean;
  viewerIsAMember: boolean;
  websiteUrl?: GQLURI;
}

export interface GQLActor {
  avatarUrl: GQLURI;
  login: string;
  resourcePath: GQLURI;
  url: GQLURI;
}

/** Use this to resolve interface type Actor */
export type GQLPossibleActorTypeNames = 'Organization' | 'User' | 'Bot';

export interface GQLActorNameMap {
  Actor: GQLActor;
  Organization: GQLOrganization;
  User: GQLUser;
  Bot: GQLBot;
}

export interface GQLProjectOwner {
  id: string;
  project?: GQLProject;
  projects: GQLProjectConnection;
  projectsResourcePath: GQLURI;
  projectsUrl: GQLURI;
  viewerCanCreateProjects: boolean;
}

/** Use this to resolve interface type ProjectOwner */
export type GQLPossibleProjectOwnerTypeNames = 'Organization' | 'Repository';

export interface GQLProjectOwnerNameMap {
  ProjectOwner: GQLProjectOwner;
  Organization: GQLOrganization;
  Repository: GQLRepository;
}

export interface GQLProject extends GQLClosable, GQLNode, GQLUpdatable {
  body?: string;
  bodyHTML: GQLHTML;
  closed: boolean;
  closedAt?: GQLDateTime;
  columns: GQLProjectColumnConnection;
  createdAt: GQLDateTime;
  creator?: GQLActor;
  databaseId?: number;
  id: string;
  name: string;
  number: number;
  owner: GQLProjectOwner;
  pendingCards: GQLProjectCardConnection;
  resourcePath: GQLURI;
  state: GQLProjectState;
  updatedAt: GQLDateTime;
  url: GQLURI;
  viewerCanUpdate: boolean;
}

export interface GQLClosable {
  closed: boolean;
  closedAt?: GQLDateTime;
}

/** Use this to resolve interface type Closable */
export type GQLPossibleClosableTypeNames =
'Project' |
'Issue' |
'PullRequest' |
'Milestone';

export interface GQLClosableNameMap {
  Closable: GQLClosable;
  Project: GQLProject;
  Issue: GQLIssue;
  PullRequest: GQLPullRequest;
  Milestone: GQLMilestone;
}

export interface GQLUpdatable {
  viewerCanUpdate: boolean;
}

/** Use this to resolve interface type Updatable */
export type GQLPossibleUpdatableTypeNames =
'Project' |
'Issue' |
'PullRequest' |
'IssueComment' |
'CommitComment' |
'PullRequestReview' |
'PullRequestReviewComment' |
'GistComment';

export interface GQLUpdatableNameMap {
  Updatable: GQLUpdatable;
  Project: GQLProject;
  Issue: GQLIssue;
  PullRequest: GQLPullRequest;
  IssueComment: GQLIssueComment;
  CommitComment: GQLCommitComment;
  PullRequestReview: GQLPullRequestReview;
  PullRequestReviewComment: GQLPullRequestReviewComment;
  GistComment: GQLGistComment;
}

export interface GQLProjectColumnConnection {
  edges?: Array<GQLProjectColumnEdge | null>;
  nodes?: Array<GQLProjectColumn | null>;
  pageInfo: GQLPageInfo;
  totalCount: number;
}

export interface GQLProjectColumnEdge {
  cursor: string;
  node?: GQLProjectColumn;
}

export interface GQLProjectColumn extends GQLNode {
  cards: GQLProjectCardConnection;
  createdAt: GQLDateTime;
  databaseId?: number;
  id: string;
  name: string;
  project: GQLProject;
  purpose?: GQLProjectColumnPurpose;
  resourcePath: GQLURI;
  updatedAt: GQLDateTime;
  url: GQLURI;
}

export enum GQLProjectCardArchivedState {
  ARCHIVED = 'ARCHIVED',
  NOT_ARCHIVED = 'NOT_ARCHIVED'
}

export interface GQLProjectCardConnection {
  edges?: Array<GQLProjectCardEdge | null>;
  nodes?: Array<GQLProjectCard | null>;
  pageInfo: GQLPageInfo;
  totalCount: number;
}

export interface GQLProjectCardEdge {
  cursor: string;
  node?: GQLProjectCard;
}

export interface GQLProjectCard extends GQLNode {
  column?: GQLProjectColumn;
  content?: GQLProjectCardItem;
  createdAt: GQLDateTime;
  creator?: GQLActor;
  databaseId?: number;
  id: string;
  isArchived: boolean;
  note?: string;
  project: GQLProject;
  resourcePath: GQLURI;
  state?: GQLProjectCardState;
  updatedAt: GQLDateTime;
  url: GQLURI;
}

export type GQLProjectCardItem = GQLIssue | GQLPullRequest;

/** Use this to resolve union type ProjectCardItem */
export type GQLPossibleProjectCardItemTypeNames = 'Issue' | 'PullRequest';

export interface GQLProjectCardItemNameMap {
  ProjectCardItem: GQLProjectCardItem;
  Issue: GQLIssue;
  PullRequest: GQLPullRequest;
}

export interface GQLIssue extends GQLAssignable, GQLClosable, GQLComment, GQLLabelable, GQLLockable, GQLNode, GQLReactable, GQLRepositoryNode, GQLSubscribable, GQLUniformResourceLocatable, GQLUpdatable, GQLUpdatableComment {
  activeLockReason?: GQLLockReason;
  assignees: GQLUserConnection;
  author?: GQLActor;
  authorAssociation: GQLCommentAuthorAssociation;
  body: string;
  bodyHTML: GQLHTML;
  bodyText: string;
  closed: boolean;
  closedAt?: GQLDateTime;
  comments: GQLIssueCommentConnection;
  createdAt: GQLDateTime;
  createdViaEmail: boolean;
  databaseId?: number;
  editor?: GQLActor;
  id: string;
  includesCreatedEdit: boolean;
  labels?: GQLLabelConnection;
  lastEditedAt?: GQLDateTime;
  locked: boolean;
  milestone?: GQLMilestone;
  number: number;
  participants: GQLUserConnection;
  projectCards: GQLProjectCardConnection;
  publishedAt?: GQLDateTime;
  reactionGroups?: Array<GQLReactionGroup>;
  reactions: GQLReactionConnection;
  repository: GQLRepository;
  resourcePath: GQLURI;
  state: GQLIssueState;
  timeline: GQLIssueTimelineConnection;
  title: string;
  updatedAt: GQLDateTime;
  url: GQLURI;
  userContentEdits?: GQLUserContentEditConnection;
  viewerCanReact: boolean;
  viewerCanSubscribe: boolean;
  viewerCanUpdate: boolean;
  viewerCannotUpdateReasons: Array<GQLCommentCannotUpdateReason>;
  viewerDidAuthor: boolean;
  viewerSubscription?: GQLSubscriptionState;
}

export interface GQLAssignable {
  assignees: GQLUserConnection;
}

/** Use this to resolve interface type Assignable */
export type GQLPossibleAssignableTypeNames = 'Issue' | 'PullRequest';

export interface GQLAssignableNameMap {
  Assignable: GQLAssignable;
  Issue: GQLIssue;
  PullRequest: GQLPullRequest;
}

export interface GQLUserConnection {
  edges?: Array<GQLUserEdge | null>;
  nodes?: Array<GQLUser | null>;
  pageInfo: GQLPageInfo;
  totalCount: number;
}

export interface GQLUserEdge {
  cursor: string;
  node?: GQLUser;
}

export interface GQLUser extends GQLActor, GQLNode, GQLRegistryPackageOwner, GQLRegistryPackageSearch, GQLRepositoryOwner, GQLUniformResourceLocatable {
  avatarUrl: GQLURI;
  bio?: string;
  bioHTML: GQLHTML;
  commitComments: GQLCommitCommentConnection;
  company?: string;
  companyHTML: GQLHTML;
  createdAt: GQLDateTime;
  databaseId?: number;
  email: string;
  followers: GQLFollowerConnection;
  following: GQLFollowingConnection;
  gist?: GQLGist;
  gistComments: GQLGistCommentConnection;
  gists: GQLGistConnection;
  id: string;
  isBountyHunter: boolean;
  isCampusExpert: boolean;
  isDeveloperProgramMember: boolean;
  isEmployee: boolean;
  isHireable: boolean;
  isSiteAdmin: boolean;
  isViewer: boolean;
  issueComments: GQLIssueCommentConnection;
  issues: GQLIssueConnection;
  location?: string;
  login: string;
  name?: string;
  organization?: GQLOrganization;
  organizations: GQLOrganizationConnection;
  pinnedRepositories: GQLRepositoryConnection;
  publicKeys: GQLPublicKeyConnection;
  pullRequests: GQLPullRequestConnection;
  repositories: GQLRepositoryConnection;
  repositoriesContributedTo: GQLRepositoryConnection;
  repository?: GQLRepository;
  resourcePath: GQLURI;
  starredRepositories: GQLStarredRepositoryConnection;
  updatedAt: GQLDateTime;
  url: GQLURI;
  viewerCanFollow: boolean;
  viewerIsFollowing: boolean;
  watching: GQLRepositoryConnection;
  websiteUrl?: GQLURI;
}

export interface GQLRegistryPackageOwner {
  id: string;
}

/** Use this to resolve interface type RegistryPackageOwner */
export type GQLPossibleRegistryPackageOwnerTypeNames =
'Organization' |
'User' |
'Repository';

export interface GQLRegistryPackageOwnerNameMap {
  RegistryPackageOwner: GQLRegistryPackageOwner;
  Organization: GQLOrganization;
  User: GQLUser;
  Repository: GQLRepository;
}

export interface GQLRegistryPackageSearch {
  id: string;
}

/** Use this to resolve interface type RegistryPackageSearch */
export type GQLPossibleRegistryPackageSearchTypeNames = 'Organization' | 'User';

export interface GQLRegistryPackageSearchNameMap {
  RegistryPackageSearch: GQLRegistryPackageSearch;
  Organization: GQLOrganization;
  User: GQLUser;
}

export interface GQLRepositoryOwner {
  avatarUrl: GQLURI;
  id: string;
  login: string;
  pinnedRepositories: GQLRepositoryConnection;
  repositories: GQLRepositoryConnection;
  repository?: GQLRepository;
  resourcePath: GQLURI;
  url: GQLURI;
}

/** Use this to resolve interface type RepositoryOwner */
export type GQLPossibleRepositoryOwnerTypeNames = 'Organization' | 'User';

export interface GQLRepositoryOwnerNameMap {
  RepositoryOwner: GQLRepositoryOwner;
  Organization: GQLOrganization;
  User: GQLUser;
}

export enum GQLRepositoryAffiliation {
  COLLABORATOR = 'COLLABORATOR',
  ORGANIZATION_MEMBER = 'ORGANIZATION_MEMBER',
  OWNER = 'OWNER'
}

export interface GQLRepositoryOrder {
  direction: GQLOrderDirection;
  field: GQLRepositoryOrderField;
}

export enum GQLOrderDirection {
  ASC = 'ASC',
  DESC = 'DESC'
}

export enum GQLRepositoryOrderField {
  CREATED_AT = 'CREATED_AT',
  NAME = 'NAME',
  PUSHED_AT = 'PUSHED_AT',
  STARGAZERS = 'STARGAZERS',
  UPDATED_AT = 'UPDATED_AT'
}

export enum GQLRepositoryPrivacy {
  PRIVATE = 'PRIVATE',
  PUBLIC = 'PUBLIC'
}

export interface GQLRepositoryConnection {
  edges?: Array<GQLRepositoryEdge | null>;
  nodes?: Array<GQLRepository | null>;
  pageInfo: GQLPageInfo;
  totalCount: number;
  totalDiskUsage: number;
}

export interface GQLRepositoryEdge {
  cursor: string;
  node?: GQLRepository;
}

export interface GQLRepository extends GQLNode, GQLProjectOwner, GQLRegistryPackageOwner, GQLRepositoryInfo, GQLStarrable, GQLSubscribable, GQLUniformResourceLocatable {
  assignableUsers: GQLUserConnection;
  branchProtectionRules: GQLBranchProtectionRuleConnection;
  codeOfConduct?: GQLCodeOfConduct;
  collaborators?: GQLRepositoryCollaboratorConnection;
  commitComments: GQLCommitCommentConnection;
  createdAt: GQLDateTime;
  databaseId?: number;
  defaultBranchRef?: GQLRef;
  deployKeys: GQLDeployKeyConnection;
  deployments: GQLDeploymentConnection;
  description?: string;
  descriptionHTML: GQLHTML;
  diskUsage?: number;
  forkCount: number;
  forks: GQLRepositoryConnection;
  hasIssuesEnabled: boolean;
  hasWikiEnabled: boolean;
  homepageUrl?: GQLURI;
  id: string;
  isArchived: boolean;
  isFork: boolean;
  isLocked: boolean;
  isMirror: boolean;
  isPrivate: boolean;
  issue?: GQLIssue;
  issueOrPullRequest?: GQLIssueOrPullRequest;
  issues: GQLIssueConnection;
  label?: GQLLabel;
  labels?: GQLLabelConnection;
  languages?: GQLLanguageConnection;
  licenseInfo?: GQLLicense;
  lockReason?: GQLRepositoryLockReason;
  mentionableUsers: GQLUserConnection;
  mergeCommitAllowed: boolean;
  milestone?: GQLMilestone;
  milestones?: GQLMilestoneConnection;
  mirrorUrl?: GQLURI;
  name: string;
  nameWithOwner: string;
  object?: GQLGitObject;
  owner: GQLRepositoryOwner;
  parent?: GQLRepository;
  primaryLanguage?: GQLLanguage;
  project?: GQLProject;
  projects: GQLProjectConnection;
  projectsResourcePath: GQLURI;
  projectsUrl: GQLURI;
  
  /**
   * 
   * @deprecated The `ProtectedBranch` type is deprecated and will be removed soon. Use `Repository.branchProtectionRules` instead. Removal on 2019-01-01 UTC.
   */
  protectedBranches: GQLProtectedBranchConnection;
  pullRequest?: GQLPullRequest;
  pullRequests: GQLPullRequestConnection;
  pushedAt?: GQLDateTime;
  rebaseMergeAllowed: boolean;
  ref?: GQLRef;
  refs?: GQLRefConnection;
  release?: GQLRelease;
  releases: GQLReleaseConnection;
  repositoryTopics: GQLRepositoryTopicConnection;
  resourcePath: GQLURI;
  shortDescriptionHTML: GQLHTML;
  squashMergeAllowed: boolean;
  sshUrl: GQLGitSSHRemote;
  stargazers: GQLStargazerConnection;
  updatedAt: GQLDateTime;
  url: GQLURI;
  viewerCanAdminister: boolean;
  viewerCanCreateProjects: boolean;
  viewerCanSubscribe: boolean;
  viewerCanUpdateTopics: boolean;
  viewerHasStarred: boolean;
  viewerPermission?: GQLRepositoryPermission;
  viewerSubscription?: GQLSubscriptionState;
  watchers: GQLUserConnection;
}

export interface GQLRepositoryInfo {
  createdAt: GQLDateTime;
  description?: string;
  descriptionHTML: GQLHTML;
  forkCount: number;
  hasIssuesEnabled: boolean;
  hasWikiEnabled: boolean;
  homepageUrl?: GQLURI;
  isArchived: boolean;
  isFork: boolean;
  isLocked: boolean;
  isMirror: boolean;
  isPrivate: boolean;
  licenseInfo?: GQLLicense;
  lockReason?: GQLRepositoryLockReason;
  mirrorUrl?: GQLURI;
  name: string;
  nameWithOwner: string;
  owner: GQLRepositoryOwner;
  pushedAt?: GQLDateTime;
  resourcePath: GQLURI;
  shortDescriptionHTML: GQLHTML;
  updatedAt: GQLDateTime;
  url: GQLURI;
}

/** Use this to resolve interface type RepositoryInfo */
export type GQLPossibleRepositoryInfoTypeNames = 'Repository';

export interface GQLRepositoryInfoNameMap {
  RepositoryInfo: GQLRepositoryInfo;
  Repository: GQLRepository;
}

export enum GQLRepositoryLockReason {
  BILLING = 'BILLING',
  MIGRATING = 'MIGRATING',
  MOVING = 'MOVING',
  RENAME = 'RENAME'
}

export interface GQLStarrable {
  id: string;
  stargazers: GQLStargazerConnection;
  viewerHasStarred: boolean;
}

/** Use this to resolve interface type Starrable */
export type GQLPossibleStarrableTypeNames = 'Repository' | 'Topic' | 'Gist';

export interface GQLStarrableNameMap {
  Starrable: GQLStarrable;
  Repository: GQLRepository;
  Topic: GQLTopic;
  Gist: GQLGist;
}

export interface GQLStarOrder {
  direction: GQLOrderDirection;
  field: GQLStarOrderField;
}

export enum GQLStarOrderField {
  STARRED_AT = 'STARRED_AT'
}

export interface GQLStargazerConnection {
  edges?: Array<GQLStargazerEdge | null>;
  nodes?: Array<GQLUser | null>;
  pageInfo: GQLPageInfo;
  totalCount: number;
}

export interface GQLStargazerEdge {
  cursor: string;
  node: GQLUser;
  starredAt: GQLDateTime;
}

export interface GQLSubscribable {
  id: string;
  viewerCanSubscribe: boolean;
  viewerSubscription?: GQLSubscriptionState;
}

/** Use this to resolve interface type Subscribable */
export type GQLPossibleSubscribableTypeNames =
'Issue' |
'Repository' |
'PullRequest' |
'Commit' |
'Team';

export interface GQLSubscribableNameMap {
  Subscribable: GQLSubscribable;
  Issue: GQLIssue;
  Repository: GQLRepository;
  PullRequest: GQLPullRequest;
  Commit: GQLCommit;
  Team: GQLTeam;
}

export enum GQLSubscriptionState {
  IGNORED = 'IGNORED',
  SUBSCRIBED = 'SUBSCRIBED',
  UNSUBSCRIBED = 'UNSUBSCRIBED'
}

export interface GQLUniformResourceLocatable {
  resourcePath: GQLURI;
  url: GQLURI;
}

/** Use this to resolve interface type UniformResourceLocatable */
export type GQLPossibleUniformResourceLocatableTypeNames =
'Organization' |
'Issue' |
'User' |
'Repository' |
'PullRequest' |
'PullRequestCommit' |
'Commit' |
'Milestone' |
'ClosedEvent' |
'CrossReferencedEvent' |
'MergedEvent' |
'ReviewDismissedEvent' |
'Release' |
'RepositoryTopic' |
'Bot';

export interface GQLUniformResourceLocatableNameMap {
  UniformResourceLocatable: GQLUniformResourceLocatable;
  Organization: GQLOrganization;
  Issue: GQLIssue;
  User: GQLUser;
  Repository: GQLRepository;
  PullRequest: GQLPullRequest;
  PullRequestCommit: GQLPullRequestCommit;
  Commit: GQLCommit;
  Milestone: GQLMilestone;
  ClosedEvent: GQLClosedEvent;
  CrossReferencedEvent: GQLCrossReferencedEvent;
  MergedEvent: GQLMergedEvent;
  ReviewDismissedEvent: GQLReviewDismissedEvent;
  Release: GQLRelease;
  RepositoryTopic: GQLRepositoryTopic;
  Bot: GQLBot;
}

export interface GQLBranchProtectionRuleConnection {
  edges?: Array<GQLBranchProtectionRuleEdge | null>;
  nodes?: Array<GQLBranchProtectionRule | null>;
  pageInfo: GQLPageInfo;
  totalCount: number;
}

export interface GQLBranchProtectionRuleEdge {
  cursor: string;
  node?: GQLBranchProtectionRule;
}

export interface GQLBranchProtectionRule extends GQLNode {
  branchProtectionRuleConflicts: GQLBranchProtectionRuleConflictConnection;
  creator?: GQLActor;
  databaseId?: number;
  dismissesStaleReviews: boolean;
  id: string;
  isAdminEnforced: boolean;
  matchingRefs: GQLRefConnection;
  pattern: string;
  pushAllowances: GQLPushAllowanceConnection;
  repository?: GQLRepository;
  requiredApprovingReviewCount?: number;
  requiredStatusCheckContexts?: Array<string | null>;
  requiresApprovingReviews: boolean;
  requiresCommitSignatures: boolean;
  requiresStatusChecks: boolean;
  requiresStrictStatusChecks: boolean;
  restrictsPushes: boolean;
  restrictsReviewDismissals: boolean;
  reviewDismissalAllowances: GQLReviewDismissalAllowanceConnection;
}

export interface GQLBranchProtectionRuleConflictConnection {
  edges?: Array<GQLBranchProtectionRuleConflictEdge | null>;
  nodes?: Array<GQLBranchProtectionRuleConflict | null>;
  pageInfo: GQLPageInfo;
  totalCount: number;
}

export interface GQLBranchProtectionRuleConflictEdge {
  cursor: string;
  node?: GQLBranchProtectionRuleConflict;
}

export interface GQLBranchProtectionRuleConflict {
  branchProtectionRule?: GQLBranchProtectionRule;
  conflictingBranchProtectionRule?: GQLBranchProtectionRule;
  ref?: GQLRef;
}

export interface GQLRef extends GQLNode {
  associatedPullRequests: GQLPullRequestConnection;
  id: string;
  name: string;
  prefix: string;
  repository: GQLRepository;
  target: GQLGitObject;
}

export interface GQLIssueOrder {
  direction: GQLOrderDirection;
  field: GQLIssueOrderField;
}

export enum GQLIssueOrderField {
  COMMENTS = 'COMMENTS',
  CREATED_AT = 'CREATED_AT',
  UPDATED_AT = 'UPDATED_AT'
}

export enum GQLPullRequestState {
  CLOSED = 'CLOSED',
  MERGED = 'MERGED',
  OPEN = 'OPEN'
}

export interface GQLPullRequestConnection {
  edges?: Array<GQLPullRequestEdge | null>;
  nodes?: Array<GQLPullRequest | null>;
  pageInfo: GQLPageInfo;
  totalCount: number;
}

export interface GQLPullRequestEdge {
  cursor: string;
  node?: GQLPullRequest;
}

export interface GQLPullRequest extends GQLAssignable, GQLClosable, GQLComment, GQLLabelable, GQLLockable, GQLNode, GQLReactable, GQLRepositoryNode, GQLSubscribable, GQLUniformResourceLocatable, GQLUpdatable, GQLUpdatableComment {
  activeLockReason?: GQLLockReason;
  additions: number;
  assignees: GQLUserConnection;
  author?: GQLActor;
  authorAssociation: GQLCommentAuthorAssociation;
  baseRef?: GQLRef;
  baseRefName: string;
  baseRefOid: GQLGitObjectID;
  body: string;
  bodyHTML: GQLHTML;
  bodyText: string;
  changedFiles: number;
  closed: boolean;
  closedAt?: GQLDateTime;
  comments: GQLIssueCommentConnection;
  commits: GQLPullRequestCommitConnection;
  createdAt: GQLDateTime;
  createdViaEmail: boolean;
  databaseId?: number;
  deletions: number;
  editor?: GQLActor;
  headRef?: GQLRef;
  headRefName: string;
  headRefOid: GQLGitObjectID;
  headRepository?: GQLRepository;
  headRepositoryOwner?: GQLRepositoryOwner;
  id: string;
  includesCreatedEdit: boolean;
  isCrossRepository: boolean;
  labels?: GQLLabelConnection;
  lastEditedAt?: GQLDateTime;
  locked: boolean;
  maintainerCanModify: boolean;
  mergeCommit?: GQLCommit;
  mergeable: GQLMergeableState;
  merged: boolean;
  mergedAt?: GQLDateTime;
  mergedBy?: GQLActor;
  milestone?: GQLMilestone;
  number: number;
  participants: GQLUserConnection;
  permalink: GQLURI;
  potentialMergeCommit?: GQLCommit;
  projectCards: GQLProjectCardConnection;
  publishedAt?: GQLDateTime;
  reactionGroups?: Array<GQLReactionGroup>;
  reactions: GQLReactionConnection;
  repository: GQLRepository;
  resourcePath: GQLURI;
  revertResourcePath: GQLURI;
  revertUrl: GQLURI;
  reviewRequests?: GQLReviewRequestConnection;
  reviews?: GQLPullRequestReviewConnection;
  state: GQLPullRequestState;
  suggestedReviewers: Array<GQLSuggestedReviewer | null>;
  timeline: GQLPullRequestTimelineConnection;
  title: string;
  updatedAt: GQLDateTime;
  url: GQLURI;
  userContentEdits?: GQLUserContentEditConnection;
  viewerCanApplySuggestion: boolean;
  viewerCanReact: boolean;
  viewerCanSubscribe: boolean;
  viewerCanUpdate: boolean;
  viewerCannotUpdateReasons: Array<GQLCommentCannotUpdateReason>;
  viewerDidAuthor: boolean;
  viewerSubscription?: GQLSubscriptionState;
}

export interface GQLComment {
  author?: GQLActor;
  authorAssociation: GQLCommentAuthorAssociation;
  body: string;
  bodyHTML: GQLHTML;
  bodyText: string;
  createdAt: GQLDateTime;
  createdViaEmail: boolean;
  editor?: GQLActor;
  id: string;
  includesCreatedEdit: boolean;
  lastEditedAt?: GQLDateTime;
  publishedAt?: GQLDateTime;
  updatedAt: GQLDateTime;
  userContentEdits?: GQLUserContentEditConnection;
  viewerDidAuthor: boolean;
}

/** Use this to resolve interface type Comment */
export type GQLPossibleCommentTypeNames =
'Issue' |
'PullRequest' |
'IssueComment' |
'CommitComment' |
'PullRequestReview' |
'PullRequestReviewComment' |
'GistComment';

export interface GQLCommentNameMap {
  Comment: GQLComment;
  Issue: GQLIssue;
  PullRequest: GQLPullRequest;
  IssueComment: GQLIssueComment;
  CommitComment: GQLCommitComment;
  PullRequestReview: GQLPullRequestReview;
  PullRequestReviewComment: GQLPullRequestReviewComment;
  GistComment: GQLGistComment;
}

export enum GQLCommentAuthorAssociation {
  COLLABORATOR = 'COLLABORATOR',
  CONTRIBUTOR = 'CONTRIBUTOR',
  FIRST_TIMER = 'FIRST_TIMER',
  FIRST_TIME_CONTRIBUTOR = 'FIRST_TIME_CONTRIBUTOR',
  MEMBER = 'MEMBER',
  NONE = 'NONE',
  OWNER = 'OWNER'
}

export interface GQLUserContentEditConnection {
  edges?: Array<GQLUserContentEditEdge | null>;
  nodes?: Array<GQLUserContentEdit | null>;
  pageInfo: GQLPageInfo;
  totalCount: number;
}

export interface GQLUserContentEditEdge {
  cursor: string;
  node?: GQLUserContentEdit;
}

export interface GQLUserContentEdit extends GQLNode {
  createdAt: GQLDateTime;
  deletedAt?: GQLDateTime;
  deletedBy?: GQLActor;
  diff?: string;
  editedAt: GQLDateTime;
  editor?: GQLActor;
  id: string;
  updatedAt: GQLDateTime;
}

export interface GQLLabelable {
  labels?: GQLLabelConnection;
}

/** Use this to resolve interface type Labelable */
export type GQLPossibleLabelableTypeNames = 'Issue' | 'PullRequest';

export interface GQLLabelableNameMap {
  Labelable: GQLLabelable;
  Issue: GQLIssue;
  PullRequest: GQLPullRequest;
}

export interface GQLLabelConnection {
  edges?: Array<GQLLabelEdge | null>;
  nodes?: Array<GQLLabel | null>;
  pageInfo: GQLPageInfo;
  totalCount: number;
}

export interface GQLLabelEdge {
  cursor: string;
  node?: GQLLabel;
}

export interface GQLLabel extends GQLNode {
  color: string;
  createdAt?: GQLDateTime;
  description?: string;
  id: string;
  isDefault: boolean;
  issues: GQLIssueConnection;
  name: string;
  pullRequests: GQLPullRequestConnection;
  repository: GQLRepository;
  resourcePath: GQLURI;
  updatedAt?: GQLDateTime;
  url: GQLURI;
}

export enum GQLIssueState {
  CLOSED = 'CLOSED',
  OPEN = 'OPEN'
}

export interface GQLIssueConnection {
  edges?: Array<GQLIssueEdge | null>;
  nodes?: Array<GQLIssue | null>;
  pageInfo: GQLPageInfo;
  totalCount: number;
}

export interface GQLIssueEdge {
  cursor: string;
  node?: GQLIssue;
}

export interface GQLLockable {
  activeLockReason?: GQLLockReason;
  locked: boolean;
}

/** Use this to resolve interface type Lockable */
export type GQLPossibleLockableTypeNames = 'Issue' | 'PullRequest';

export interface GQLLockableNameMap {
  Lockable: GQLLockable;
  Issue: GQLIssue;
  PullRequest: GQLPullRequest;
}

export enum GQLLockReason {
  OFF_TOPIC = 'OFF_TOPIC',
  RESOLVED = 'RESOLVED',
  SPAM = 'SPAM',
  TOO_HEATED = 'TOO_HEATED'
}

export interface GQLReactable {
  databaseId?: number;
  id: string;
  reactionGroups?: Array<GQLReactionGroup>;
  reactions: GQLReactionConnection;
  viewerCanReact: boolean;
}

/** Use this to resolve interface type Reactable */
export type GQLPossibleReactableTypeNames =
'Issue' |
'PullRequest' |
'IssueComment' |
'CommitComment' |
'PullRequestReviewComment';

export interface GQLReactableNameMap {
  Reactable: GQLReactable;
  Issue: GQLIssue;
  PullRequest: GQLPullRequest;
  IssueComment: GQLIssueComment;
  CommitComment: GQLCommitComment;
  PullRequestReviewComment: GQLPullRequestReviewComment;
}

export interface GQLReactionGroup {
  content: GQLReactionContent;
  createdAt?: GQLDateTime;
  subject: GQLReactable;
  users: GQLReactingUserConnection;
  viewerHasReacted: boolean;
}

export enum GQLReactionContent {
  CONFUSED = 'CONFUSED',
  HEART = 'HEART',
  HOORAY = 'HOORAY',
  LAUGH = 'LAUGH',
  THUMBS_DOWN = 'THUMBS_DOWN',
  THUMBS_UP = 'THUMBS_UP'
}

export interface GQLReactingUserConnection {
  edges?: Array<GQLReactingUserEdge | null>;
  nodes?: Array<GQLUser | null>;
  pageInfo: GQLPageInfo;
  totalCount: number;
}

export interface GQLReactingUserEdge {
  cursor: string;
  node: GQLUser;
  reactedAt: GQLDateTime;
}

export interface GQLReactionOrder {
  direction: GQLOrderDirection;
  field: GQLReactionOrderField;
}

export enum GQLReactionOrderField {
  CREATED_AT = 'CREATED_AT'
}

export interface GQLReactionConnection {
  edges?: Array<GQLReactionEdge | null>;
  nodes?: Array<GQLReaction | null>;
  pageInfo: GQLPageInfo;
  totalCount: number;
  viewerHasReacted: boolean;
}

export interface GQLReactionEdge {
  cursor: string;
  node?: GQLReaction;
}

export interface GQLReaction extends GQLNode {
  content: GQLReactionContent;
  createdAt: GQLDateTime;
  databaseId?: number;
  id: string;
  reactable: GQLReactable;
  user?: GQLUser;
}

export interface GQLRepositoryNode {
  repository: GQLRepository;
}

/** Use this to resolve interface type RepositoryNode */
export type GQLPossibleRepositoryNodeTypeNames =
'Issue' |
'PullRequest' |
'IssueComment' |
'CommitComment' |
'PullRequestReview' |
'PullRequestReviewComment' |
'CommitCommentThread';

export interface GQLRepositoryNodeNameMap {
  RepositoryNode: GQLRepositoryNode;
  Issue: GQLIssue;
  PullRequest: GQLPullRequest;
  IssueComment: GQLIssueComment;
  CommitComment: GQLCommitComment;
  PullRequestReview: GQLPullRequestReview;
  PullRequestReviewComment: GQLPullRequestReviewComment;
  CommitCommentThread: GQLCommitCommentThread;
}

export interface GQLUpdatableComment {
  viewerCannotUpdateReasons: Array<GQLCommentCannotUpdateReason>;
}

/** Use this to resolve interface type UpdatableComment */
export type GQLPossibleUpdatableCommentTypeNames =
'Issue' |
'PullRequest' |
'IssueComment' |
'CommitComment' |
'PullRequestReview' |
'PullRequestReviewComment' |
'GistComment';

export interface GQLUpdatableCommentNameMap {
  UpdatableComment: GQLUpdatableComment;
  Issue: GQLIssue;
  PullRequest: GQLPullRequest;
  IssueComment: GQLIssueComment;
  CommitComment: GQLCommitComment;
  PullRequestReview: GQLPullRequestReview;
  PullRequestReviewComment: GQLPullRequestReviewComment;
  GistComment: GQLGistComment;
}

export enum GQLCommentCannotUpdateReason {
  DENIED = 'DENIED',
  INSUFFICIENT_ACCESS = 'INSUFFICIENT_ACCESS',
  LOCKED = 'LOCKED',
  LOGIN_REQUIRED = 'LOGIN_REQUIRED',
  MAINTENANCE = 'MAINTENANCE',
  VERIFIED_EMAIL_REQUIRED = 'VERIFIED_EMAIL_REQUIRED'
}

export interface GQLIssueCommentConnection {
  edges?: Array<GQLIssueCommentEdge | null>;
  nodes?: Array<GQLIssueComment | null>;
  pageInfo: GQLPageInfo;
  totalCount: number;
}

export interface GQLIssueCommentEdge {
  cursor: string;
  node?: GQLIssueComment;
}

export interface GQLIssueComment extends GQLComment, GQLDeletable, GQLNode, GQLReactable, GQLRepositoryNode, GQLUpdatable, GQLUpdatableComment {
  author?: GQLActor;
  authorAssociation: GQLCommentAuthorAssociation;
  body: string;
  bodyHTML: GQLHTML;
  bodyText: string;
  createdAt: GQLDateTime;
  createdViaEmail: boolean;
  databaseId?: number;
  editor?: GQLActor;
  id: string;
  includesCreatedEdit: boolean;
  isMinimized: boolean;
  issue: GQLIssue;
  lastEditedAt?: GQLDateTime;
  minimizedReason?: string;
  publishedAt?: GQLDateTime;
  pullRequest?: GQLPullRequest;
  reactionGroups?: Array<GQLReactionGroup>;
  reactions: GQLReactionConnection;
  repository: GQLRepository;
  resourcePath: GQLURI;
  updatedAt: GQLDateTime;
  url: GQLURI;
  userContentEdits?: GQLUserContentEditConnection;
  viewerCanDelete: boolean;
  viewerCanMinimize: boolean;
  viewerCanReact: boolean;
  viewerCanUpdate: boolean;
  viewerCannotUpdateReasons: Array<GQLCommentCannotUpdateReason>;
  viewerDidAuthor: boolean;
}

export interface GQLDeletable {
  viewerCanDelete: boolean;
}

/** Use this to resolve interface type Deletable */
export type GQLPossibleDeletableTypeNames =
'IssueComment' |
'CommitComment' |
'PullRequestReview' |
'PullRequestReviewComment' |
'GistComment';

export interface GQLDeletableNameMap {
  Deletable: GQLDeletable;
  IssueComment: GQLIssueComment;
  CommitComment: GQLCommitComment;
  PullRequestReview: GQLPullRequestReview;
  PullRequestReviewComment: GQLPullRequestReviewComment;
  GistComment: GQLGistComment;
}

export interface GQLPullRequestCommitConnection {
  edges?: Array<GQLPullRequestCommitEdge | null>;
  nodes?: Array<GQLPullRequestCommit | null>;
  pageInfo: GQLPageInfo;
  totalCount: number;
}

export interface GQLPullRequestCommitEdge {
  cursor: string;
  node?: GQLPullRequestCommit;
}

export interface GQLPullRequestCommit extends GQLNode, GQLUniformResourceLocatable {
  commit: GQLCommit;
  id: string;
  pullRequest: GQLPullRequest;
  resourcePath: GQLURI;
  url: GQLURI;
}

export interface GQLCommit extends GQLGitObject, GQLNode, GQLSubscribable, GQLUniformResourceLocatable {
  abbreviatedOid: string;
  additions: number;
  author?: GQLGitActor;
  authoredByCommitter: boolean;
  authoredDate: GQLDateTime;
  blame: GQLBlame;
  changedFiles: number;
  comments: GQLCommitCommentConnection;
  commitResourcePath: GQLURI;
  commitUrl: GQLURI;
  committedDate: GQLDateTime;
  committedViaWeb: boolean;
  committer?: GQLGitActor;
  deletions: number;
  history: GQLCommitHistoryConnection;
  id: string;
  message: string;
  messageBody: string;
  messageBodyHTML: GQLHTML;
  messageHeadline: string;
  messageHeadlineHTML: GQLHTML;
  oid: GQLGitObjectID;
  parents: GQLCommitConnection;
  pushedDate?: GQLDateTime;
  repository: GQLRepository;
  resourcePath: GQLURI;
  signature?: GQLGitSignature;
  status?: GQLStatus;
  tarballUrl: GQLURI;
  tree: GQLTree;
  treeResourcePath: GQLURI;
  treeUrl: GQLURI;
  url: GQLURI;
  viewerCanSubscribe: boolean;
  viewerSubscription?: GQLSubscriptionState;
  zipballUrl: GQLURI;
}

export interface GQLGitObject {
  abbreviatedOid: string;
  commitResourcePath: GQLURI;
  commitUrl: GQLURI;
  id: string;
  oid: GQLGitObjectID;
  repository: GQLRepository;
}

/** Use this to resolve interface type GitObject */
export type GQLPossibleGitObjectTypeNames = 'Commit' | 'Tree' | 'Blob' | 'Tag';

export interface GQLGitObjectNameMap {
  GitObject: GQLGitObject;
  Commit: GQLCommit;
  Tree: GQLTree;
  Blob: GQLBlob;
  Tag: GQLTag;
}

export interface GQLGitActor {
  avatarUrl: GQLURI;
  date?: GQLGitTimestamp;
  email?: string;
  name?: string;
  user?: GQLUser;
}

export type GQLGitTimestamp = any;

export interface GQLBlame {
  ranges: Array<GQLBlameRange>;
}

export interface GQLBlameRange {
  age: number;
  commit: GQLCommit;
  endingLine: number;
  startingLine: number;
}

export interface GQLCommitCommentConnection {
  edges?: Array<GQLCommitCommentEdge | null>;
  nodes?: Array<GQLCommitComment | null>;
  pageInfo: GQLPageInfo;
  totalCount: number;
}

export interface GQLCommitCommentEdge {
  cursor: string;
  node?: GQLCommitComment;
}

export interface GQLCommitComment extends GQLComment, GQLDeletable, GQLNode, GQLReactable, GQLRepositoryNode, GQLUpdatable, GQLUpdatableComment {
  author?: GQLActor;
  authorAssociation: GQLCommentAuthorAssociation;
  body: string;
  bodyHTML: GQLHTML;
  bodyText: string;
  commit?: GQLCommit;
  createdAt: GQLDateTime;
  createdViaEmail: boolean;
  databaseId?: number;
  editor?: GQLActor;
  id: string;
  includesCreatedEdit: boolean;
  isMinimized: boolean;
  lastEditedAt?: GQLDateTime;
  minimizedReason?: string;
  path?: string;
  position?: number;
  publishedAt?: GQLDateTime;
  reactionGroups?: Array<GQLReactionGroup>;
  reactions: GQLReactionConnection;
  repository: GQLRepository;
  resourcePath: GQLURI;
  updatedAt: GQLDateTime;
  url: GQLURI;
  userContentEdits?: GQLUserContentEditConnection;
  viewerCanDelete: boolean;
  viewerCanMinimize: boolean;
  viewerCanReact: boolean;
  viewerCanUpdate: boolean;
  viewerCannotUpdateReasons: Array<GQLCommentCannotUpdateReason>;
  viewerDidAuthor: boolean;
}

export interface GQLCommitAuthor {
  emails?: Array<string>;
  id?: string;
}

export interface GQLCommitHistoryConnection {
  edges?: Array<GQLCommitEdge | null>;
  nodes?: Array<GQLCommit | null>;
  pageInfo: GQLPageInfo;
  totalCount: number;
}

export interface GQLCommitEdge {
  cursor: string;
  node?: GQLCommit;
}

export interface GQLCommitConnection {
  edges?: Array<GQLCommitEdge | null>;
  nodes?: Array<GQLCommit | null>;
  pageInfo: GQLPageInfo;
  totalCount: number;
}

export interface GQLGitSignature {
  email: string;
  isValid: boolean;
  payload: string;
  signature: string;
  signer?: GQLUser;
  state: GQLGitSignatureState;
  wasSignedByGitHub: boolean;
}

/** Use this to resolve interface type GitSignature */
export type GQLPossibleGitSignatureTypeNames =
'GpgSignature' |
'SmimeSignature' |
'UnknownSignature';

export interface GQLGitSignatureNameMap {
  GitSignature: GQLGitSignature;
  GpgSignature: GQLGpgSignature;
  SmimeSignature: GQLSmimeSignature;
  UnknownSignature: GQLUnknownSignature;
}

export enum GQLGitSignatureState {
  BAD_CERT = 'BAD_CERT',
  BAD_EMAIL = 'BAD_EMAIL',
  EXPIRED_KEY = 'EXPIRED_KEY',
  GPGVERIFY_ERROR = 'GPGVERIFY_ERROR',
  GPGVERIFY_UNAVAILABLE = 'GPGVERIFY_UNAVAILABLE',
  INVALID = 'INVALID',
  MALFORMED_SIG = 'MALFORMED_SIG',
  NOT_SIGNING_KEY = 'NOT_SIGNING_KEY',
  NO_USER = 'NO_USER',
  OCSP_ERROR = 'OCSP_ERROR',
  OCSP_PENDING = 'OCSP_PENDING',
  OCSP_REVOKED = 'OCSP_REVOKED',
  UNKNOWN_KEY = 'UNKNOWN_KEY',
  UNKNOWN_SIG_TYPE = 'UNKNOWN_SIG_TYPE',
  UNSIGNED = 'UNSIGNED',
  UNVERIFIED_EMAIL = 'UNVERIFIED_EMAIL',
  VALID = 'VALID'
}

export interface GQLStatus extends GQLNode {
  commit?: GQLCommit;
  context?: GQLStatusContext;
  contexts: Array<GQLStatusContext>;
  id: string;
  state: GQLStatusState;
}

export interface GQLStatusContext extends GQLNode {
  commit?: GQLCommit;
  context: string;
  createdAt: GQLDateTime;
  creator?: GQLActor;
  description?: string;
  id: string;
  state: GQLStatusState;
  targetUrl?: GQLURI;
}

export enum GQLStatusState {
  ERROR = 'ERROR',
  EXPECTED = 'EXPECTED',
  FAILURE = 'FAILURE',
  PENDING = 'PENDING',
  SUCCESS = 'SUCCESS'
}

export interface GQLTree extends GQLGitObject, GQLNode {
  abbreviatedOid: string;
  commitResourcePath: GQLURI;
  commitUrl: GQLURI;
  entries?: Array<GQLTreeEntry>;
  id: string;
  oid: GQLGitObjectID;
  repository: GQLRepository;
}

export interface GQLTreeEntry {
  mode: number;
  name: string;
  object?: GQLGitObject;
  oid: GQLGitObjectID;
  repository: GQLRepository;
  type: string;
}

export enum GQLMergeableState {
  CONFLICTING = 'CONFLICTING',
  MERGEABLE = 'MERGEABLE',
  UNKNOWN = 'UNKNOWN'
}

export interface GQLMilestone extends GQLClosable, GQLNode, GQLUniformResourceLocatable {
  closed: boolean;
  closedAt?: GQLDateTime;
  createdAt: GQLDateTime;
  creator?: GQLActor;
  description?: string;
  dueOn?: GQLDateTime;
  id: string;
  issues: GQLIssueConnection;
  number: number;
  pullRequests: GQLPullRequestConnection;
  repository: GQLRepository;
  resourcePath: GQLURI;
  state: GQLMilestoneState;
  title: string;
  updatedAt: GQLDateTime;
  url: GQLURI;
}

export enum GQLMilestoneState {
  CLOSED = 'CLOSED',
  OPEN = 'OPEN'
}

export interface GQLReviewRequestConnection {
  edges?: Array<GQLReviewRequestEdge | null>;
  nodes?: Array<GQLReviewRequest | null>;
  pageInfo: GQLPageInfo;
  totalCount: number;
}

export interface GQLReviewRequestEdge {
  cursor: string;
  node?: GQLReviewRequest;
}

export interface GQLReviewRequest extends GQLNode {
  databaseId?: number;
  id: string;
  pullRequest: GQLPullRequest;
  requestedReviewer?: GQLRequestedReviewer;
}

export type GQLRequestedReviewer = GQLTeam | GQLUser;

/** Use this to resolve union type RequestedReviewer */
export type GQLPossibleRequestedReviewerTypeNames = 'Team' | 'User';

export interface GQLRequestedReviewerNameMap {
  RequestedReviewer: GQLRequestedReviewer;
  Team: GQLTeam;
  User: GQLUser;
}

export interface GQLTeam extends GQLNode, GQLSubscribable {
  ancestors: GQLTeamConnection;
  avatarUrl?: GQLURI;
  childTeams: GQLTeamConnection;
  combinedSlug: string;
  createdAt: GQLDateTime;
  description?: string;
  editTeamResourcePath: GQLURI;
  editTeamUrl: GQLURI;
  id: string;
  invitations?: GQLOrganizationInvitationConnection;
  members: GQLTeamMemberConnection;
  membersResourcePath: GQLURI;
  membersUrl: GQLURI;
  name: string;
  newTeamResourcePath: GQLURI;
  newTeamUrl: GQLURI;
  organization: GQLOrganization;
  parentTeam?: GQLTeam;
  privacy: GQLTeamPrivacy;
  repositories: GQLTeamRepositoryConnection;
  repositoriesResourcePath: GQLURI;
  repositoriesUrl: GQLURI;
  resourcePath: GQLURI;
  slug: string;
  teamsResourcePath: GQLURI;
  teamsUrl: GQLURI;
  updatedAt: GQLDateTime;
  url: GQLURI;
  viewerCanAdminister: boolean;
  viewerCanSubscribe: boolean;
  viewerSubscription?: GQLSubscriptionState;
}

export interface GQLTeamConnection {
  edges?: Array<GQLTeamEdge | null>;
  nodes?: Array<GQLTeam | null>;
  pageInfo: GQLPageInfo;
  totalCount: number;
}

export interface GQLTeamEdge {
  cursor: string;
  node?: GQLTeam;
}

export interface GQLTeamOrder {
  direction: GQLOrderDirection;
  field: GQLTeamOrderField;
}

export enum GQLTeamOrderField {
  NAME = 'NAME'
}

export interface GQLOrganizationInvitationConnection {
  edges?: Array<GQLOrganizationInvitationEdge | null>;
  nodes?: Array<GQLOrganizationInvitation | null>;
  pageInfo: GQLPageInfo;
  totalCount: number;
}

export interface GQLOrganizationInvitationEdge {
  cursor: string;
  node?: GQLOrganizationInvitation;
}

export interface GQLOrganizationInvitation extends GQLNode {
  createdAt: GQLDateTime;
  email?: string;
  id: string;
  invitationType: GQLOrganizationInvitationType;
  invitee?: GQLUser;
  inviter: GQLUser;
  organization: GQLOrganization;
  role: GQLOrganizationInvitationRole;
}

export enum GQLOrganizationInvitationType {
  EMAIL = 'EMAIL',
  USER = 'USER'
}

export enum GQLOrganizationInvitationRole {
  ADMIN = 'ADMIN',
  BILLING_MANAGER = 'BILLING_MANAGER',
  DIRECT_MEMBER = 'DIRECT_MEMBER',
  REINSTATE = 'REINSTATE'
}

export enum GQLTeamMembershipType {
  ALL = 'ALL',
  CHILD_TEAM = 'CHILD_TEAM',
  IMMEDIATE = 'IMMEDIATE'
}

export interface GQLTeamMemberOrder {
  direction: GQLOrderDirection;
  field: GQLTeamMemberOrderField;
}

export enum GQLTeamMemberOrderField {
  CREATED_AT = 'CREATED_AT',
  LOGIN = 'LOGIN'
}

export enum GQLTeamMemberRole {
  MAINTAINER = 'MAINTAINER',
  MEMBER = 'MEMBER'
}

export interface GQLTeamMemberConnection {
  edges?: Array<GQLTeamMemberEdge | null>;
  nodes?: Array<GQLUser | null>;
  pageInfo: GQLPageInfo;
  totalCount: number;
}

export interface GQLTeamMemberEdge {
  cursor: string;
  memberAccessResourcePath: GQLURI;
  memberAccessUrl: GQLURI;
  node: GQLUser;
  role: GQLTeamMemberRole;
}

export enum GQLTeamPrivacy {
  SECRET = 'SECRET',
  VISIBLE = 'VISIBLE'
}

export interface GQLTeamRepositoryOrder {
  direction: GQLOrderDirection;
  field: GQLTeamRepositoryOrderField;
}

export enum GQLTeamRepositoryOrderField {
  CREATED_AT = 'CREATED_AT',
  NAME = 'NAME',
  PERMISSION = 'PERMISSION',
  PUSHED_AT = 'PUSHED_AT',
  STARGAZERS = 'STARGAZERS',
  UPDATED_AT = 'UPDATED_AT'
}

export interface GQLTeamRepositoryConnection {
  edges?: Array<GQLTeamRepositoryEdge | null>;
  nodes?: Array<GQLRepository | null>;
  pageInfo: GQLPageInfo;
  totalCount: number;
}

export interface GQLTeamRepositoryEdge {
  cursor: string;
  node: GQLRepository;
  permission: GQLRepositoryPermission;
}

export enum GQLRepositoryPermission {
  ADMIN = 'ADMIN',
  READ = 'READ',
  WRITE = 'WRITE'
}

export enum GQLPullRequestReviewState {
  APPROVED = 'APPROVED',
  CHANGES_REQUESTED = 'CHANGES_REQUESTED',
  COMMENTED = 'COMMENTED',
  DISMISSED = 'DISMISSED',
  PENDING = 'PENDING'
}

export interface GQLPullRequestReviewConnection {
  edges?: Array<GQLPullRequestReviewEdge | null>;
  nodes?: Array<GQLPullRequestReview | null>;
  pageInfo: GQLPageInfo;
  totalCount: number;
}

export interface GQLPullRequestReviewEdge {
  cursor: string;
  node?: GQLPullRequestReview;
}

export interface GQLPullRequestReview extends GQLComment, GQLDeletable, GQLNode, GQLRepositoryNode, GQLUpdatable, GQLUpdatableComment {
  author?: GQLActor;
  authorAssociation: GQLCommentAuthorAssociation;
  body: string;
  bodyHTML: GQLHTML;
  bodyText: string;
  comments: GQLPullRequestReviewCommentConnection;
  commit?: GQLCommit;
  createdAt: GQLDateTime;
  createdViaEmail: boolean;
  databaseId?: number;
  editor?: GQLActor;
  id: string;
  includesCreatedEdit: boolean;
  lastEditedAt?: GQLDateTime;
  onBehalfOf: GQLTeamConnection;
  publishedAt?: GQLDateTime;
  pullRequest: GQLPullRequest;
  repository: GQLRepository;
  resourcePath: GQLURI;
  state: GQLPullRequestReviewState;
  submittedAt?: GQLDateTime;
  updatedAt: GQLDateTime;
  url: GQLURI;
  userContentEdits?: GQLUserContentEditConnection;
  viewerCanDelete: boolean;
  viewerCanUpdate: boolean;
  viewerCannotUpdateReasons: Array<GQLCommentCannotUpdateReason>;
  viewerDidAuthor: boolean;
}

export interface GQLPullRequestReviewCommentConnection {
  edges?: Array<GQLPullRequestReviewCommentEdge | null>;
  nodes?: Array<GQLPullRequestReviewComment | null>;
  pageInfo: GQLPageInfo;
  totalCount: number;
}

export interface GQLPullRequestReviewCommentEdge {
  cursor: string;
  node?: GQLPullRequestReviewComment;
}

export interface GQLPullRequestReviewComment extends GQLComment, GQLDeletable, GQLNode, GQLReactable, GQLRepositoryNode, GQLUpdatable, GQLUpdatableComment {
  author?: GQLActor;
  authorAssociation: GQLCommentAuthorAssociation;
  body: string;
  bodyHTML: GQLHTML;
  bodyText: string;
  commit: GQLCommit;
  createdAt: GQLDateTime;
  createdViaEmail: boolean;
  databaseId?: number;
  diffHunk: string;
  draftedAt: GQLDateTime;
  editor?: GQLActor;
  id: string;
  includesCreatedEdit: boolean;
  isMinimized: boolean;
  lastEditedAt?: GQLDateTime;
  minimizedReason?: string;
  originalCommit?: GQLCommit;
  originalPosition: number;
  outdated: boolean;
  path: string;
  position?: number;
  publishedAt?: GQLDateTime;
  pullRequest: GQLPullRequest;
  pullRequestReview?: GQLPullRequestReview;
  reactionGroups?: Array<GQLReactionGroup>;
  reactions: GQLReactionConnection;
  replyTo?: GQLPullRequestReviewComment;
  repository: GQLRepository;
  resourcePath: GQLURI;
  state: GQLPullRequestReviewCommentState;
  updatedAt: GQLDateTime;
  url: GQLURI;
  userContentEdits?: GQLUserContentEditConnection;
  viewerCanDelete: boolean;
  viewerCanMinimize: boolean;
  viewerCanReact: boolean;
  viewerCanUpdate: boolean;
  viewerCannotUpdateReasons: Array<GQLCommentCannotUpdateReason>;
  viewerDidAuthor: boolean;
}

export enum GQLPullRequestReviewCommentState {
  PENDING = 'PENDING',
  SUBMITTED = 'SUBMITTED'
}

export interface GQLSuggestedReviewer {
  isAuthor: boolean;
  isCommenter: boolean;
  reviewer: GQLUser;
}

export interface GQLPullRequestTimelineConnection {
  edges?: Array<GQLPullRequestTimelineItemEdge | null>;
  nodes?: Array<GQLPullRequestTimelineItem | null>;
  pageInfo: GQLPageInfo;
  totalCount: number;
}

export interface GQLPullRequestTimelineItemEdge {
  cursor: string;
  node?: GQLPullRequestTimelineItem;
}

export type GQLPullRequestTimelineItem =
GQLAssignedEvent |
GQLBaseRefForcePushedEvent |
GQLClosedEvent |
GQLCommit |
GQLCommitCommentThread |
GQLCrossReferencedEvent |
GQLDemilestonedEvent |
GQLDeployedEvent |
GQLDeploymentEnvironmentChangedEvent |
GQLHeadRefDeletedEvent |
GQLHeadRefForcePushedEvent |
GQLHeadRefRestoredEvent |
GQLIssueComment |
GQLLabeledEvent |
GQLLockedEvent |
GQLMergedEvent |
GQLMilestonedEvent |
GQLPullRequestReview |
GQLPullRequestReviewComment |
GQLPullRequestReviewThread |
GQLReferencedEvent |
GQLRenamedTitleEvent |
GQLReopenedEvent |
GQLReviewDismissedEvent |
GQLReviewRequestRemovedEvent |
GQLReviewRequestedEvent |
GQLSubscribedEvent |
GQLUnassignedEvent |
GQLUnlabeledEvent |
GQLUnlockedEvent |
GQLUnsubscribedEvent;

/** Use this to resolve union type PullRequestTimelineItem */
export type GQLPossiblePullRequestTimelineItemTypeNames =
'AssignedEvent' |
'BaseRefForcePushedEvent' |
'ClosedEvent' |
'Commit' |
'CommitCommentThread' |
'CrossReferencedEvent' |
'DemilestonedEvent' |
'DeployedEvent' |
'DeploymentEnvironmentChangedEvent' |
'HeadRefDeletedEvent' |
'HeadRefForcePushedEvent' |
'HeadRefRestoredEvent' |
'IssueComment' |
'LabeledEvent' |
'LockedEvent' |
'MergedEvent' |
'MilestonedEvent' |
'PullRequestReview' |
'PullRequestReviewComment' |
'PullRequestReviewThread' |
'ReferencedEvent' |
'RenamedTitleEvent' |
'ReopenedEvent' |
'ReviewDismissedEvent' |
'ReviewRequestRemovedEvent' |
'ReviewRequestedEvent' |
'SubscribedEvent' |
'UnassignedEvent' |
'UnlabeledEvent' |
'UnlockedEvent' |
'UnsubscribedEvent';

export interface GQLPullRequestTimelineItemNameMap {
  PullRequestTimelineItem: GQLPullRequestTimelineItem;
  AssignedEvent: GQLAssignedEvent;
  BaseRefForcePushedEvent: GQLBaseRefForcePushedEvent;
  ClosedEvent: GQLClosedEvent;
  Commit: GQLCommit;
  CommitCommentThread: GQLCommitCommentThread;
  CrossReferencedEvent: GQLCrossReferencedEvent;
  DemilestonedEvent: GQLDemilestonedEvent;
  DeployedEvent: GQLDeployedEvent;
  DeploymentEnvironmentChangedEvent: GQLDeploymentEnvironmentChangedEvent;
  HeadRefDeletedEvent: GQLHeadRefDeletedEvent;
  HeadRefForcePushedEvent: GQLHeadRefForcePushedEvent;
  HeadRefRestoredEvent: GQLHeadRefRestoredEvent;
  IssueComment: GQLIssueComment;
  LabeledEvent: GQLLabeledEvent;
  LockedEvent: GQLLockedEvent;
  MergedEvent: GQLMergedEvent;
  MilestonedEvent: GQLMilestonedEvent;
  PullRequestReview: GQLPullRequestReview;
  PullRequestReviewComment: GQLPullRequestReviewComment;
  PullRequestReviewThread: GQLPullRequestReviewThread;
  ReferencedEvent: GQLReferencedEvent;
  RenamedTitleEvent: GQLRenamedTitleEvent;
  ReopenedEvent: GQLReopenedEvent;
  ReviewDismissedEvent: GQLReviewDismissedEvent;
  ReviewRequestRemovedEvent: GQLReviewRequestRemovedEvent;
  ReviewRequestedEvent: GQLReviewRequestedEvent;
  SubscribedEvent: GQLSubscribedEvent;
  UnassignedEvent: GQLUnassignedEvent;
  UnlabeledEvent: GQLUnlabeledEvent;
  UnlockedEvent: GQLUnlockedEvent;
  UnsubscribedEvent: GQLUnsubscribedEvent;
}

export interface GQLAssignedEvent extends GQLNode {
  actor?: GQLActor;
  assignable: GQLAssignable;
  createdAt: GQLDateTime;
  id: string;
  user?: GQLUser;
}

export interface GQLBaseRefForcePushedEvent extends GQLNode {
  actor?: GQLActor;
  afterCommit?: GQLCommit;
  beforeCommit?: GQLCommit;
  createdAt: GQLDateTime;
  id: string;
  pullRequest: GQLPullRequest;
  ref?: GQLRef;
}

export interface GQLClosedEvent extends GQLNode, GQLUniformResourceLocatable {
  actor?: GQLActor;
  closable: GQLClosable;
  closer?: GQLCloser;
  createdAt: GQLDateTime;
  id: string;
  resourcePath: GQLURI;
  url: GQLURI;
}

export type GQLCloser = GQLCommit | GQLPullRequest;

/** Use this to resolve union type Closer */
export type GQLPossibleCloserTypeNames = 'Commit' | 'PullRequest';

export interface GQLCloserNameMap {
  Closer: GQLCloser;
  Commit: GQLCommit;
  PullRequest: GQLPullRequest;
}

export interface GQLCommitCommentThread extends GQLNode, GQLRepositoryNode {
  comments: GQLCommitCommentConnection;
  commit: GQLCommit;
  id: string;
  path?: string;
  position?: number;
  repository: GQLRepository;
}

export interface GQLCrossReferencedEvent extends GQLNode, GQLUniformResourceLocatable {
  actor?: GQLActor;
  createdAt: GQLDateTime;
  id: string;
  isCrossRepository: boolean;
  referencedAt: GQLDateTime;
  resourcePath: GQLURI;
  source: GQLReferencedSubject;
  target: GQLReferencedSubject;
  url: GQLURI;
  willCloseTarget: boolean;
}

export type GQLReferencedSubject = GQLIssue | GQLPullRequest;

/** Use this to resolve union type ReferencedSubject */
export type GQLPossibleReferencedSubjectTypeNames = 'Issue' | 'PullRequest';

export interface GQLReferencedSubjectNameMap {
  ReferencedSubject: GQLReferencedSubject;
  Issue: GQLIssue;
  PullRequest: GQLPullRequest;
}

export interface GQLDemilestonedEvent extends GQLNode {
  actor?: GQLActor;
  createdAt: GQLDateTime;
  id: string;
  milestoneTitle: string;
  subject: GQLMilestoneItem;
}

export type GQLMilestoneItem = GQLIssue | GQLPullRequest;

/** Use this to resolve union type MilestoneItem */
export type GQLPossibleMilestoneItemTypeNames = 'Issue' | 'PullRequest';

export interface GQLMilestoneItemNameMap {
  MilestoneItem: GQLMilestoneItem;
  Issue: GQLIssue;
  PullRequest: GQLPullRequest;
}

export interface GQLDeployedEvent extends GQLNode {
  actor?: GQLActor;
  createdAt: GQLDateTime;
  databaseId?: number;
  deployment: GQLDeployment;
  id: string;
  pullRequest: GQLPullRequest;
  ref?: GQLRef;
}

export interface GQLDeployment extends GQLNode {
  commit?: GQLCommit;
  commitOid: string;
  createdAt: GQLDateTime;
  creator?: GQLActor;
  databaseId?: number;
  description?: string;
  environment?: string;
  id: string;
  latestStatus?: GQLDeploymentStatus;
  payload?: string;
  ref?: GQLRef;
  repository: GQLRepository;
  state?: GQLDeploymentState;
  statuses?: GQLDeploymentStatusConnection;
  task?: string;
  updatedAt: GQLDateTime;
}

export interface GQLDeploymentStatus extends GQLNode {
  createdAt: GQLDateTime;
  creator?: GQLActor;
  deployment: GQLDeployment;
  description?: string;
  environmentUrl?: GQLURI;
  id: string;
  logUrl?: GQLURI;
  state: GQLDeploymentStatusState;
  updatedAt: GQLDateTime;
}

export enum GQLDeploymentStatusState {
  ERROR = 'ERROR',
  FAILURE = 'FAILURE',
  INACTIVE = 'INACTIVE',
  PENDING = 'PENDING',
  SUCCESS = 'SUCCESS'
}

export enum GQLDeploymentState {
  ABANDONED = 'ABANDONED',
  ACTIVE = 'ACTIVE',
  DESTROYED = 'DESTROYED',
  ERROR = 'ERROR',
  FAILURE = 'FAILURE',
  INACTIVE = 'INACTIVE',
  PENDING = 'PENDING'
}

export interface GQLDeploymentStatusConnection {
  edges?: Array<GQLDeploymentStatusEdge | null>;
  nodes?: Array<GQLDeploymentStatus | null>;
  pageInfo: GQLPageInfo;
  totalCount: number;
}

export interface GQLDeploymentStatusEdge {
  cursor: string;
  node?: GQLDeploymentStatus;
}

export interface GQLDeploymentEnvironmentChangedEvent extends GQLNode {
  actor?: GQLActor;
  createdAt: GQLDateTime;
  deploymentStatus: GQLDeploymentStatus;
  id: string;
  pullRequest: GQLPullRequest;
}

export interface GQLHeadRefDeletedEvent extends GQLNode {
  actor?: GQLActor;
  createdAt: GQLDateTime;
  headRef?: GQLRef;
  headRefName: string;
  id: string;
  pullRequest: GQLPullRequest;
}

export interface GQLHeadRefForcePushedEvent extends GQLNode {
  actor?: GQLActor;
  afterCommit?: GQLCommit;
  beforeCommit?: GQLCommit;
  createdAt: GQLDateTime;
  id: string;
  pullRequest: GQLPullRequest;
  ref?: GQLRef;
}

export interface GQLHeadRefRestoredEvent extends GQLNode {
  actor?: GQLActor;
  createdAt: GQLDateTime;
  id: string;
  pullRequest: GQLPullRequest;
}

export interface GQLLabeledEvent extends GQLNode {
  actor?: GQLActor;
  createdAt: GQLDateTime;
  id: string;
  label: GQLLabel;
  labelable: GQLLabelable;
}

export interface GQLLockedEvent extends GQLNode {
  actor?: GQLActor;
  createdAt: GQLDateTime;
  id: string;
  lockReason?: GQLLockReason;
  lockable: GQLLockable;
}

export interface GQLMergedEvent extends GQLNode, GQLUniformResourceLocatable {
  actor?: GQLActor;
  commit?: GQLCommit;
  createdAt: GQLDateTime;
  id: string;
  mergeRef?: GQLRef;
  mergeRefName: string;
  pullRequest: GQLPullRequest;
  resourcePath: GQLURI;
  url: GQLURI;
}

export interface GQLMilestonedEvent extends GQLNode {
  actor?: GQLActor;
  createdAt: GQLDateTime;
  id: string;
  milestoneTitle: string;
  subject: GQLMilestoneItem;
}

export interface GQLPullRequestReviewThread extends GQLNode {
  comments: GQLPullRequestReviewCommentConnection;
  id: string;
  pullRequest: GQLPullRequest;
  repository: GQLRepository;
}

export interface GQLReferencedEvent extends GQLNode {
  actor?: GQLActor;
  commit?: GQLCommit;
  commitRepository: GQLRepository;
  createdAt: GQLDateTime;
  id: string;
  isCrossRepository: boolean;
  isDirectReference: boolean;
  subject: GQLReferencedSubject;
}

export interface GQLRenamedTitleEvent extends GQLNode {
  actor?: GQLActor;
  createdAt: GQLDateTime;
  currentTitle: string;
  id: string;
  previousTitle: string;
  subject: GQLRenamedTitleSubject;
}

export type GQLRenamedTitleSubject = GQLIssue | GQLPullRequest;

/** Use this to resolve union type RenamedTitleSubject */
export type GQLPossibleRenamedTitleSubjectTypeNames = 'Issue' | 'PullRequest';

export interface GQLRenamedTitleSubjectNameMap {
  RenamedTitleSubject: GQLRenamedTitleSubject;
  Issue: GQLIssue;
  PullRequest: GQLPullRequest;
}

export interface GQLReopenedEvent extends GQLNode {
  actor?: GQLActor;
  closable: GQLClosable;
  createdAt: GQLDateTime;
  id: string;
}

export interface GQLReviewDismissedEvent extends GQLNode, GQLUniformResourceLocatable {
  actor?: GQLActor;
  createdAt: GQLDateTime;
  databaseId?: number;
  id: string;
  message: string;
  messageHtml: GQLHTML;
  previousReviewState: GQLPullRequestReviewState;
  pullRequest: GQLPullRequest;
  pullRequestCommit?: GQLPullRequestCommit;
  resourcePath: GQLURI;
  review?: GQLPullRequestReview;
  url: GQLURI;
}

export interface GQLReviewRequestRemovedEvent extends GQLNode {
  actor?: GQLActor;
  createdAt: GQLDateTime;
  id: string;
  pullRequest: GQLPullRequest;
  requestedReviewer?: GQLRequestedReviewer;
}

export interface GQLReviewRequestedEvent extends GQLNode {
  actor?: GQLActor;
  createdAt: GQLDateTime;
  id: string;
  pullRequest: GQLPullRequest;
  requestedReviewer?: GQLRequestedReviewer;
}

export interface GQLSubscribedEvent extends GQLNode {
  actor?: GQLActor;
  createdAt: GQLDateTime;
  id: string;
  subscribable: GQLSubscribable;
}

export interface GQLUnassignedEvent extends GQLNode {
  actor?: GQLActor;
  assignable: GQLAssignable;
  createdAt: GQLDateTime;
  id: string;
  user?: GQLUser;
}

export interface GQLUnlabeledEvent extends GQLNode {
  actor?: GQLActor;
  createdAt: GQLDateTime;
  id: string;
  label: GQLLabel;
  labelable: GQLLabelable;
}

export interface GQLUnlockedEvent extends GQLNode {
  actor?: GQLActor;
  createdAt: GQLDateTime;
  id: string;
  lockable: GQLLockable;
}

export interface GQLUnsubscribedEvent extends GQLNode {
  actor?: GQLActor;
  createdAt: GQLDateTime;
  id: string;
  subscribable: GQLSubscribable;
}

export interface GQLRefConnection {
  edges?: Array<GQLRefEdge | null>;
  nodes?: Array<GQLRef | null>;
  pageInfo: GQLPageInfo;
  totalCount: number;
}

export interface GQLRefEdge {
  cursor: string;
  node?: GQLRef;
}

export interface GQLPushAllowanceConnection {
  edges?: Array<GQLPushAllowanceEdge | null>;
  nodes?: Array<GQLPushAllowance | null>;
  pageInfo: GQLPageInfo;
  totalCount: number;
}

export interface GQLPushAllowanceEdge {
  cursor: string;
  node?: GQLPushAllowance;
}

export interface GQLPushAllowance extends GQLNode {
  actor?: GQLPushAllowanceActor;
  branchProtectionRule?: GQLBranchProtectionRule;
  id: string;
  
  /**
   * 
   * @deprecated The `ProtectedBranch` type is deprecated and will be removed soon. Use `Repository.branchProtectionRule` instead. Removal on 2019-01-01 UTC.
   */
  protectedBranch: GQLProtectedBranch;
}

export type GQLPushAllowanceActor = GQLTeam | GQLUser;

/** Use this to resolve union type PushAllowanceActor */
export type GQLPossiblePushAllowanceActorTypeNames = 'Team' | 'User';

export interface GQLPushAllowanceActorNameMap {
  PushAllowanceActor: GQLPushAllowanceActor;
  Team: GQLTeam;
  User: GQLUser;
}

export interface GQLProtectedBranch extends GQLNode {
  creator?: GQLActor;
  hasDismissableStaleReviews: boolean;
  hasRequiredReviews: boolean;
  hasRequiredStatusChecks: boolean;
  hasRestrictedPushes: boolean;
  hasRestrictedReviewDismissals: boolean;
  hasStrictRequiredStatusChecks: boolean;
  id: string;
  isAdminEnforced: boolean;
  name: string;
  pushAllowances: GQLPushAllowanceConnection;
  repository: GQLRepository;
  requiredStatusCheckContexts?: Array<string | null>;
  reviewDismissalAllowances: GQLReviewDismissalAllowanceConnection;
}

export interface GQLReviewDismissalAllowanceConnection {
  edges?: Array<GQLReviewDismissalAllowanceEdge | null>;
  nodes?: Array<GQLReviewDismissalAllowance | null>;
  pageInfo: GQLPageInfo;
  totalCount: number;
}

export interface GQLReviewDismissalAllowanceEdge {
  cursor: string;
  node?: GQLReviewDismissalAllowance;
}

export interface GQLReviewDismissalAllowance extends GQLNode {
  actor?: GQLReviewDismissalAllowanceActor;
  branchProtectionRule?: GQLBranchProtectionRule;
  id: string;
  
  /**
   * 
   * @deprecated The `ProtectedBranch` type is deprecated and will be removed soon. Use `ReviewDismissalAllowance.branchProtectionRule` instead. Removal on 2019-01-01 UTC.
   */
  protectedBranch: GQLProtectedBranch;
}

export type GQLReviewDismissalAllowanceActor = GQLTeam | GQLUser;

/** Use this to resolve union type ReviewDismissalAllowanceActor */
export type GQLPossibleReviewDismissalAllowanceActorTypeNames = 'Team' | 'User';

export interface GQLReviewDismissalAllowanceActorNameMap {
  ReviewDismissalAllowanceActor: GQLReviewDismissalAllowanceActor;
  Team: GQLTeam;
  User: GQLUser;
}

export enum GQLCollaboratorAffiliation {
  ALL = 'ALL',
  DIRECT = 'DIRECT',
  OUTSIDE = 'OUTSIDE'
}

export interface GQLRepositoryCollaboratorConnection {
  edges?: Array<GQLRepositoryCollaboratorEdge | null>;
  nodes?: Array<GQLUser | null>;
  pageInfo: GQLPageInfo;
  totalCount: number;
}

export interface GQLRepositoryCollaboratorEdge {
  cursor: string;
  node: GQLUser;
  permission: GQLRepositoryPermission;
}

export interface GQLDeployKeyConnection {
  edges?: Array<GQLDeployKeyEdge | null>;
  nodes?: Array<GQLDeployKey | null>;
  pageInfo: GQLPageInfo;
  totalCount: number;
}

export interface GQLDeployKeyEdge {
  cursor: string;
  node?: GQLDeployKey;
}

export interface GQLDeployKey extends GQLNode {
  createdAt: GQLDateTime;
  id: string;
  key: string;
  readOnly: boolean;
  title: string;
  verified: boolean;
}

export interface GQLDeploymentConnection {
  edges?: Array<GQLDeploymentEdge | null>;
  nodes?: Array<GQLDeployment | null>;
  pageInfo: GQLPageInfo;
  totalCount: number;
}

export interface GQLDeploymentEdge {
  cursor: string;
  node?: GQLDeployment;
}

export type GQLIssueOrPullRequest = GQLIssue | GQLPullRequest;

/** Use this to resolve union type IssueOrPullRequest */
export type GQLPossibleIssueOrPullRequestTypeNames = 'Issue' | 'PullRequest';

export interface GQLIssueOrPullRequestNameMap {
  IssueOrPullRequest: GQLIssueOrPullRequest;
  Issue: GQLIssue;
  PullRequest: GQLPullRequest;
}

export interface GQLLanguageOrder {
  direction: GQLOrderDirection;
  field: GQLLanguageOrderField;
}

export enum GQLLanguageOrderField {
  SIZE = 'SIZE'
}

export interface GQLLanguageConnection {
  edges?: Array<GQLLanguageEdge | null>;
  nodes?: Array<GQLLanguage | null>;
  pageInfo: GQLPageInfo;
  totalCount: number;
  totalSize: number;
}

export interface GQLLanguageEdge {
  cursor: string;
  node: GQLLanguage;
  size: number;
}

export interface GQLLanguage extends GQLNode {
  color?: string;
  id: string;
  name: string;
}

export interface GQLMilestoneOrder {
  direction: GQLOrderDirection;
  field: GQLMilestoneOrderField;
}

export enum GQLMilestoneOrderField {
  CREATED_AT = 'CREATED_AT',
  DUE_DATE = 'DUE_DATE',
  NUMBER = 'NUMBER',
  UPDATED_AT = 'UPDATED_AT'
}

export interface GQLMilestoneConnection {
  edges?: Array<GQLMilestoneEdge | null>;
  nodes?: Array<GQLMilestone | null>;
  pageInfo: GQLPageInfo;
  totalCount: number;
}

export interface GQLMilestoneEdge {
  cursor: string;
  node?: GQLMilestone;
}

export interface GQLProjectOrder {
  direction: GQLOrderDirection;
  field: GQLProjectOrderField;
}

export enum GQLProjectOrderField {
  CREATED_AT = 'CREATED_AT',
  NAME = 'NAME',
  UPDATED_AT = 'UPDATED_AT'
}

export enum GQLProjectState {
  CLOSED = 'CLOSED',
  OPEN = 'OPEN'
}

export interface GQLProjectConnection {
  edges?: Array<GQLProjectEdge | null>;
  nodes?: Array<GQLProject | null>;
  pageInfo: GQLPageInfo;
  totalCount: number;
}

export interface GQLProjectEdge {
  cursor: string;
  node?: GQLProject;
}

export interface GQLProtectedBranchConnection {
  edges?: Array<GQLProtectedBranchEdge | null>;
  nodes?: Array<GQLProtectedBranch | null>;
  pageInfo: GQLPageInfo;
  totalCount: number;
}

export interface GQLProtectedBranchEdge {
  cursor: string;
  node?: GQLProtectedBranch;
}

export interface GQLRefOrder {
  direction: GQLOrderDirection;
  field: GQLRefOrderField;
}

export enum GQLRefOrderField {
  ALPHABETICAL = 'ALPHABETICAL',
  TAG_COMMIT_DATE = 'TAG_COMMIT_DATE'
}

export interface GQLRelease extends GQLNode, GQLUniformResourceLocatable {
  author?: GQLUser;
  createdAt: GQLDateTime;
  description?: string;
  id: string;
  isDraft: boolean;
  isPrerelease: boolean;
  name?: string;
  publishedAt?: GQLDateTime;
  releaseAssets: GQLReleaseAssetConnection;
  resourcePath: GQLURI;
  tag?: GQLRef;
  updatedAt: GQLDateTime;
  url: GQLURI;
}

export interface GQLReleaseAssetConnection {
  edges?: Array<GQLReleaseAssetEdge | null>;
  nodes?: Array<GQLReleaseAsset | null>;
  pageInfo: GQLPageInfo;
  totalCount: number;
}

export interface GQLReleaseAssetEdge {
  cursor: string;
  node?: GQLReleaseAsset;
}

export interface GQLReleaseAsset extends GQLNode {
  contentType: string;
  createdAt: GQLDateTime;
  downloadCount: number;
  downloadUrl: GQLURI;
  id: string;
  name: string;
  release?: GQLRelease;
  size: number;
  updatedAt: GQLDateTime;
  uploadedBy: GQLUser;
  url: GQLURI;
}

export interface GQLReleaseOrder {
  direction: GQLOrderDirection;
  field: GQLReleaseOrderField;
}

export enum GQLReleaseOrderField {
  CREATED_AT = 'CREATED_AT',
  NAME = 'NAME'
}

export interface GQLReleaseConnection {
  edges?: Array<GQLReleaseEdge | null>;
  nodes?: Array<GQLRelease | null>;
  pageInfo: GQLPageInfo;
  totalCount: number;
}

export interface GQLReleaseEdge {
  cursor: string;
  node?: GQLRelease;
}

export interface GQLRepositoryTopicConnection {
  edges?: Array<GQLRepositoryTopicEdge | null>;
  nodes?: Array<GQLRepositoryTopic | null>;
  pageInfo: GQLPageInfo;
  totalCount: number;
}

export interface GQLRepositoryTopicEdge {
  cursor: string;
  node?: GQLRepositoryTopic;
}

export interface GQLRepositoryTopic extends GQLNode, GQLUniformResourceLocatable {
  id: string;
  resourcePath: GQLURI;
  topic: GQLTopic;
  url: GQLURI;
}

export interface GQLTopic extends GQLNode, GQLStarrable {
  id: string;
  name: string;
  relatedTopics: Array<GQLTopic>;
  stargazers: GQLStargazerConnection;
  viewerHasStarred: boolean;
}

export type GQLGitSSHRemote = any;

export interface GQLFollowerConnection {
  edges?: Array<GQLUserEdge | null>;
  nodes?: Array<GQLUser | null>;
  pageInfo: GQLPageInfo;
  totalCount: number;
}

export interface GQLFollowingConnection {
  edges?: Array<GQLUserEdge | null>;
  nodes?: Array<GQLUser | null>;
  pageInfo: GQLPageInfo;
  totalCount: number;
}

export interface GQLGist extends GQLNode, GQLStarrable {
  comments: GQLGistCommentConnection;
  createdAt: GQLDateTime;
  description?: string;
  id: string;
  isPublic: boolean;
  name: string;
  owner?: GQLRepositoryOwner;
  pushedAt?: GQLDateTime;
  stargazers: GQLStargazerConnection;
  updatedAt: GQLDateTime;
  viewerHasStarred: boolean;
}

export interface GQLGistCommentConnection {
  edges?: Array<GQLGistCommentEdge | null>;
  nodes?: Array<GQLGistComment | null>;
  pageInfo: GQLPageInfo;
  totalCount: number;
}

export interface GQLGistCommentEdge {
  cursor: string;
  node?: GQLGistComment;
}

export interface GQLGistComment extends GQLComment, GQLDeletable, GQLNode, GQLUpdatable, GQLUpdatableComment {
  author?: GQLActor;
  authorAssociation: GQLCommentAuthorAssociation;
  body: string;
  bodyHTML: GQLHTML;
  bodyText: string;
  createdAt: GQLDateTime;
  createdViaEmail: boolean;
  databaseId?: number;
  editor?: GQLActor;
  gist: GQLGist;
  id: string;
  includesCreatedEdit: boolean;
  isMinimized: boolean;
  lastEditedAt?: GQLDateTime;
  minimizedReason?: string;
  publishedAt?: GQLDateTime;
  updatedAt: GQLDateTime;
  userContentEdits?: GQLUserContentEditConnection;
  viewerCanDelete: boolean;
  viewerCanMinimize: boolean;
  viewerCanUpdate: boolean;
  viewerCannotUpdateReasons: Array<GQLCommentCannotUpdateReason>;
  viewerDidAuthor: boolean;
}

export interface GQLGistOrder {
  direction: GQLOrderDirection;
  field: GQLGistOrderField;
}

export enum GQLGistOrderField {
  CREATED_AT = 'CREATED_AT',
  PUSHED_AT = 'PUSHED_AT',
  UPDATED_AT = 'UPDATED_AT'
}

export enum GQLGistPrivacy {
  ALL = 'ALL',
  PUBLIC = 'PUBLIC',
  SECRET = 'SECRET'
}

export interface GQLGistConnection {
  edges?: Array<GQLGistEdge | null>;
  nodes?: Array<GQLGist | null>;
  pageInfo: GQLPageInfo;
  totalCount: number;
}

export interface GQLGistEdge {
  cursor: string;
  node?: GQLGist;
}

export interface GQLOrganizationConnection {
  edges?: Array<GQLOrganizationEdge | null>;
  nodes?: Array<GQLOrganization | null>;
  pageInfo: GQLPageInfo;
  totalCount: number;
}

export interface GQLOrganizationEdge {
  cursor: string;
  node?: GQLOrganization;
}

export interface GQLPublicKeyConnection {
  edges?: Array<GQLPublicKeyEdge | null>;
  nodes?: Array<GQLPublicKey | null>;
  pageInfo: GQLPageInfo;
  totalCount: number;
}

export interface GQLPublicKeyEdge {
  cursor: string;
  node?: GQLPublicKey;
}

export interface GQLPublicKey extends GQLNode {
  id: string;
  key: string;
}

export enum GQLRepositoryContributionType {
  COMMIT = 'COMMIT',
  ISSUE = 'ISSUE',
  PULL_REQUEST = 'PULL_REQUEST',
  PULL_REQUEST_REVIEW = 'PULL_REQUEST_REVIEW',
  REPOSITORY = 'REPOSITORY'
}

export interface GQLStarredRepositoryConnection {
  edges?: Array<GQLStarredRepositoryEdge | null>;
  nodes?: Array<GQLRepository | null>;
  pageInfo: GQLPageInfo;
  totalCount: number;
}

export interface GQLStarredRepositoryEdge {
  cursor: string;
  node: GQLRepository;
  starredAt: GQLDateTime;
}

export interface GQLIssueTimelineConnection {
  edges?: Array<GQLIssueTimelineItemEdge | null>;
  nodes?: Array<GQLIssueTimelineItem | null>;
  pageInfo: GQLPageInfo;
  totalCount: number;
}

export interface GQLIssueTimelineItemEdge {
  cursor: string;
  node?: GQLIssueTimelineItem;
}

export type GQLIssueTimelineItem =
GQLAssignedEvent |
GQLClosedEvent |
GQLCommit |
GQLCrossReferencedEvent |
GQLDemilestonedEvent |
GQLIssueComment |
GQLLabeledEvent |
GQLLockedEvent |
GQLMilestonedEvent |
GQLReferencedEvent |
GQLRenamedTitleEvent |
GQLReopenedEvent |
GQLSubscribedEvent |
GQLTransferredEvent |
GQLUnassignedEvent |
GQLUnlabeledEvent |
GQLUnlockedEvent |
GQLUnsubscribedEvent;

/** Use this to resolve union type IssueTimelineItem */
export type GQLPossibleIssueTimelineItemTypeNames =
'AssignedEvent' |
'ClosedEvent' |
'Commit' |
'CrossReferencedEvent' |
'DemilestonedEvent' |
'IssueComment' |
'LabeledEvent' |
'LockedEvent' |
'MilestonedEvent' |
'ReferencedEvent' |
'RenamedTitleEvent' |
'ReopenedEvent' |
'SubscribedEvent' |
'TransferredEvent' |
'UnassignedEvent' |
'UnlabeledEvent' |
'UnlockedEvent' |
'UnsubscribedEvent';

export interface GQLIssueTimelineItemNameMap {
  IssueTimelineItem: GQLIssueTimelineItem;
  AssignedEvent: GQLAssignedEvent;
  ClosedEvent: GQLClosedEvent;
  Commit: GQLCommit;
  CrossReferencedEvent: GQLCrossReferencedEvent;
  DemilestonedEvent: GQLDemilestonedEvent;
  IssueComment: GQLIssueComment;
  LabeledEvent: GQLLabeledEvent;
  LockedEvent: GQLLockedEvent;
  MilestonedEvent: GQLMilestonedEvent;
  ReferencedEvent: GQLReferencedEvent;
  RenamedTitleEvent: GQLRenamedTitleEvent;
  ReopenedEvent: GQLReopenedEvent;
  SubscribedEvent: GQLSubscribedEvent;
  TransferredEvent: GQLTransferredEvent;
  UnassignedEvent: GQLUnassignedEvent;
  UnlabeledEvent: GQLUnlabeledEvent;
  UnlockedEvent: GQLUnlockedEvent;
  UnsubscribedEvent: GQLUnsubscribedEvent;
}

export interface GQLTransferredEvent extends GQLNode {
  actor?: GQLActor;
  createdAt: GQLDateTime;
  fromRepository?: GQLRepository;
  id: string;
  issue: GQLIssue;
}

export enum GQLProjectCardState {
  CONTENT_ONLY = 'CONTENT_ONLY',
  NOTE_ONLY = 'NOTE_ONLY',
  REDACTED = 'REDACTED'
}

export enum GQLProjectColumnPurpose {
  DONE = 'DONE',
  IN_PROGRESS = 'IN_PROGRESS',
  TODO = 'TODO'
}

export interface GQLOrganizationIdentityProvider extends GQLNode {
  digestMethod?: GQLURI;
  externalIdentities: GQLExternalIdentityConnection;
  id: string;
  idpCertificate?: GQLX509Certificate;
  issuer?: string;
  organization?: GQLOrganization;
  signatureMethod?: GQLURI;
  ssoUrl?: GQLURI;
}

export interface GQLExternalIdentityConnection {
  edges?: Array<GQLExternalIdentityEdge | null>;
  nodes?: Array<GQLExternalIdentity | null>;
  pageInfo: GQLPageInfo;
  totalCount: number;
}

export interface GQLExternalIdentityEdge {
  cursor: string;
  node?: GQLExternalIdentity;
}

export interface GQLExternalIdentity extends GQLNode {
  guid: string;
  id: string;
  organizationInvitation?: GQLOrganizationInvitation;
  samlIdentity?: GQLExternalIdentitySamlAttributes;
  scimIdentity?: GQLExternalIdentityScimAttributes;
  user?: GQLUser;
}

export interface GQLExternalIdentitySamlAttributes {
  nameId?: string;
}

export interface GQLExternalIdentityScimAttributes {
  username?: string;
}

export type GQLX509Certificate = any;

export enum GQLTeamRole {
  ADMIN = 'ADMIN',
  MEMBER = 'MEMBER'
}

export interface GQLRateLimit {
  cost: number;
  limit: number;
  nodeCount: number;
  remaining: number;
  resetAt: GQLDateTime;
}

export enum GQLSearchType {
  ISSUE = 'ISSUE',
  REPOSITORY = 'REPOSITORY',
  USER = 'USER'
}

export interface GQLSearchResultItemConnection {
  codeCount: number;
  edges?: Array<GQLSearchResultItemEdge | null>;
  issueCount: number;
  nodes?: Array<GQLSearchResultItem | null>;
  pageInfo: GQLPageInfo;
  repositoryCount: number;
  userCount: number;
  wikiCount: number;
}

export interface GQLSearchResultItemEdge {
  cursor: string;
  node?: GQLSearchResultItem;
  textMatches?: Array<GQLTextMatch | null>;
}

export type GQLSearchResultItem =
GQLIssue |
GQLMarketplaceListing |
GQLOrganization |
GQLPullRequest |
GQLRepository |
GQLUser;

/** Use this to resolve union type SearchResultItem */
export type GQLPossibleSearchResultItemTypeNames =
'Issue' |
'MarketplaceListing' |
'Organization' |
'PullRequest' |
'Repository' |
'User';

export interface GQLSearchResultItemNameMap {
  SearchResultItem: GQLSearchResultItem;
  Issue: GQLIssue;
  MarketplaceListing: GQLMarketplaceListing;
  Organization: GQLOrganization;
  PullRequest: GQLPullRequest;
  Repository: GQLRepository;
  User: GQLUser;
}

export interface GQLTextMatch {
  fragment: string;
  highlights: Array<GQLTextMatchHighlight>;
  property: string;
}

export interface GQLTextMatchHighlight {
  beginIndice: number;
  endIndice: number;
  text: string;
}

export interface GQLMutation {
  acceptTopicSuggestion?: GQLAcceptTopicSuggestionPayload;
  addComment?: GQLAddCommentPayload;
  addProjectCard?: GQLAddProjectCardPayload;
  addProjectColumn?: GQLAddProjectColumnPayload;
  addPullRequestReview?: GQLAddPullRequestReviewPayload;
  addPullRequestReviewComment?: GQLAddPullRequestReviewCommentPayload;
  addReaction?: GQLAddReactionPayload;
  addStar?: GQLAddStarPayload;
  createBranchProtectionRule?: GQLCreateBranchProtectionRulePayload;
  createProject?: GQLCreateProjectPayload;
  declineTopicSuggestion?: GQLDeclineTopicSuggestionPayload;
  deleteBranchProtectionRule?: GQLDeleteBranchProtectionRulePayload;
  deleteProject?: GQLDeleteProjectPayload;
  deleteProjectCard?: GQLDeleteProjectCardPayload;
  deleteProjectColumn?: GQLDeleteProjectColumnPayload;
  deletePullRequestReview?: GQLDeletePullRequestReviewPayload;
  dismissPullRequestReview?: GQLDismissPullRequestReviewPayload;
  lockLockable?: GQLLockLockablePayload;
  moveProjectCard?: GQLMoveProjectCardPayload;
  moveProjectColumn?: GQLMoveProjectColumnPayload;
  removeOutsideCollaborator?: GQLRemoveOutsideCollaboratorPayload;
  removeReaction?: GQLRemoveReactionPayload;
  removeStar?: GQLRemoveStarPayload;
  requestReviews?: GQLRequestReviewsPayload;
  submitPullRequestReview?: GQLSubmitPullRequestReviewPayload;
  unlockLockable?: GQLUnlockLockablePayload;
  updateBranchProtectionRule?: GQLUpdateBranchProtectionRulePayload;
  updateProject?: GQLUpdateProjectPayload;
  updateProjectCard?: GQLUpdateProjectCardPayload;
  updateProjectColumn?: GQLUpdateProjectColumnPayload;
  updatePullRequestReview?: GQLUpdatePullRequestReviewPayload;
  updatePullRequestReviewComment?: GQLUpdatePullRequestReviewCommentPayload;
  updateSubscription?: GQLUpdateSubscriptionPayload;
  updateTopics?: GQLUpdateTopicsPayload;
}

export interface GQLAcceptTopicSuggestionInput {
  clientMutationId?: string;
  name: string;
  repositoryId: string;
}

export interface GQLAcceptTopicSuggestionPayload {
  clientMutationId?: string;
  topic: GQLTopic;
}

export interface GQLAddCommentInput {
  body: string;
  clientMutationId?: string;
  subjectId: string;
}

export interface GQLAddCommentPayload {
  clientMutationId?: string;
  commentEdge: GQLIssueCommentEdge;
  subject: GQLNode;
  timelineEdge: GQLIssueTimelineItemEdge;
}

export interface GQLAddProjectCardInput {
  clientMutationId?: string;
  contentId?: string;
  note?: string;
  projectColumnId: string;
}

export interface GQLAddProjectCardPayload {
  cardEdge: GQLProjectCardEdge;
  clientMutationId?: string;
  projectColumn: GQLProject;
}

export interface GQLAddProjectColumnInput {
  clientMutationId?: string;
  name: string;
  projectId: string;
}

export interface GQLAddProjectColumnPayload {
  clientMutationId?: string;
  columnEdge: GQLProjectColumnEdge;
  project: GQLProject;
}

export interface GQLAddPullRequestReviewInput {
  body?: string;
  clientMutationId?: string;
  comments?: Array<GQLDraftPullRequestReviewComment | null>;
  commitOID?: GQLGitObjectID;
  event?: GQLPullRequestReviewEvent;
  pullRequestId: string;
}

export interface GQLDraftPullRequestReviewComment {
  body: string;
  path: string;
  position: number;
}

export enum GQLPullRequestReviewEvent {
  APPROVE = 'APPROVE',
  COMMENT = 'COMMENT',
  DISMISS = 'DISMISS',
  REQUEST_CHANGES = 'REQUEST_CHANGES'
}

export interface GQLAddPullRequestReviewPayload {
  clientMutationId?: string;
  pullRequestReview: GQLPullRequestReview;
  reviewEdge: GQLPullRequestReviewEdge;
}

export interface GQLAddPullRequestReviewCommentInput {
  body: string;
  clientMutationId?: string;
  commitOID?: GQLGitObjectID;
  inReplyTo?: string;
  path?: string;
  position?: number;
  pullRequestReviewId: string;
}

export interface GQLAddPullRequestReviewCommentPayload {
  clientMutationId?: string;
  comment: GQLPullRequestReviewComment;
  commentEdge: GQLPullRequestReviewCommentEdge;
}

export interface GQLAddReactionInput {
  clientMutationId?: string;
  content: GQLReactionContent;
  subjectId: string;
}

export interface GQLAddReactionPayload {
  clientMutationId?: string;
  reaction: GQLReaction;
  subject: GQLReactable;
}

export interface GQLAddStarInput {
  clientMutationId?: string;
  starrableId: string;
}

export interface GQLAddStarPayload {
  clientMutationId?: string;
  starrable: GQLStarrable;
}

export interface GQLCreateBranchProtectionRuleInput {
  clientMutationId?: string;
  dismissesStaleReviews?: boolean;
  isAdminEnforced?: boolean;
  pattern: string;
  pushActorIds?: Array<string>;
  repositoryId: string;
  requiredApprovingReviewCount?: number;
  requiredStatusCheckContexts?: Array<string>;
  requiresApprovingReviews?: boolean;
  requiresCodeOwnerReviews?: boolean;
  requiresCommitSignatures?: boolean;
  requiresStatusChecks?: boolean;
  requiresStrictStatusChecks?: boolean;
  restrictsPushes?: boolean;
  restrictsReviewDismissals?: boolean;
  reviewDismissalActorIds?: Array<string>;
}

export interface GQLCreateBranchProtectionRulePayload {
  branchProtectionRule?: GQLBranchProtectionRule;
  clientMutationId?: string;
}

export interface GQLCreateProjectInput {
  body?: string;
  clientMutationId?: string;
  name: string;
  ownerId: string;
}

export interface GQLCreateProjectPayload {
  clientMutationId?: string;
  project: GQLProject;
}

export interface GQLDeclineTopicSuggestionInput {
  clientMutationId?: string;
  name: string;
  reason: GQLTopicSuggestionDeclineReason;
  repositoryId: string;
}

export enum GQLTopicSuggestionDeclineReason {
  NOT_RELEVANT = 'NOT_RELEVANT',
  PERSONAL_PREFERENCE = 'PERSONAL_PREFERENCE',
  TOO_GENERAL = 'TOO_GENERAL',
  TOO_SPECIFIC = 'TOO_SPECIFIC'
}

export interface GQLDeclineTopicSuggestionPayload {
  clientMutationId?: string;
  topic: GQLTopic;
}

export interface GQLDeleteBranchProtectionRuleInput {
  branchProtectionRuleId: string;
  clientMutationId?: string;
}

export interface GQLDeleteBranchProtectionRulePayload {
  clientMutationId?: string;
}

export interface GQLDeleteProjectInput {
  clientMutationId?: string;
  projectId: string;
}

export interface GQLDeleteProjectPayload {
  clientMutationId?: string;
  owner: GQLProjectOwner;
}

export interface GQLDeleteProjectCardInput {
  cardId: string;
  clientMutationId?: string;
}

export interface GQLDeleteProjectCardPayload {
  clientMutationId?: string;
  column: GQLProjectColumn;
  deletedCardId: string;
}

export interface GQLDeleteProjectColumnInput {
  clientMutationId?: string;
  columnId: string;
}

export interface GQLDeleteProjectColumnPayload {
  clientMutationId?: string;
  deletedColumnId: string;
  project: GQLProject;
}

export interface GQLDeletePullRequestReviewInput {
  clientMutationId?: string;
  pullRequestReviewId: string;
}

export interface GQLDeletePullRequestReviewPayload {
  clientMutationId?: string;
  pullRequestReview: GQLPullRequestReview;
}

export interface GQLDismissPullRequestReviewInput {
  clientMutationId?: string;
  message: string;
  pullRequestReviewId: string;
}

export interface GQLDismissPullRequestReviewPayload {
  clientMutationId?: string;
  pullRequestReview: GQLPullRequestReview;
}

export interface GQLLockLockableInput {
  clientMutationId?: string;
  lockReason?: GQLLockReason;
  lockableId: string;
}

export interface GQLLockLockablePayload {
  clientMutationId?: string;
  lockedRecord?: GQLLockable;
}

export interface GQLMoveProjectCardInput {
  afterCardId?: string;
  cardId: string;
  clientMutationId?: string;
  columnId: string;
}

export interface GQLMoveProjectCardPayload {
  cardEdge: GQLProjectCardEdge;
  clientMutationId?: string;
}

export interface GQLMoveProjectColumnInput {
  afterColumnId?: string;
  clientMutationId?: string;
  columnId: string;
}

export interface GQLMoveProjectColumnPayload {
  clientMutationId?: string;
  columnEdge: GQLProjectColumnEdge;
}

export interface GQLRemoveOutsideCollaboratorInput {
  clientMutationId?: string;
  organizationId: string;
  userId: string;
}

export interface GQLRemoveOutsideCollaboratorPayload {
  clientMutationId?: string;
  removedUser: GQLUser;
}

export interface GQLRemoveReactionInput {
  clientMutationId?: string;
  content: GQLReactionContent;
  subjectId: string;
}

export interface GQLRemoveReactionPayload {
  clientMutationId?: string;
  reaction: GQLReaction;
  subject: GQLReactable;
}

export interface GQLRemoveStarInput {
  clientMutationId?: string;
  starrableId: string;
}

export interface GQLRemoveStarPayload {
  clientMutationId?: string;
  starrable: GQLStarrable;
}

export interface GQLRequestReviewsInput {
  clientMutationId?: string;
  pullRequestId: string;
  teamIds?: Array<string>;
  union?: boolean;
  userIds?: Array<string>;
}

export interface GQLRequestReviewsPayload {
  clientMutationId?: string;
  pullRequest: GQLPullRequest;
  requestedReviewersEdge: GQLUserEdge;
}

export interface GQLSubmitPullRequestReviewInput {
  body?: string;
  clientMutationId?: string;
  event: GQLPullRequestReviewEvent;
  pullRequestReviewId: string;
}

export interface GQLSubmitPullRequestReviewPayload {
  clientMutationId?: string;
  pullRequestReview: GQLPullRequestReview;
}

export interface GQLUnlockLockableInput {
  clientMutationId?: string;
  lockableId: string;
}

export interface GQLUnlockLockablePayload {
  clientMutationId?: string;
  unlockedRecord?: GQLLockable;
}

export interface GQLUpdateBranchProtectionRuleInput {
  branchProtectionRuleId: string;
  clientMutationId?: string;
  dismissesStaleReviews?: boolean;
  isAdminEnforced?: boolean;
  pattern?: string;
  pushActorIds?: Array<string>;
  requiredApprovingReviewCount?: number;
  requiredStatusCheckContexts?: Array<string>;
  requiresApprovingReviews?: boolean;
  requiresCodeOwnerReviews?: boolean;
  requiresCommitSignatures?: boolean;
  requiresStatusChecks?: boolean;
  requiresStrictStatusChecks?: boolean;
  restrictsPushes?: boolean;
  restrictsReviewDismissals?: boolean;
  reviewDismissalActorIds?: Array<string>;
}

export interface GQLUpdateBranchProtectionRulePayload {
  branchProtectionRule?: GQLBranchProtectionRule;
  clientMutationId?: string;
}

export interface GQLUpdateProjectInput {
  body?: string;
  clientMutationId?: string;
  name?: string;
  projectId: string;
  public?: boolean;
  state?: GQLProjectState;
}

export interface GQLUpdateProjectPayload {
  clientMutationId?: string;
  project: GQLProject;
}

export interface GQLUpdateProjectCardInput {
  clientMutationId?: string;
  isArchived?: boolean;
  note?: string;
  projectCardId: string;
}

export interface GQLUpdateProjectCardPayload {
  clientMutationId?: string;
  projectCard: GQLProjectCard;
}

export interface GQLUpdateProjectColumnInput {
  clientMutationId?: string;
  name: string;
  projectColumnId: string;
}

export interface GQLUpdateProjectColumnPayload {
  clientMutationId?: string;
  projectColumn: GQLProjectColumn;
}

export interface GQLUpdatePullRequestReviewInput {
  body: string;
  clientMutationId?: string;
  pullRequestReviewId: string;
}

export interface GQLUpdatePullRequestReviewPayload {
  clientMutationId?: string;
  pullRequestReview: GQLPullRequestReview;
}

export interface GQLUpdatePullRequestReviewCommentInput {
  body: string;
  clientMutationId?: string;
  pullRequestReviewCommentId: string;
}

export interface GQLUpdatePullRequestReviewCommentPayload {
  clientMutationId?: string;
  pullRequestReviewComment: GQLPullRequestReviewComment;
}

export interface GQLUpdateSubscriptionInput {
  clientMutationId?: string;
  state: GQLSubscriptionState;
  subscribableId: string;
}

export interface GQLUpdateSubscriptionPayload {
  clientMutationId?: string;
  subscribable: GQLSubscribable;
}

export interface GQLUpdateTopicsInput {
  clientMutationId?: string;
  repositoryId: string;
  topicNames: Array<string>;
}

export interface GQLUpdateTopicsPayload {
  clientMutationId?: string;
  invalidTopicNames?: Array<string>;
  repository: GQLRepository;
}

export interface GQLAddedToProjectEvent extends GQLNode {
  actor?: GQLActor;
  createdAt: GQLDateTime;
  databaseId?: number;
  id: string;
}

export interface GQLAppEdge {
  cursor: string;
  node?: GQLApp;
}

export interface GQLBaseRefChangedEvent extends GQLNode {
  actor?: GQLActor;
  createdAt: GQLDateTime;
  databaseId?: number;
  id: string;
}

export interface GQLBlob extends GQLGitObject, GQLNode {
  abbreviatedOid: string;
  byteSize: number;
  commitResourcePath: GQLURI;
  commitUrl: GQLURI;
  id: string;
  isBinary: boolean;
  isTruncated: boolean;
  oid: GQLGitObjectID;
  repository: GQLRepository;
  text?: string;
}

export interface GQLBot extends GQLActor, GQLNode, GQLUniformResourceLocatable {
  avatarUrl: GQLURI;
  createdAt: GQLDateTime;
  databaseId?: number;
  id: string;
  login: string;
  resourcePath: GQLURI;
  updatedAt: GQLDateTime;
  url: GQLURI;
}

export type GQLCollectionItemContent =
GQLOrganization |
GQLRepository |
GQLUser;

/** Use this to resolve union type CollectionItemContent */
export type GQLPossibleCollectionItemContentTypeNames =
'Organization' |
'Repository' |
'User';

export interface GQLCollectionItemContentNameMap {
  CollectionItemContent: GQLCollectionItemContent;
  Organization: GQLOrganization;
  Repository: GQLRepository;
  User: GQLUser;
}

export interface GQLCommentDeletedEvent extends GQLNode {
  actor?: GQLActor;
  createdAt: GQLDateTime;
  databaseId?: number;
  id: string;
}

export interface GQLConvertedNoteToIssueEvent extends GQLNode {
  actor?: GQLActor;
  createdAt: GQLDateTime;
  databaseId?: number;
  id: string;
}

export type GQLDate = any;

export enum GQLDefaultRepositoryPermissionField {
  ADMIN = 'ADMIN',
  NONE = 'NONE',
  READ = 'READ',
  WRITE = 'WRITE'
}

export interface GQLGpgSignature extends GQLGitSignature {
  email: string;
  isValid: boolean;
  keyId?: string;
  payload: string;
  signature: string;
  signer?: GQLUser;
  state: GQLGitSignatureState;
  wasSignedByGitHub: boolean;
}

export enum GQLIssuePubSubTopic {
  MARKASREAD = 'MARKASREAD',
  STATE = 'STATE',
  TIMELINE = 'TIMELINE',
  UPDATED = 'UPDATED'
}

export type GQLIssueTimelineItems =
GQLAddedToProjectEvent |
GQLAssignedEvent |
GQLClosedEvent |
GQLCommentDeletedEvent |
GQLConvertedNoteToIssueEvent |
GQLCrossReferencedEvent |
GQLDemilestonedEvent |
GQLIssueComment |
GQLLabeledEvent |
GQLLockedEvent |
GQLMentionedEvent |
GQLMilestonedEvent |
GQLMovedColumnsInProjectEvent |
GQLReferencedEvent |
GQLRemovedFromProjectEvent |
GQLRenamedTitleEvent |
GQLReopenedEvent |
GQLSubscribedEvent |
GQLTransferredEvent |
GQLUnassignedEvent |
GQLUnlabeledEvent |
GQLUnlockedEvent |
GQLUnsubscribedEvent;

/** Use this to resolve union type IssueTimelineItems */
export type GQLPossibleIssueTimelineItemsTypeNames =
'AddedToProjectEvent' |
'AssignedEvent' |
'ClosedEvent' |
'CommentDeletedEvent' |
'ConvertedNoteToIssueEvent' |
'CrossReferencedEvent' |
'DemilestonedEvent' |
'IssueComment' |
'LabeledEvent' |
'LockedEvent' |
'MentionedEvent' |
'MilestonedEvent' |
'MovedColumnsInProjectEvent' |
'ReferencedEvent' |
'RemovedFromProjectEvent' |
'RenamedTitleEvent' |
'ReopenedEvent' |
'SubscribedEvent' |
'TransferredEvent' |
'UnassignedEvent' |
'UnlabeledEvent' |
'UnlockedEvent' |
'UnsubscribedEvent';

export interface GQLIssueTimelineItemsNameMap {
  IssueTimelineItems: GQLIssueTimelineItems;
  AddedToProjectEvent: GQLAddedToProjectEvent;
  AssignedEvent: GQLAssignedEvent;
  ClosedEvent: GQLClosedEvent;
  CommentDeletedEvent: GQLCommentDeletedEvent;
  ConvertedNoteToIssueEvent: GQLConvertedNoteToIssueEvent;
  CrossReferencedEvent: GQLCrossReferencedEvent;
  DemilestonedEvent: GQLDemilestonedEvent;
  IssueComment: GQLIssueComment;
  LabeledEvent: GQLLabeledEvent;
  LockedEvent: GQLLockedEvent;
  MentionedEvent: GQLMentionedEvent;
  MilestonedEvent: GQLMilestonedEvent;
  MovedColumnsInProjectEvent: GQLMovedColumnsInProjectEvent;
  ReferencedEvent: GQLReferencedEvent;
  RemovedFromProjectEvent: GQLRemovedFromProjectEvent;
  RenamedTitleEvent: GQLRenamedTitleEvent;
  ReopenedEvent: GQLReopenedEvent;
  SubscribedEvent: GQLSubscribedEvent;
  TransferredEvent: GQLTransferredEvent;
  UnassignedEvent: GQLUnassignedEvent;
  UnlabeledEvent: GQLUnlabeledEvent;
  UnlockedEvent: GQLUnlockedEvent;
  UnsubscribedEvent: GQLUnsubscribedEvent;
}

export interface GQLMentionedEvent extends GQLNode {
  actor?: GQLActor;
  createdAt: GQLDateTime;
  databaseId?: number;
  id: string;
}

export interface GQLMovedColumnsInProjectEvent extends GQLNode {
  actor?: GQLActor;
  createdAt: GQLDateTime;
  databaseId?: number;
  id: string;
}

export interface GQLRemovedFromProjectEvent extends GQLNode {
  actor?: GQLActor;
  createdAt: GQLDateTime;
  databaseId?: number;
  id: string;
}

export interface GQLIssueTimelineItemsEdge {
  cursor: string;
  node?: GQLIssueTimelineItems;
}

export enum GQLIssueTimelineItemsItemType {
  ADDED_TO_PROJECT_EVENT = 'ADDED_TO_PROJECT_EVENT',
  ASSIGNED_EVENT = 'ASSIGNED_EVENT',
  CLOSED_EVENT = 'CLOSED_EVENT',
  COMMENT_DELETED_EVENT = 'COMMENT_DELETED_EVENT',
  CONVERTED_NOTE_TO_ISSUE_EVENT = 'CONVERTED_NOTE_TO_ISSUE_EVENT',
  CROSS_REFERENCED_EVENT = 'CROSS_REFERENCED_EVENT',
  DEMILESTONED_EVENT = 'DEMILESTONED_EVENT',
  ISSUE_COMMENT = 'ISSUE_COMMENT',
  LABELED_EVENT = 'LABELED_EVENT',
  LOCKED_EVENT = 'LOCKED_EVENT',
  MENTIONED_EVENT = 'MENTIONED_EVENT',
  MILESTONED_EVENT = 'MILESTONED_EVENT',
  MOVED_COLUMNS_IN_PROJECT_EVENT = 'MOVED_COLUMNS_IN_PROJECT_EVENT',
  REFERENCED_EVENT = 'REFERENCED_EVENT',
  REMOVED_FROM_PROJECT_EVENT = 'REMOVED_FROM_PROJECT_EVENT',
  RENAMED_TITLE_EVENT = 'RENAMED_TITLE_EVENT',
  REOPENED_EVENT = 'REOPENED_EVENT',
  SUBSCRIBED_EVENT = 'SUBSCRIBED_EVENT',
  TRANSFERRED_EVENT = 'TRANSFERRED_EVENT',
  UNASSIGNED_EVENT = 'UNASSIGNED_EVENT',
  UNLABELED_EVENT = 'UNLABELED_EVENT',
  UNLOCKED_EVENT = 'UNLOCKED_EVENT',
  UNSUBSCRIBED_EVENT = 'UNSUBSCRIBED_EVENT'
}

export interface GQLPullRequestOrder {
  direction: GQLOrderDirection;
  field: GQLPullRequestOrderField;
}

export enum GQLPullRequestOrderField {
  CREATED_AT = 'CREATED_AT',
  UPDATED_AT = 'UPDATED_AT'
}

export enum GQLPullRequestPubSubTopic {
  HEAD_REF = 'HEAD_REF',
  MARKASREAD = 'MARKASREAD',
  STATE = 'STATE',
  TIMELINE = 'TIMELINE',
  UPDATED = 'UPDATED'
}

export type GQLPullRequestTimelineItems =
GQLAddedToProjectEvent |
GQLAssignedEvent |
GQLBaseRefChangedEvent |
GQLBaseRefForcePushedEvent |
GQLClosedEvent |
GQLCommentDeletedEvent |
GQLConvertedNoteToIssueEvent |
GQLCrossReferencedEvent |
GQLDemilestonedEvent |
GQLDeployedEvent |
GQLDeploymentEnvironmentChangedEvent |
GQLHeadRefDeletedEvent |
GQLHeadRefForcePushedEvent |
GQLHeadRefRestoredEvent |
GQLIssueComment |
GQLLabeledEvent |
GQLLockedEvent |
GQLMentionedEvent |
GQLMergedEvent |
GQLMilestonedEvent |
GQLMovedColumnsInProjectEvent |
GQLPullRequestCommit |
GQLPullRequestReview |
GQLPullRequestReviewThread |
GQLReferencedEvent |
GQLRemovedFromProjectEvent |
GQLRenamedTitleEvent |
GQLReopenedEvent |
GQLReviewDismissedEvent |
GQLReviewRequestRemovedEvent |
GQLReviewRequestedEvent |
GQLSubscribedEvent |
GQLTransferredEvent |
GQLUnassignedEvent |
GQLUnlabeledEvent |
GQLUnlockedEvent |
GQLUnsubscribedEvent;

/** Use this to resolve union type PullRequestTimelineItems */
export type GQLPossiblePullRequestTimelineItemsTypeNames =
'AddedToProjectEvent' |
'AssignedEvent' |
'BaseRefChangedEvent' |
'BaseRefForcePushedEvent' |
'ClosedEvent' |
'CommentDeletedEvent' |
'ConvertedNoteToIssueEvent' |
'CrossReferencedEvent' |
'DemilestonedEvent' |
'DeployedEvent' |
'DeploymentEnvironmentChangedEvent' |
'HeadRefDeletedEvent' |
'HeadRefForcePushedEvent' |
'HeadRefRestoredEvent' |
'IssueComment' |
'LabeledEvent' |
'LockedEvent' |
'MentionedEvent' |
'MergedEvent' |
'MilestonedEvent' |
'MovedColumnsInProjectEvent' |
'PullRequestCommit' |
'PullRequestReview' |
'PullRequestReviewThread' |
'ReferencedEvent' |
'RemovedFromProjectEvent' |
'RenamedTitleEvent' |
'ReopenedEvent' |
'ReviewDismissedEvent' |
'ReviewRequestRemovedEvent' |
'ReviewRequestedEvent' |
'SubscribedEvent' |
'TransferredEvent' |
'UnassignedEvent' |
'UnlabeledEvent' |
'UnlockedEvent' |
'UnsubscribedEvent';

export interface GQLPullRequestTimelineItemsNameMap {
  PullRequestTimelineItems: GQLPullRequestTimelineItems;
  AddedToProjectEvent: GQLAddedToProjectEvent;
  AssignedEvent: GQLAssignedEvent;
  BaseRefChangedEvent: GQLBaseRefChangedEvent;
  BaseRefForcePushedEvent: GQLBaseRefForcePushedEvent;
  ClosedEvent: GQLClosedEvent;
  CommentDeletedEvent: GQLCommentDeletedEvent;
  ConvertedNoteToIssueEvent: GQLConvertedNoteToIssueEvent;
  CrossReferencedEvent: GQLCrossReferencedEvent;
  DemilestonedEvent: GQLDemilestonedEvent;
  DeployedEvent: GQLDeployedEvent;
  DeploymentEnvironmentChangedEvent: GQLDeploymentEnvironmentChangedEvent;
  HeadRefDeletedEvent: GQLHeadRefDeletedEvent;
  HeadRefForcePushedEvent: GQLHeadRefForcePushedEvent;
  HeadRefRestoredEvent: GQLHeadRefRestoredEvent;
  IssueComment: GQLIssueComment;
  LabeledEvent: GQLLabeledEvent;
  LockedEvent: GQLLockedEvent;
  MentionedEvent: GQLMentionedEvent;
  MergedEvent: GQLMergedEvent;
  MilestonedEvent: GQLMilestonedEvent;
  MovedColumnsInProjectEvent: GQLMovedColumnsInProjectEvent;
  PullRequestCommit: GQLPullRequestCommit;
  PullRequestReview: GQLPullRequestReview;
  PullRequestReviewThread: GQLPullRequestReviewThread;
  ReferencedEvent: GQLReferencedEvent;
  RemovedFromProjectEvent: GQLRemovedFromProjectEvent;
  RenamedTitleEvent: GQLRenamedTitleEvent;
  ReopenedEvent: GQLReopenedEvent;
  ReviewDismissedEvent: GQLReviewDismissedEvent;
  ReviewRequestRemovedEvent: GQLReviewRequestRemovedEvent;
  ReviewRequestedEvent: GQLReviewRequestedEvent;
  SubscribedEvent: GQLSubscribedEvent;
  TransferredEvent: GQLTransferredEvent;
  UnassignedEvent: GQLUnassignedEvent;
  UnlabeledEvent: GQLUnlabeledEvent;
  UnlockedEvent: GQLUnlockedEvent;
  UnsubscribedEvent: GQLUnsubscribedEvent;
}

export interface GQLPullRequestTimelineItemsEdge {
  cursor: string;
  node?: GQLPullRequestTimelineItems;
}

export enum GQLPullRequestTimelineItemsItemType {
  ADDED_TO_PROJECT_EVENT = 'ADDED_TO_PROJECT_EVENT',
  ASSIGNED_EVENT = 'ASSIGNED_EVENT',
  BASE_REF_CHANGED_EVENT = 'BASE_REF_CHANGED_EVENT',
  BASE_REF_FORCE_PUSHED_EVENT = 'BASE_REF_FORCE_PUSHED_EVENT',
  CLOSED_EVENT = 'CLOSED_EVENT',
  COMMENT_DELETED_EVENT = 'COMMENT_DELETED_EVENT',
  CONVERTED_NOTE_TO_ISSUE_EVENT = 'CONVERTED_NOTE_TO_ISSUE_EVENT',
  CROSS_REFERENCED_EVENT = 'CROSS_REFERENCED_EVENT',
  DEMILESTONED_EVENT = 'DEMILESTONED_EVENT',
  DEPLOYED_EVENT = 'DEPLOYED_EVENT',
  DEPLOYMENT_ENVIRONMENT_CHANGED_EVENT = 'DEPLOYMENT_ENVIRONMENT_CHANGED_EVENT',
  HEAD_REF_DELETED_EVENT = 'HEAD_REF_DELETED_EVENT',
  HEAD_REF_FORCE_PUSHED_EVENT = 'HEAD_REF_FORCE_PUSHED_EVENT',
  HEAD_REF_RESTORED_EVENT = 'HEAD_REF_RESTORED_EVENT',
  ISSUE_COMMENT = 'ISSUE_COMMENT',
  LABELED_EVENT = 'LABELED_EVENT',
  LOCKED_EVENT = 'LOCKED_EVENT',
  MENTIONED_EVENT = 'MENTIONED_EVENT',
  MERGED_EVENT = 'MERGED_EVENT',
  MILESTONED_EVENT = 'MILESTONED_EVENT',
  MOVED_COLUMNS_IN_PROJECT_EVENT = 'MOVED_COLUMNS_IN_PROJECT_EVENT',
  PULL_REQUEST_COMMIT = 'PULL_REQUEST_COMMIT',
  PULL_REQUEST_COMMIT_COMMENT_THREAD = 'PULL_REQUEST_COMMIT_COMMENT_THREAD',
  PULL_REQUEST_REVIEW = 'PULL_REQUEST_REVIEW',
  PULL_REQUEST_REVIEW_THREAD = 'PULL_REQUEST_REVIEW_THREAD',
  PULL_REQUEST_REVISION_MARKER = 'PULL_REQUEST_REVISION_MARKER',
  REFERENCED_EVENT = 'REFERENCED_EVENT',
  REMOVED_FROM_PROJECT_EVENT = 'REMOVED_FROM_PROJECT_EVENT',
  RENAMED_TITLE_EVENT = 'RENAMED_TITLE_EVENT',
  REOPENED_EVENT = 'REOPENED_EVENT',
  REVIEW_DISMISSED_EVENT = 'REVIEW_DISMISSED_EVENT',
  REVIEW_REQUESTED_EVENT = 'REVIEW_REQUESTED_EVENT',
  REVIEW_REQUEST_REMOVED_EVENT = 'REVIEW_REQUEST_REMOVED_EVENT',
  SUBSCRIBED_EVENT = 'SUBSCRIBED_EVENT',
  TRANSFERRED_EVENT = 'TRANSFERRED_EVENT',
  UNASSIGNED_EVENT = 'UNASSIGNED_EVENT',
  UNLABELED_EVENT = 'UNLABELED_EVENT',
  UNLOCKED_EVENT = 'UNLOCKED_EVENT',
  UNSUBSCRIBED_EVENT = 'UNSUBSCRIBED_EVENT'
}

export enum GQLReportedContentClassifiers {
  ABUSE = 'ABUSE',
  OFF_TOPIC = 'OFF_TOPIC',
  OUTDATED = 'OUTDATED',
  RESOLVED = 'RESOLVED',
  SPAM = 'SPAM'
}

export enum GQLRepositoryCollaboratorAffiliation {
  ALL = 'ALL',
  OUTSIDE = 'OUTSIDE'
}

export interface GQLRepositoryInvitation extends GQLNode {
  id: string;
  invitee: GQLUser;
  inviter: GQLUser;
  permission: GQLRepositoryPermission;
  repository?: GQLRepositoryInfo;
}

export interface GQLRepositoryInvitationEdge {
  cursor: string;
  node?: GQLRepositoryInvitation;
}

export interface GQLSmimeSignature extends GQLGitSignature {
  email: string;
  isValid: boolean;
  payload: string;
  signature: string;
  signer?: GQLUser;
  state: GQLGitSignatureState;
  wasSignedByGitHub: boolean;
}

export interface GQLTag extends GQLGitObject, GQLNode {
  abbreviatedOid: string;
  commitResourcePath: GQLURI;
  commitUrl: GQLURI;
  id: string;
  message?: string;
  name: string;
  oid: GQLGitObjectID;
  repository: GQLRepository;
  tagger?: GQLGitActor;
  target: GQLGitObject;
}

export interface GQLTopicConnection {
  edges?: Array<GQLTopicEdge | null>;
  nodes?: Array<GQLTopic | null>;
  pageInfo: GQLPageInfo;
  totalCount: number;
}

export interface GQLTopicEdge {
  cursor: string;
  node?: GQLTopic;
}

export interface GQLUnknownSignature extends GQLGitSignature {
  email: string;
  isValid: boolean;
  payload: string;
  signature: string;
  signer?: GQLUser;
  state: GQLGitSignatureState;
  wasSignedByGitHub: boolean;
}

/*********************************
 *                               *
 *         TYPE RESOLVERS        *
 *                               *
 *********************************/
/**
 * This interface define the shape of your resolver
 * Note that this type is designed to be compatible with graphql-tools resolvers
 * However, you can still use other generated interfaces to make your resolver type-safed
 */
export interface GQLResolver {
  Query?: GQLQueryTypeResolver;
  CodeOfConduct?: GQLCodeOfConductTypeResolver;
  URI?: GraphQLScalarType;
  License?: GQLLicenseTypeResolver;
  Node?: {
    __resolveType: GQLNodeTypeResolver
  };
  
  LicenseRule?: GQLLicenseRuleTypeResolver;
  MarketplaceCategory?: GQLMarketplaceCategoryTypeResolver;
  MarketplaceListing?: GQLMarketplaceListingTypeResolver;
  App?: GQLAppTypeResolver;
  DateTime?: GraphQLScalarType;
  HTML?: GraphQLScalarType;
  MarketplaceListingConnection?: GQLMarketplaceListingConnectionTypeResolver;
  MarketplaceListingEdge?: GQLMarketplaceListingEdgeTypeResolver;
  PageInfo?: GQLPageInfoTypeResolver;
  GitHubMetadata?: GQLGitHubMetadataTypeResolver;
  GitObjectID?: GraphQLScalarType;
  Organization?: GQLOrganizationTypeResolver;
  Actor?: {
    __resolveType: GQLActorTypeResolver
  };
  
  ProjectOwner?: {
    __resolveType: GQLProjectOwnerTypeResolver
  };
  
  Project?: GQLProjectTypeResolver;
  Closable?: {
    __resolveType: GQLClosableTypeResolver
  };
  
  Updatable?: {
    __resolveType: GQLUpdatableTypeResolver
  };
  
  ProjectColumnConnection?: GQLProjectColumnConnectionTypeResolver;
  ProjectColumnEdge?: GQLProjectColumnEdgeTypeResolver;
  ProjectColumn?: GQLProjectColumnTypeResolver;
  ProjectCardConnection?: GQLProjectCardConnectionTypeResolver;
  ProjectCardEdge?: GQLProjectCardEdgeTypeResolver;
  ProjectCard?: GQLProjectCardTypeResolver;
  ProjectCardItem?: {
    __resolveType: GQLProjectCardItemTypeResolver
  };
  
  Issue?: GQLIssueTypeResolver;
  Assignable?: {
    __resolveType: GQLAssignableTypeResolver
  };
  
  UserConnection?: GQLUserConnectionTypeResolver;
  UserEdge?: GQLUserEdgeTypeResolver;
  User?: GQLUserTypeResolver;
  RegistryPackageOwner?: {
    __resolveType: GQLRegistryPackageOwnerTypeResolver
  };
  
  RegistryPackageSearch?: {
    __resolveType: GQLRegistryPackageSearchTypeResolver
  };
  
  RepositoryOwner?: {
    __resolveType: GQLRepositoryOwnerTypeResolver
  };
  
  RepositoryConnection?: GQLRepositoryConnectionTypeResolver;
  RepositoryEdge?: GQLRepositoryEdgeTypeResolver;
  Repository?: GQLRepositoryTypeResolver;
  RepositoryInfo?: {
    __resolveType: GQLRepositoryInfoTypeResolver
  };
  
  Starrable?: {
    __resolveType: GQLStarrableTypeResolver
  };
  
  StargazerConnection?: GQLStargazerConnectionTypeResolver;
  StargazerEdge?: GQLStargazerEdgeTypeResolver;
  Subscribable?: {
    __resolveType: GQLSubscribableTypeResolver
  };
  
  UniformResourceLocatable?: {
    __resolveType: GQLUniformResourceLocatableTypeResolver
  };
  
  BranchProtectionRuleConnection?: GQLBranchProtectionRuleConnectionTypeResolver;
  BranchProtectionRuleEdge?: GQLBranchProtectionRuleEdgeTypeResolver;
  BranchProtectionRule?: GQLBranchProtectionRuleTypeResolver;
  BranchProtectionRuleConflictConnection?: GQLBranchProtectionRuleConflictConnectionTypeResolver;
  BranchProtectionRuleConflictEdge?: GQLBranchProtectionRuleConflictEdgeTypeResolver;
  BranchProtectionRuleConflict?: GQLBranchProtectionRuleConflictTypeResolver;
  Ref?: GQLRefTypeResolver;
  PullRequestConnection?: GQLPullRequestConnectionTypeResolver;
  PullRequestEdge?: GQLPullRequestEdgeTypeResolver;
  PullRequest?: GQLPullRequestTypeResolver;
  Comment?: {
    __resolveType: GQLCommentTypeResolver
  };
  
  UserContentEditConnection?: GQLUserContentEditConnectionTypeResolver;
  UserContentEditEdge?: GQLUserContentEditEdgeTypeResolver;
  UserContentEdit?: GQLUserContentEditTypeResolver;
  Labelable?: {
    __resolveType: GQLLabelableTypeResolver
  };
  
  LabelConnection?: GQLLabelConnectionTypeResolver;
  LabelEdge?: GQLLabelEdgeTypeResolver;
  Label?: GQLLabelTypeResolver;
  IssueConnection?: GQLIssueConnectionTypeResolver;
  IssueEdge?: GQLIssueEdgeTypeResolver;
  Lockable?: {
    __resolveType: GQLLockableTypeResolver
  };
  
  Reactable?: {
    __resolveType: GQLReactableTypeResolver
  };
  
  ReactionGroup?: GQLReactionGroupTypeResolver;
  ReactingUserConnection?: GQLReactingUserConnectionTypeResolver;
  ReactingUserEdge?: GQLReactingUserEdgeTypeResolver;
  ReactionConnection?: GQLReactionConnectionTypeResolver;
  ReactionEdge?: GQLReactionEdgeTypeResolver;
  Reaction?: GQLReactionTypeResolver;
  RepositoryNode?: {
    __resolveType: GQLRepositoryNodeTypeResolver
  };
  
  UpdatableComment?: {
    __resolveType: GQLUpdatableCommentTypeResolver
  };
  
  IssueCommentConnection?: GQLIssueCommentConnectionTypeResolver;
  IssueCommentEdge?: GQLIssueCommentEdgeTypeResolver;
  IssueComment?: GQLIssueCommentTypeResolver;
  Deletable?: {
    __resolveType: GQLDeletableTypeResolver
  };
  
  PullRequestCommitConnection?: GQLPullRequestCommitConnectionTypeResolver;
  PullRequestCommitEdge?: GQLPullRequestCommitEdgeTypeResolver;
  PullRequestCommit?: GQLPullRequestCommitTypeResolver;
  Commit?: GQLCommitTypeResolver;
  GitObject?: {
    __resolveType: GQLGitObjectTypeResolver
  };
  
  GitActor?: GQLGitActorTypeResolver;
  GitTimestamp?: GraphQLScalarType;
  Blame?: GQLBlameTypeResolver;
  BlameRange?: GQLBlameRangeTypeResolver;
  CommitCommentConnection?: GQLCommitCommentConnectionTypeResolver;
  CommitCommentEdge?: GQLCommitCommentEdgeTypeResolver;
  CommitComment?: GQLCommitCommentTypeResolver;
  CommitHistoryConnection?: GQLCommitHistoryConnectionTypeResolver;
  CommitEdge?: GQLCommitEdgeTypeResolver;
  CommitConnection?: GQLCommitConnectionTypeResolver;
  GitSignature?: {
    __resolveType: GQLGitSignatureTypeResolver
  };
  
  Status?: GQLStatusTypeResolver;
  StatusContext?: GQLStatusContextTypeResolver;
  Tree?: GQLTreeTypeResolver;
  TreeEntry?: GQLTreeEntryTypeResolver;
  Milestone?: GQLMilestoneTypeResolver;
  ReviewRequestConnection?: GQLReviewRequestConnectionTypeResolver;
  ReviewRequestEdge?: GQLReviewRequestEdgeTypeResolver;
  ReviewRequest?: GQLReviewRequestTypeResolver;
  RequestedReviewer?: {
    __resolveType: GQLRequestedReviewerTypeResolver
  };
  
  Team?: GQLTeamTypeResolver;
  TeamConnection?: GQLTeamConnectionTypeResolver;
  TeamEdge?: GQLTeamEdgeTypeResolver;
  OrganizationInvitationConnection?: GQLOrganizationInvitationConnectionTypeResolver;
  OrganizationInvitationEdge?: GQLOrganizationInvitationEdgeTypeResolver;
  OrganizationInvitation?: GQLOrganizationInvitationTypeResolver;
  TeamMemberConnection?: GQLTeamMemberConnectionTypeResolver;
  TeamMemberEdge?: GQLTeamMemberEdgeTypeResolver;
  TeamRepositoryConnection?: GQLTeamRepositoryConnectionTypeResolver;
  TeamRepositoryEdge?: GQLTeamRepositoryEdgeTypeResolver;
  PullRequestReviewConnection?: GQLPullRequestReviewConnectionTypeResolver;
  PullRequestReviewEdge?: GQLPullRequestReviewEdgeTypeResolver;
  PullRequestReview?: GQLPullRequestReviewTypeResolver;
  PullRequestReviewCommentConnection?: GQLPullRequestReviewCommentConnectionTypeResolver;
  PullRequestReviewCommentEdge?: GQLPullRequestReviewCommentEdgeTypeResolver;
  PullRequestReviewComment?: GQLPullRequestReviewCommentTypeResolver;
  SuggestedReviewer?: GQLSuggestedReviewerTypeResolver;
  PullRequestTimelineConnection?: GQLPullRequestTimelineConnectionTypeResolver;
  PullRequestTimelineItemEdge?: GQLPullRequestTimelineItemEdgeTypeResolver;
  PullRequestTimelineItem?: {
    __resolveType: GQLPullRequestTimelineItemTypeResolver
  };
  
  AssignedEvent?: GQLAssignedEventTypeResolver;
  BaseRefForcePushedEvent?: GQLBaseRefForcePushedEventTypeResolver;
  ClosedEvent?: GQLClosedEventTypeResolver;
  Closer?: {
    __resolveType: GQLCloserTypeResolver
  };
  
  CommitCommentThread?: GQLCommitCommentThreadTypeResolver;
  CrossReferencedEvent?: GQLCrossReferencedEventTypeResolver;
  ReferencedSubject?: {
    __resolveType: GQLReferencedSubjectTypeResolver
  };
  
  DemilestonedEvent?: GQLDemilestonedEventTypeResolver;
  MilestoneItem?: {
    __resolveType: GQLMilestoneItemTypeResolver
  };
  
  DeployedEvent?: GQLDeployedEventTypeResolver;
  Deployment?: GQLDeploymentTypeResolver;
  DeploymentStatus?: GQLDeploymentStatusTypeResolver;
  DeploymentStatusConnection?: GQLDeploymentStatusConnectionTypeResolver;
  DeploymentStatusEdge?: GQLDeploymentStatusEdgeTypeResolver;
  DeploymentEnvironmentChangedEvent?: GQLDeploymentEnvironmentChangedEventTypeResolver;
  HeadRefDeletedEvent?: GQLHeadRefDeletedEventTypeResolver;
  HeadRefForcePushedEvent?: GQLHeadRefForcePushedEventTypeResolver;
  HeadRefRestoredEvent?: GQLHeadRefRestoredEventTypeResolver;
  LabeledEvent?: GQLLabeledEventTypeResolver;
  LockedEvent?: GQLLockedEventTypeResolver;
  MergedEvent?: GQLMergedEventTypeResolver;
  MilestonedEvent?: GQLMilestonedEventTypeResolver;
  PullRequestReviewThread?: GQLPullRequestReviewThreadTypeResolver;
  ReferencedEvent?: GQLReferencedEventTypeResolver;
  RenamedTitleEvent?: GQLRenamedTitleEventTypeResolver;
  RenamedTitleSubject?: {
    __resolveType: GQLRenamedTitleSubjectTypeResolver
  };
  
  ReopenedEvent?: GQLReopenedEventTypeResolver;
  ReviewDismissedEvent?: GQLReviewDismissedEventTypeResolver;
  ReviewRequestRemovedEvent?: GQLReviewRequestRemovedEventTypeResolver;
  ReviewRequestedEvent?: GQLReviewRequestedEventTypeResolver;
  SubscribedEvent?: GQLSubscribedEventTypeResolver;
  UnassignedEvent?: GQLUnassignedEventTypeResolver;
  UnlabeledEvent?: GQLUnlabeledEventTypeResolver;
  UnlockedEvent?: GQLUnlockedEventTypeResolver;
  UnsubscribedEvent?: GQLUnsubscribedEventTypeResolver;
  RefConnection?: GQLRefConnectionTypeResolver;
  RefEdge?: GQLRefEdgeTypeResolver;
  PushAllowanceConnection?: GQLPushAllowanceConnectionTypeResolver;
  PushAllowanceEdge?: GQLPushAllowanceEdgeTypeResolver;
  PushAllowance?: GQLPushAllowanceTypeResolver;
  PushAllowanceActor?: {
    __resolveType: GQLPushAllowanceActorTypeResolver
  };
  
  ProtectedBranch?: GQLProtectedBranchTypeResolver;
  ReviewDismissalAllowanceConnection?: GQLReviewDismissalAllowanceConnectionTypeResolver;
  ReviewDismissalAllowanceEdge?: GQLReviewDismissalAllowanceEdgeTypeResolver;
  ReviewDismissalAllowance?: GQLReviewDismissalAllowanceTypeResolver;
  ReviewDismissalAllowanceActor?: {
    __resolveType: GQLReviewDismissalAllowanceActorTypeResolver
  };
  
  RepositoryCollaboratorConnection?: GQLRepositoryCollaboratorConnectionTypeResolver;
  RepositoryCollaboratorEdge?: GQLRepositoryCollaboratorEdgeTypeResolver;
  DeployKeyConnection?: GQLDeployKeyConnectionTypeResolver;
  DeployKeyEdge?: GQLDeployKeyEdgeTypeResolver;
  DeployKey?: GQLDeployKeyTypeResolver;
  DeploymentConnection?: GQLDeploymentConnectionTypeResolver;
  DeploymentEdge?: GQLDeploymentEdgeTypeResolver;
  IssueOrPullRequest?: {
    __resolveType: GQLIssueOrPullRequestTypeResolver
  };
  
  LanguageConnection?: GQLLanguageConnectionTypeResolver;
  LanguageEdge?: GQLLanguageEdgeTypeResolver;
  Language?: GQLLanguageTypeResolver;
  MilestoneConnection?: GQLMilestoneConnectionTypeResolver;
  MilestoneEdge?: GQLMilestoneEdgeTypeResolver;
  ProjectConnection?: GQLProjectConnectionTypeResolver;
  ProjectEdge?: GQLProjectEdgeTypeResolver;
  ProtectedBranchConnection?: GQLProtectedBranchConnectionTypeResolver;
  ProtectedBranchEdge?: GQLProtectedBranchEdgeTypeResolver;
  Release?: GQLReleaseTypeResolver;
  ReleaseAssetConnection?: GQLReleaseAssetConnectionTypeResolver;
  ReleaseAssetEdge?: GQLReleaseAssetEdgeTypeResolver;
  ReleaseAsset?: GQLReleaseAssetTypeResolver;
  ReleaseConnection?: GQLReleaseConnectionTypeResolver;
  ReleaseEdge?: GQLReleaseEdgeTypeResolver;
  RepositoryTopicConnection?: GQLRepositoryTopicConnectionTypeResolver;
  RepositoryTopicEdge?: GQLRepositoryTopicEdgeTypeResolver;
  RepositoryTopic?: GQLRepositoryTopicTypeResolver;
  Topic?: GQLTopicTypeResolver;
  GitSSHRemote?: GraphQLScalarType;
  FollowerConnection?: GQLFollowerConnectionTypeResolver;
  FollowingConnection?: GQLFollowingConnectionTypeResolver;
  Gist?: GQLGistTypeResolver;
  GistCommentConnection?: GQLGistCommentConnectionTypeResolver;
  GistCommentEdge?: GQLGistCommentEdgeTypeResolver;
  GistComment?: GQLGistCommentTypeResolver;
  GistConnection?: GQLGistConnectionTypeResolver;
  GistEdge?: GQLGistEdgeTypeResolver;
  OrganizationConnection?: GQLOrganizationConnectionTypeResolver;
  OrganizationEdge?: GQLOrganizationEdgeTypeResolver;
  PublicKeyConnection?: GQLPublicKeyConnectionTypeResolver;
  PublicKeyEdge?: GQLPublicKeyEdgeTypeResolver;
  PublicKey?: GQLPublicKeyTypeResolver;
  StarredRepositoryConnection?: GQLStarredRepositoryConnectionTypeResolver;
  StarredRepositoryEdge?: GQLStarredRepositoryEdgeTypeResolver;
  IssueTimelineConnection?: GQLIssueTimelineConnectionTypeResolver;
  IssueTimelineItemEdge?: GQLIssueTimelineItemEdgeTypeResolver;
  IssueTimelineItem?: {
    __resolveType: GQLIssueTimelineItemTypeResolver
  };
  
  TransferredEvent?: GQLTransferredEventTypeResolver;
  OrganizationIdentityProvider?: GQLOrganizationIdentityProviderTypeResolver;
  ExternalIdentityConnection?: GQLExternalIdentityConnectionTypeResolver;
  ExternalIdentityEdge?: GQLExternalIdentityEdgeTypeResolver;
  ExternalIdentity?: GQLExternalIdentityTypeResolver;
  ExternalIdentitySamlAttributes?: GQLExternalIdentitySamlAttributesTypeResolver;
  ExternalIdentityScimAttributes?: GQLExternalIdentityScimAttributesTypeResolver;
  X509Certificate?: GraphQLScalarType;
  RateLimit?: GQLRateLimitTypeResolver;
  SearchResultItemConnection?: GQLSearchResultItemConnectionTypeResolver;
  SearchResultItemEdge?: GQLSearchResultItemEdgeTypeResolver;
  SearchResultItem?: {
    __resolveType: GQLSearchResultItemTypeResolver
  };
  
  TextMatch?: GQLTextMatchTypeResolver;
  TextMatchHighlight?: GQLTextMatchHighlightTypeResolver;
  Mutation?: GQLMutationTypeResolver;
  AcceptTopicSuggestionPayload?: GQLAcceptTopicSuggestionPayloadTypeResolver;
  AddCommentPayload?: GQLAddCommentPayloadTypeResolver;
  AddProjectCardPayload?: GQLAddProjectCardPayloadTypeResolver;
  AddProjectColumnPayload?: GQLAddProjectColumnPayloadTypeResolver;
  AddPullRequestReviewPayload?: GQLAddPullRequestReviewPayloadTypeResolver;
  AddPullRequestReviewCommentPayload?: GQLAddPullRequestReviewCommentPayloadTypeResolver;
  AddReactionPayload?: GQLAddReactionPayloadTypeResolver;
  AddStarPayload?: GQLAddStarPayloadTypeResolver;
  CreateBranchProtectionRulePayload?: GQLCreateBranchProtectionRulePayloadTypeResolver;
  CreateProjectPayload?: GQLCreateProjectPayloadTypeResolver;
  DeclineTopicSuggestionPayload?: GQLDeclineTopicSuggestionPayloadTypeResolver;
  DeleteBranchProtectionRulePayload?: GQLDeleteBranchProtectionRulePayloadTypeResolver;
  DeleteProjectPayload?: GQLDeleteProjectPayloadTypeResolver;
  DeleteProjectCardPayload?: GQLDeleteProjectCardPayloadTypeResolver;
  DeleteProjectColumnPayload?: GQLDeleteProjectColumnPayloadTypeResolver;
  DeletePullRequestReviewPayload?: GQLDeletePullRequestReviewPayloadTypeResolver;
  DismissPullRequestReviewPayload?: GQLDismissPullRequestReviewPayloadTypeResolver;
  LockLockablePayload?: GQLLockLockablePayloadTypeResolver;
  MoveProjectCardPayload?: GQLMoveProjectCardPayloadTypeResolver;
  MoveProjectColumnPayload?: GQLMoveProjectColumnPayloadTypeResolver;
  RemoveOutsideCollaboratorPayload?: GQLRemoveOutsideCollaboratorPayloadTypeResolver;
  RemoveReactionPayload?: GQLRemoveReactionPayloadTypeResolver;
  RemoveStarPayload?: GQLRemoveStarPayloadTypeResolver;
  RequestReviewsPayload?: GQLRequestReviewsPayloadTypeResolver;
  SubmitPullRequestReviewPayload?: GQLSubmitPullRequestReviewPayloadTypeResolver;
  UnlockLockablePayload?: GQLUnlockLockablePayloadTypeResolver;
  UpdateBranchProtectionRulePayload?: GQLUpdateBranchProtectionRulePayloadTypeResolver;
  UpdateProjectPayload?: GQLUpdateProjectPayloadTypeResolver;
  UpdateProjectCardPayload?: GQLUpdateProjectCardPayloadTypeResolver;
  UpdateProjectColumnPayload?: GQLUpdateProjectColumnPayloadTypeResolver;
  UpdatePullRequestReviewPayload?: GQLUpdatePullRequestReviewPayloadTypeResolver;
  UpdatePullRequestReviewCommentPayload?: GQLUpdatePullRequestReviewCommentPayloadTypeResolver;
  UpdateSubscriptionPayload?: GQLUpdateSubscriptionPayloadTypeResolver;
  UpdateTopicsPayload?: GQLUpdateTopicsPayloadTypeResolver;
  AddedToProjectEvent?: GQLAddedToProjectEventTypeResolver;
  AppEdge?: GQLAppEdgeTypeResolver;
  BaseRefChangedEvent?: GQLBaseRefChangedEventTypeResolver;
  Blob?: GQLBlobTypeResolver;
  Bot?: GQLBotTypeResolver;
  CollectionItemContent?: {
    __resolveType: GQLCollectionItemContentTypeResolver
  };
  
  CommentDeletedEvent?: GQLCommentDeletedEventTypeResolver;
  ConvertedNoteToIssueEvent?: GQLConvertedNoteToIssueEventTypeResolver;
  Date?: GraphQLScalarType;
  GpgSignature?: GQLGpgSignatureTypeResolver;
  IssueTimelineItems?: {
    __resolveType: GQLIssueTimelineItemsTypeResolver
  };
  
  MentionedEvent?: GQLMentionedEventTypeResolver;
  MovedColumnsInProjectEvent?: GQLMovedColumnsInProjectEventTypeResolver;
  RemovedFromProjectEvent?: GQLRemovedFromProjectEventTypeResolver;
  IssueTimelineItemsEdge?: GQLIssueTimelineItemsEdgeTypeResolver;
  PullRequestTimelineItems?: {
    __resolveType: GQLPullRequestTimelineItemsTypeResolver
  };
  
  PullRequestTimelineItemsEdge?: GQLPullRequestTimelineItemsEdgeTypeResolver;
  RepositoryInvitation?: GQLRepositoryInvitationTypeResolver;
  RepositoryInvitationEdge?: GQLRepositoryInvitationEdgeTypeResolver;
  SmimeSignature?: GQLSmimeSignatureTypeResolver;
  Tag?: GQLTagTypeResolver;
  TopicConnection?: GQLTopicConnectionTypeResolver;
  TopicEdge?: GQLTopicEdgeTypeResolver;
  UnknownSignature?: GQLUnknownSignatureTypeResolver;
}
export interface GQLQueryTypeResolver<TParent = any> {
  codeOfConduct?: QueryToCodeOfConductResolver<TParent>;
  codesOfConduct?: QueryToCodesOfConductResolver<TParent>;
  license?: QueryToLicenseResolver<TParent>;
  licenses?: QueryToLicensesResolver<TParent>;
  marketplaceCategories?: QueryToMarketplaceCategoriesResolver<TParent>;
  marketplaceCategory?: QueryToMarketplaceCategoryResolver<TParent>;
  marketplaceListing?: QueryToMarketplaceListingResolver<TParent>;
  marketplaceListings?: QueryToMarketplaceListingsResolver<TParent>;
  meta?: QueryToMetaResolver<TParent>;
  node?: QueryToNodeResolver<TParent>;
  nodes?: QueryToNodesResolver<TParent>;
  organization?: QueryToOrganizationResolver<TParent>;
  rateLimit?: QueryToRateLimitResolver<TParent>;
  relay?: QueryToRelayResolver<TParent>;
  repository?: QueryToRepositoryResolver<TParent>;
  repositoryOwner?: QueryToRepositoryOwnerResolver<TParent>;
  resource?: QueryToResourceResolver<TParent>;
  search?: QueryToSearchResolver<TParent>;
  topic?: QueryToTopicResolver<TParent>;
  user?: QueryToUserResolver<TParent>;
  viewer?: QueryToViewerResolver<TParent>;
}

export interface QueryToCodeOfConductArgs {
  key: string;
}
export interface QueryToCodeOfConductResolver<TParent = any, TResult = any> {
  (parent: TParent, args: QueryToCodeOfConductArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToCodesOfConductResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToLicenseArgs {
  key: string;
}
export interface QueryToLicenseResolver<TParent = any, TResult = any> {
  (parent: TParent, args: QueryToLicenseArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToLicensesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToMarketplaceCategoriesArgs {
  excludeEmpty?: boolean;
  excludeSubcategories?: boolean;
  includeCategories?: Array<string>;
}
export interface QueryToMarketplaceCategoriesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: QueryToMarketplaceCategoriesArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToMarketplaceCategoryArgs {
  slug: string;
  useTopicAliases?: boolean;
}
export interface QueryToMarketplaceCategoryResolver<TParent = any, TResult = any> {
  (parent: TParent, args: QueryToMarketplaceCategoryArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToMarketplaceListingArgs {
  slug: string;
}
export interface QueryToMarketplaceListingResolver<TParent = any, TResult = any> {
  (parent: TParent, args: QueryToMarketplaceListingArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToMarketplaceListingsArgs {
  adminId?: string;
  after?: string;
  allStates?: boolean;
  before?: string;
  categorySlug?: string;
  first?: number;
  last?: number;
  organizationId?: string;
  primaryCategoryOnly?: boolean;
  slugs?: Array<string | null>;
  useTopicAliases?: boolean;
  viewerCanAdmin?: boolean;
  withFreeTrialsOnly?: boolean;
}
export interface QueryToMarketplaceListingsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: QueryToMarketplaceListingsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToMetaResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToNodeArgs {
  id: string;
}
export interface QueryToNodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: QueryToNodeArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToNodesArgs {
  ids: Array<string>;
}
export interface QueryToNodesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: QueryToNodesArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToOrganizationArgs {
  login: string;
}
export interface QueryToOrganizationResolver<TParent = any, TResult = any> {
  (parent: TParent, args: QueryToOrganizationArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToRateLimitArgs {
  dryRun?: boolean;
}
export interface QueryToRateLimitResolver<TParent = any, TResult = any> {
  (parent: TParent, args: QueryToRateLimitArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToRelayResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToRepositoryArgs {
  name: string;
  owner: string;
}
export interface QueryToRepositoryResolver<TParent = any, TResult = any> {
  (parent: TParent, args: QueryToRepositoryArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToRepositoryOwnerArgs {
  login: string;
}
export interface QueryToRepositoryOwnerResolver<TParent = any, TResult = any> {
  (parent: TParent, args: QueryToRepositoryOwnerArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToResourceArgs {
  url: GQLURI;
}
export interface QueryToResourceResolver<TParent = any, TResult = any> {
  (parent: TParent, args: QueryToResourceArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToSearchArgs {
  after?: string;
  before?: string;
  first?: number;
  last?: number;
  query: string;
  type: GQLSearchType;
}
export interface QueryToSearchResolver<TParent = any, TResult = any> {
  (parent: TParent, args: QueryToSearchArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToTopicArgs {
  name: string;
}
export interface QueryToTopicResolver<TParent = any, TResult = any> {
  (parent: TParent, args: QueryToTopicArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToUserArgs {
  login: string;
}
export interface QueryToUserResolver<TParent = any, TResult = any> {
  (parent: TParent, args: QueryToUserArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToViewerResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLCodeOfConductTypeResolver<TParent = any> {
  body?: CodeOfConductToBodyResolver<TParent>;
  key?: CodeOfConductToKeyResolver<TParent>;
  name?: CodeOfConductToNameResolver<TParent>;
  url?: CodeOfConductToUrlResolver<TParent>;
}

export interface CodeOfConductToBodyResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CodeOfConductToKeyResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CodeOfConductToNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CodeOfConductToUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLLicenseTypeResolver<TParent = any> {
  body?: LicenseToBodyResolver<TParent>;
  conditions?: LicenseToConditionsResolver<TParent>;
  description?: LicenseToDescriptionResolver<TParent>;
  featured?: LicenseToFeaturedResolver<TParent>;
  hidden?: LicenseToHiddenResolver<TParent>;
  id?: LicenseToIdResolver<TParent>;
  implementation?: LicenseToImplementationResolver<TParent>;
  key?: LicenseToKeyResolver<TParent>;
  limitations?: LicenseToLimitationsResolver<TParent>;
  name?: LicenseToNameResolver<TParent>;
  nickname?: LicenseToNicknameResolver<TParent>;
  permissions?: LicenseToPermissionsResolver<TParent>;
  pseudoLicense?: LicenseToPseudoLicenseResolver<TParent>;
  spdxId?: LicenseToSpdxIdResolver<TParent>;
  url?: LicenseToUrlResolver<TParent>;
}

export interface LicenseToBodyResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface LicenseToConditionsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface LicenseToDescriptionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface LicenseToFeaturedResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface LicenseToHiddenResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface LicenseToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface LicenseToImplementationResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface LicenseToKeyResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface LicenseToLimitationsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface LicenseToNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface LicenseToNicknameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface LicenseToPermissionsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface LicenseToPseudoLicenseResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface LicenseToSpdxIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface LicenseToUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLNodeTypeResolver<TParent = any> {
  (parent: TParent, context: any, info: GraphQLResolveInfo): 'License' | 'MarketplaceCategory' | 'MarketplaceListing' | 'App' | 'Organization' | 'Project' | 'ProjectColumn' | 'ProjectCard' | 'Issue' | 'User' | 'Repository' | 'BranchProtectionRule' | 'Ref' | 'PullRequest' | 'UserContentEdit' | 'Label' | 'Reaction' | 'IssueComment' | 'PullRequestCommit' | 'Commit' | 'CommitComment' | 'Status' | 'StatusContext' | 'Tree' | 'Milestone' | 'ReviewRequest' | 'Team' | 'OrganizationInvitation' | 'PullRequestReview' | 'PullRequestReviewComment' | 'AssignedEvent' | 'BaseRefForcePushedEvent' | 'ClosedEvent' | 'CommitCommentThread' | 'CrossReferencedEvent' | 'DemilestonedEvent' | 'DeployedEvent' | 'Deployment' | 'DeploymentStatus' | 'DeploymentEnvironmentChangedEvent' | 'HeadRefDeletedEvent' | 'HeadRefForcePushedEvent' | 'HeadRefRestoredEvent' | 'LabeledEvent' | 'LockedEvent' | 'MergedEvent' | 'MilestonedEvent' | 'PullRequestReviewThread' | 'ReferencedEvent' | 'RenamedTitleEvent' | 'ReopenedEvent' | 'ReviewDismissedEvent' | 'ReviewRequestRemovedEvent' | 'ReviewRequestedEvent' | 'SubscribedEvent' | 'UnassignedEvent' | 'UnlabeledEvent' | 'UnlockedEvent' | 'UnsubscribedEvent' | 'PushAllowance' | 'ProtectedBranch' | 'ReviewDismissalAllowance' | 'DeployKey' | 'Language' | 'Release' | 'ReleaseAsset' | 'RepositoryTopic' | 'Topic' | 'Gist' | 'GistComment' | 'PublicKey' | 'TransferredEvent' | 'OrganizationIdentityProvider' | 'ExternalIdentity' | 'AddedToProjectEvent' | 'BaseRefChangedEvent' | 'Blob' | 'Bot' | 'CommentDeletedEvent' | 'ConvertedNoteToIssueEvent' | 'MentionedEvent' | 'MovedColumnsInProjectEvent' | 'RemovedFromProjectEvent' | 'RepositoryInvitation' | 'Tag';
}
export interface GQLLicenseRuleTypeResolver<TParent = any> {
  description?: LicenseRuleToDescriptionResolver<TParent>;
  key?: LicenseRuleToKeyResolver<TParent>;
  label?: LicenseRuleToLabelResolver<TParent>;
}

export interface LicenseRuleToDescriptionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface LicenseRuleToKeyResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface LicenseRuleToLabelResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLMarketplaceCategoryTypeResolver<TParent = any> {
  description?: MarketplaceCategoryToDescriptionResolver<TParent>;
  howItWorks?: MarketplaceCategoryToHowItWorksResolver<TParent>;
  id?: MarketplaceCategoryToIdResolver<TParent>;
  name?: MarketplaceCategoryToNameResolver<TParent>;
  primaryListingCount?: MarketplaceCategoryToPrimaryListingCountResolver<TParent>;
  resourcePath?: MarketplaceCategoryToResourcePathResolver<TParent>;
  secondaryListingCount?: MarketplaceCategoryToSecondaryListingCountResolver<TParent>;
  slug?: MarketplaceCategoryToSlugResolver<TParent>;
  url?: MarketplaceCategoryToUrlResolver<TParent>;
}

export interface MarketplaceCategoryToDescriptionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MarketplaceCategoryToHowItWorksResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MarketplaceCategoryToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MarketplaceCategoryToNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MarketplaceCategoryToPrimaryListingCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MarketplaceCategoryToResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MarketplaceCategoryToSecondaryListingCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MarketplaceCategoryToSlugResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MarketplaceCategoryToUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLMarketplaceListingTypeResolver<TParent = any> {
  app?: MarketplaceListingToAppResolver<TParent>;
  companyUrl?: MarketplaceListingToCompanyUrlResolver<TParent>;
  configurationResourcePath?: MarketplaceListingToConfigurationResourcePathResolver<TParent>;
  configurationUrl?: MarketplaceListingToConfigurationUrlResolver<TParent>;
  documentationUrl?: MarketplaceListingToDocumentationUrlResolver<TParent>;
  extendedDescription?: MarketplaceListingToExtendedDescriptionResolver<TParent>;
  extendedDescriptionHTML?: MarketplaceListingToExtendedDescriptionHTMLResolver<TParent>;
  fullDescription?: MarketplaceListingToFullDescriptionResolver<TParent>;
  fullDescriptionHTML?: MarketplaceListingToFullDescriptionHTMLResolver<TParent>;
  hasApprovalBeenRequested?: MarketplaceListingToHasApprovalBeenRequestedResolver<TParent>;
  hasPublishedFreeTrialPlans?: MarketplaceListingToHasPublishedFreeTrialPlansResolver<TParent>;
  hasTermsOfService?: MarketplaceListingToHasTermsOfServiceResolver<TParent>;
  howItWorks?: MarketplaceListingToHowItWorksResolver<TParent>;
  howItWorksHTML?: MarketplaceListingToHowItWorksHTMLResolver<TParent>;
  id?: MarketplaceListingToIdResolver<TParent>;
  installationUrl?: MarketplaceListingToInstallationUrlResolver<TParent>;
  installedForViewer?: MarketplaceListingToInstalledForViewerResolver<TParent>;
  isApproved?: MarketplaceListingToIsApprovedResolver<TParent>;
  isDelisted?: MarketplaceListingToIsDelistedResolver<TParent>;
  isDraft?: MarketplaceListingToIsDraftResolver<TParent>;
  isPaid?: MarketplaceListingToIsPaidResolver<TParent>;
  isRejected?: MarketplaceListingToIsRejectedResolver<TParent>;
  logoBackgroundColor?: MarketplaceListingToLogoBackgroundColorResolver<TParent>;
  logoUrl?: MarketplaceListingToLogoUrlResolver<TParent>;
  name?: MarketplaceListingToNameResolver<TParent>;
  normalizedShortDescription?: MarketplaceListingToNormalizedShortDescriptionResolver<TParent>;
  pricingUrl?: MarketplaceListingToPricingUrlResolver<TParent>;
  primaryCategory?: MarketplaceListingToPrimaryCategoryResolver<TParent>;
  privacyPolicyUrl?: MarketplaceListingToPrivacyPolicyUrlResolver<TParent>;
  resourcePath?: MarketplaceListingToResourcePathResolver<TParent>;
  screenshotUrls?: MarketplaceListingToScreenshotUrlsResolver<TParent>;
  secondaryCategory?: MarketplaceListingToSecondaryCategoryResolver<TParent>;
  shortDescription?: MarketplaceListingToShortDescriptionResolver<TParent>;
  slug?: MarketplaceListingToSlugResolver<TParent>;
  statusUrl?: MarketplaceListingToStatusUrlResolver<TParent>;
  supportEmail?: MarketplaceListingToSupportEmailResolver<TParent>;
  supportUrl?: MarketplaceListingToSupportUrlResolver<TParent>;
  termsOfServiceUrl?: MarketplaceListingToTermsOfServiceUrlResolver<TParent>;
  url?: MarketplaceListingToUrlResolver<TParent>;
  viewerCanAddPlans?: MarketplaceListingToViewerCanAddPlansResolver<TParent>;
  viewerCanApprove?: MarketplaceListingToViewerCanApproveResolver<TParent>;
  viewerCanDelist?: MarketplaceListingToViewerCanDelistResolver<TParent>;
  viewerCanEdit?: MarketplaceListingToViewerCanEditResolver<TParent>;
  viewerCanEditCategories?: MarketplaceListingToViewerCanEditCategoriesResolver<TParent>;
  viewerCanEditPlans?: MarketplaceListingToViewerCanEditPlansResolver<TParent>;
  viewerCanRedraft?: MarketplaceListingToViewerCanRedraftResolver<TParent>;
  viewerCanReject?: MarketplaceListingToViewerCanRejectResolver<TParent>;
  viewerCanRequestApproval?: MarketplaceListingToViewerCanRequestApprovalResolver<TParent>;
  viewerHasPurchased?: MarketplaceListingToViewerHasPurchasedResolver<TParent>;
  viewerHasPurchasedForAllOrganizations?: MarketplaceListingToViewerHasPurchasedForAllOrganizationsResolver<TParent>;
  viewerIsListingAdmin?: MarketplaceListingToViewerIsListingAdminResolver<TParent>;
}

export interface MarketplaceListingToAppResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MarketplaceListingToCompanyUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MarketplaceListingToConfigurationResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MarketplaceListingToConfigurationUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MarketplaceListingToDocumentationUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MarketplaceListingToExtendedDescriptionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MarketplaceListingToExtendedDescriptionHTMLResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MarketplaceListingToFullDescriptionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MarketplaceListingToFullDescriptionHTMLResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MarketplaceListingToHasApprovalBeenRequestedResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MarketplaceListingToHasPublishedFreeTrialPlansResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MarketplaceListingToHasTermsOfServiceResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MarketplaceListingToHowItWorksResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MarketplaceListingToHowItWorksHTMLResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MarketplaceListingToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MarketplaceListingToInstallationUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MarketplaceListingToInstalledForViewerResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MarketplaceListingToIsApprovedResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MarketplaceListingToIsDelistedResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MarketplaceListingToIsDraftResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MarketplaceListingToIsPaidResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MarketplaceListingToIsRejectedResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MarketplaceListingToLogoBackgroundColorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MarketplaceListingToLogoUrlArgs {
  size?: number;
}
export interface MarketplaceListingToLogoUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MarketplaceListingToLogoUrlArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MarketplaceListingToNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MarketplaceListingToNormalizedShortDescriptionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MarketplaceListingToPricingUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MarketplaceListingToPrimaryCategoryResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MarketplaceListingToPrivacyPolicyUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MarketplaceListingToResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MarketplaceListingToScreenshotUrlsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MarketplaceListingToSecondaryCategoryResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MarketplaceListingToShortDescriptionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MarketplaceListingToSlugResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MarketplaceListingToStatusUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MarketplaceListingToSupportEmailResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MarketplaceListingToSupportUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MarketplaceListingToTermsOfServiceUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MarketplaceListingToUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MarketplaceListingToViewerCanAddPlansResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MarketplaceListingToViewerCanApproveResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MarketplaceListingToViewerCanDelistResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MarketplaceListingToViewerCanEditResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MarketplaceListingToViewerCanEditCategoriesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MarketplaceListingToViewerCanEditPlansResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MarketplaceListingToViewerCanRedraftResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MarketplaceListingToViewerCanRejectResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MarketplaceListingToViewerCanRequestApprovalResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MarketplaceListingToViewerHasPurchasedResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MarketplaceListingToViewerHasPurchasedForAllOrganizationsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MarketplaceListingToViewerIsListingAdminResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLAppTypeResolver<TParent = any> {
  createdAt?: AppToCreatedAtResolver<TParent>;
  databaseId?: AppToDatabaseIdResolver<TParent>;
  description?: AppToDescriptionResolver<TParent>;
  id?: AppToIdResolver<TParent>;
  logoBackgroundColor?: AppToLogoBackgroundColorResolver<TParent>;
  logoUrl?: AppToLogoUrlResolver<TParent>;
  name?: AppToNameResolver<TParent>;
  slug?: AppToSlugResolver<TParent>;
  updatedAt?: AppToUpdatedAtResolver<TParent>;
  url?: AppToUrlResolver<TParent>;
}

export interface AppToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AppToDatabaseIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AppToDescriptionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AppToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AppToLogoBackgroundColorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AppToLogoUrlArgs {
  size?: number;
}
export interface AppToLogoUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: AppToLogoUrlArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AppToNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AppToSlugResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AppToUpdatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AppToUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLMarketplaceListingConnectionTypeResolver<TParent = any> {
  edges?: MarketplaceListingConnectionToEdgesResolver<TParent>;
  nodes?: MarketplaceListingConnectionToNodesResolver<TParent>;
  pageInfo?: MarketplaceListingConnectionToPageInfoResolver<TParent>;
  totalCount?: MarketplaceListingConnectionToTotalCountResolver<TParent>;
}

export interface MarketplaceListingConnectionToEdgesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MarketplaceListingConnectionToNodesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MarketplaceListingConnectionToPageInfoResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MarketplaceListingConnectionToTotalCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLMarketplaceListingEdgeTypeResolver<TParent = any> {
  cursor?: MarketplaceListingEdgeToCursorResolver<TParent>;
  node?: MarketplaceListingEdgeToNodeResolver<TParent>;
}

export interface MarketplaceListingEdgeToCursorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MarketplaceListingEdgeToNodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLPageInfoTypeResolver<TParent = any> {
  endCursor?: PageInfoToEndCursorResolver<TParent>;
  hasNextPage?: PageInfoToHasNextPageResolver<TParent>;
  hasPreviousPage?: PageInfoToHasPreviousPageResolver<TParent>;
  startCursor?: PageInfoToStartCursorResolver<TParent>;
}

export interface PageInfoToEndCursorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PageInfoToHasNextPageResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PageInfoToHasPreviousPageResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PageInfoToStartCursorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLGitHubMetadataTypeResolver<TParent = any> {
  gitHubServicesSha?: GitHubMetadataToGitHubServicesShaResolver<TParent>;
  gitIpAddresses?: GitHubMetadataToGitIpAddressesResolver<TParent>;
  hookIpAddresses?: GitHubMetadataToHookIpAddressesResolver<TParent>;
  importerIpAddresses?: GitHubMetadataToImporterIpAddressesResolver<TParent>;
  isPasswordAuthenticationVerifiable?: GitHubMetadataToIsPasswordAuthenticationVerifiableResolver<TParent>;
  pagesIpAddresses?: GitHubMetadataToPagesIpAddressesResolver<TParent>;
}

export interface GitHubMetadataToGitHubServicesShaResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GitHubMetadataToGitIpAddressesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GitHubMetadataToHookIpAddressesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GitHubMetadataToImporterIpAddressesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GitHubMetadataToIsPasswordAuthenticationVerifiableResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GitHubMetadataToPagesIpAddressesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLOrganizationTypeResolver<TParent = any> {
  avatarUrl?: OrganizationToAvatarUrlResolver<TParent>;
  databaseId?: OrganizationToDatabaseIdResolver<TParent>;
  description?: OrganizationToDescriptionResolver<TParent>;
  email?: OrganizationToEmailResolver<TParent>;
  id?: OrganizationToIdResolver<TParent>;
  isVerified?: OrganizationToIsVerifiedResolver<TParent>;
  location?: OrganizationToLocationResolver<TParent>;
  login?: OrganizationToLoginResolver<TParent>;
  members?: OrganizationToMembersResolver<TParent>;
  name?: OrganizationToNameResolver<TParent>;
  newTeamResourcePath?: OrganizationToNewTeamResourcePathResolver<TParent>;
  newTeamUrl?: OrganizationToNewTeamUrlResolver<TParent>;
  organizationBillingEmail?: OrganizationToOrganizationBillingEmailResolver<TParent>;
  pinnedRepositories?: OrganizationToPinnedRepositoriesResolver<TParent>;
  project?: OrganizationToProjectResolver<TParent>;
  projects?: OrganizationToProjectsResolver<TParent>;
  projectsResourcePath?: OrganizationToProjectsResourcePathResolver<TParent>;
  projectsUrl?: OrganizationToProjectsUrlResolver<TParent>;
  repositories?: OrganizationToRepositoriesResolver<TParent>;
  repository?: OrganizationToRepositoryResolver<TParent>;
  requiresTwoFactorAuthentication?: OrganizationToRequiresTwoFactorAuthenticationResolver<TParent>;
  resourcePath?: OrganizationToResourcePathResolver<TParent>;
  samlIdentityProvider?: OrganizationToSamlIdentityProviderResolver<TParent>;
  team?: OrganizationToTeamResolver<TParent>;
  teams?: OrganizationToTeamsResolver<TParent>;
  teamsResourcePath?: OrganizationToTeamsResourcePathResolver<TParent>;
  teamsUrl?: OrganizationToTeamsUrlResolver<TParent>;
  url?: OrganizationToUrlResolver<TParent>;
  viewerCanAdminister?: OrganizationToViewerCanAdministerResolver<TParent>;
  viewerCanCreateProjects?: OrganizationToViewerCanCreateProjectsResolver<TParent>;
  viewerCanCreateRepositories?: OrganizationToViewerCanCreateRepositoriesResolver<TParent>;
  viewerCanCreateTeams?: OrganizationToViewerCanCreateTeamsResolver<TParent>;
  viewerIsAMember?: OrganizationToViewerIsAMemberResolver<TParent>;
  websiteUrl?: OrganizationToWebsiteUrlResolver<TParent>;
}

export interface OrganizationToAvatarUrlArgs {
  size?: number;
}
export interface OrganizationToAvatarUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: OrganizationToAvatarUrlArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrganizationToDatabaseIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrganizationToDescriptionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrganizationToEmailResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrganizationToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrganizationToIsVerifiedResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrganizationToLocationResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrganizationToLoginResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrganizationToMembersArgs {
  after?: string;
  before?: string;
  first?: number;
  last?: number;
}
export interface OrganizationToMembersResolver<TParent = any, TResult = any> {
  (parent: TParent, args: OrganizationToMembersArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrganizationToNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrganizationToNewTeamResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrganizationToNewTeamUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrganizationToOrganizationBillingEmailResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrganizationToPinnedRepositoriesArgs {
  affiliations?: Array<GQLRepositoryAffiliation | null>;
  after?: string;
  before?: string;
  first?: number;
  isLocked?: boolean;
  last?: number;
  orderBy?: GQLRepositoryOrder;
  ownerAffiliations?: Array<GQLRepositoryAffiliation | null>;
  privacy?: GQLRepositoryPrivacy;
}
export interface OrganizationToPinnedRepositoriesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: OrganizationToPinnedRepositoriesArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrganizationToProjectArgs {
  number: number;
}
export interface OrganizationToProjectResolver<TParent = any, TResult = any> {
  (parent: TParent, args: OrganizationToProjectArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrganizationToProjectsArgs {
  after?: string;
  before?: string;
  first?: number;
  last?: number;
  orderBy?: GQLProjectOrder;
  search?: string;
  states?: Array<GQLProjectState>;
}
export interface OrganizationToProjectsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: OrganizationToProjectsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrganizationToProjectsResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrganizationToProjectsUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrganizationToRepositoriesArgs {
  affiliations?: Array<GQLRepositoryAffiliation | null>;
  after?: string;
  before?: string;
  first?: number;
  isFork?: boolean;
  isLocked?: boolean;
  last?: number;
  orderBy?: GQLRepositoryOrder;
  ownerAffiliations?: Array<GQLRepositoryAffiliation | null>;
  privacy?: GQLRepositoryPrivacy;
}
export interface OrganizationToRepositoriesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: OrganizationToRepositoriesArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrganizationToRepositoryArgs {
  name: string;
}
export interface OrganizationToRepositoryResolver<TParent = any, TResult = any> {
  (parent: TParent, args: OrganizationToRepositoryArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrganizationToRequiresTwoFactorAuthenticationResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrganizationToResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrganizationToSamlIdentityProviderResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrganizationToTeamArgs {
  slug: string;
}
export interface OrganizationToTeamResolver<TParent = any, TResult = any> {
  (parent: TParent, args: OrganizationToTeamArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrganizationToTeamsArgs {
  after?: string;
  before?: string;
  first?: number;
  last?: number;
  ldapMapped?: boolean;
  orderBy?: GQLTeamOrder;
  privacy?: GQLTeamPrivacy;
  query?: string;
  role?: GQLTeamRole;
  rootTeamsOnly?: boolean;
  userLogins?: Array<string>;
}
export interface OrganizationToTeamsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: OrganizationToTeamsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrganizationToTeamsResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrganizationToTeamsUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrganizationToUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrganizationToViewerCanAdministerResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrganizationToViewerCanCreateProjectsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrganizationToViewerCanCreateRepositoriesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrganizationToViewerCanCreateTeamsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrganizationToViewerIsAMemberResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrganizationToWebsiteUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLActorTypeResolver<TParent = any> {
  (parent: TParent, context: any, info: GraphQLResolveInfo): 'Organization' | 'User' | 'Bot';
}
export interface GQLProjectOwnerTypeResolver<TParent = any> {
  (parent: TParent, context: any, info: GraphQLResolveInfo): 'Organization' | 'Repository';
}
export interface GQLProjectTypeResolver<TParent = any> {
  body?: ProjectToBodyResolver<TParent>;
  bodyHTML?: ProjectToBodyHTMLResolver<TParent>;
  closed?: ProjectToClosedResolver<TParent>;
  closedAt?: ProjectToClosedAtResolver<TParent>;
  columns?: ProjectToColumnsResolver<TParent>;
  createdAt?: ProjectToCreatedAtResolver<TParent>;
  creator?: ProjectToCreatorResolver<TParent>;
  databaseId?: ProjectToDatabaseIdResolver<TParent>;
  id?: ProjectToIdResolver<TParent>;
  name?: ProjectToNameResolver<TParent>;
  number?: ProjectToNumberResolver<TParent>;
  owner?: ProjectToOwnerResolver<TParent>;
  pendingCards?: ProjectToPendingCardsResolver<TParent>;
  resourcePath?: ProjectToResourcePathResolver<TParent>;
  state?: ProjectToStateResolver<TParent>;
  updatedAt?: ProjectToUpdatedAtResolver<TParent>;
  url?: ProjectToUrlResolver<TParent>;
  viewerCanUpdate?: ProjectToViewerCanUpdateResolver<TParent>;
}

export interface ProjectToBodyResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProjectToBodyHTMLResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProjectToClosedResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProjectToClosedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProjectToColumnsArgs {
  after?: string;
  before?: string;
  first?: number;
  last?: number;
}
export interface ProjectToColumnsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: ProjectToColumnsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProjectToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProjectToCreatorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProjectToDatabaseIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProjectToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProjectToNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProjectToNumberResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProjectToOwnerResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProjectToPendingCardsArgs {
  after?: string;
  archivedStates?: Array<GQLProjectCardArchivedState | null>;
  before?: string;
  first?: number;
  last?: number;
}
export interface ProjectToPendingCardsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: ProjectToPendingCardsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProjectToResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProjectToStateResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProjectToUpdatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProjectToUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProjectToViewerCanUpdateResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLClosableTypeResolver<TParent = any> {
  (parent: TParent, context: any, info: GraphQLResolveInfo): 'Project' | 'Issue' | 'PullRequest' | 'Milestone';
}
export interface GQLUpdatableTypeResolver<TParent = any> {
  (parent: TParent, context: any, info: GraphQLResolveInfo): 'Project' | 'Issue' | 'PullRequest' | 'IssueComment' | 'CommitComment' | 'PullRequestReview' | 'PullRequestReviewComment' | 'GistComment';
}
export interface GQLProjectColumnConnectionTypeResolver<TParent = any> {
  edges?: ProjectColumnConnectionToEdgesResolver<TParent>;
  nodes?: ProjectColumnConnectionToNodesResolver<TParent>;
  pageInfo?: ProjectColumnConnectionToPageInfoResolver<TParent>;
  totalCount?: ProjectColumnConnectionToTotalCountResolver<TParent>;
}

export interface ProjectColumnConnectionToEdgesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProjectColumnConnectionToNodesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProjectColumnConnectionToPageInfoResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProjectColumnConnectionToTotalCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLProjectColumnEdgeTypeResolver<TParent = any> {
  cursor?: ProjectColumnEdgeToCursorResolver<TParent>;
  node?: ProjectColumnEdgeToNodeResolver<TParent>;
}

export interface ProjectColumnEdgeToCursorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProjectColumnEdgeToNodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLProjectColumnTypeResolver<TParent = any> {
  cards?: ProjectColumnToCardsResolver<TParent>;
  createdAt?: ProjectColumnToCreatedAtResolver<TParent>;
  databaseId?: ProjectColumnToDatabaseIdResolver<TParent>;
  id?: ProjectColumnToIdResolver<TParent>;
  name?: ProjectColumnToNameResolver<TParent>;
  project?: ProjectColumnToProjectResolver<TParent>;
  purpose?: ProjectColumnToPurposeResolver<TParent>;
  resourcePath?: ProjectColumnToResourcePathResolver<TParent>;
  updatedAt?: ProjectColumnToUpdatedAtResolver<TParent>;
  url?: ProjectColumnToUrlResolver<TParent>;
}

export interface ProjectColumnToCardsArgs {
  after?: string;
  archivedStates?: Array<GQLProjectCardArchivedState | null>;
  before?: string;
  first?: number;
  last?: number;
}
export interface ProjectColumnToCardsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: ProjectColumnToCardsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProjectColumnToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProjectColumnToDatabaseIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProjectColumnToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProjectColumnToNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProjectColumnToProjectResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProjectColumnToPurposeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProjectColumnToResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProjectColumnToUpdatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProjectColumnToUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLProjectCardConnectionTypeResolver<TParent = any> {
  edges?: ProjectCardConnectionToEdgesResolver<TParent>;
  nodes?: ProjectCardConnectionToNodesResolver<TParent>;
  pageInfo?: ProjectCardConnectionToPageInfoResolver<TParent>;
  totalCount?: ProjectCardConnectionToTotalCountResolver<TParent>;
}

export interface ProjectCardConnectionToEdgesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProjectCardConnectionToNodesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProjectCardConnectionToPageInfoResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProjectCardConnectionToTotalCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLProjectCardEdgeTypeResolver<TParent = any> {
  cursor?: ProjectCardEdgeToCursorResolver<TParent>;
  node?: ProjectCardEdgeToNodeResolver<TParent>;
}

export interface ProjectCardEdgeToCursorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProjectCardEdgeToNodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLProjectCardTypeResolver<TParent = any> {
  column?: ProjectCardToColumnResolver<TParent>;
  content?: ProjectCardToContentResolver<TParent>;
  createdAt?: ProjectCardToCreatedAtResolver<TParent>;
  creator?: ProjectCardToCreatorResolver<TParent>;
  databaseId?: ProjectCardToDatabaseIdResolver<TParent>;
  id?: ProjectCardToIdResolver<TParent>;
  isArchived?: ProjectCardToIsArchivedResolver<TParent>;
  note?: ProjectCardToNoteResolver<TParent>;
  project?: ProjectCardToProjectResolver<TParent>;
  resourcePath?: ProjectCardToResourcePathResolver<TParent>;
  state?: ProjectCardToStateResolver<TParent>;
  updatedAt?: ProjectCardToUpdatedAtResolver<TParent>;
  url?: ProjectCardToUrlResolver<TParent>;
}

export interface ProjectCardToColumnResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProjectCardToContentResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProjectCardToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProjectCardToCreatorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProjectCardToDatabaseIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProjectCardToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProjectCardToIsArchivedResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProjectCardToNoteResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProjectCardToProjectResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProjectCardToResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProjectCardToStateResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProjectCardToUpdatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProjectCardToUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLProjectCardItemTypeResolver<TParent = any> {
  (parent: TParent, context: any, info: GraphQLResolveInfo): 'Issue' | 'PullRequest';
}
export interface GQLIssueTypeResolver<TParent = any> {
  activeLockReason?: IssueToActiveLockReasonResolver<TParent>;
  assignees?: IssueToAssigneesResolver<TParent>;
  author?: IssueToAuthorResolver<TParent>;
  authorAssociation?: IssueToAuthorAssociationResolver<TParent>;
  body?: IssueToBodyResolver<TParent>;
  bodyHTML?: IssueToBodyHTMLResolver<TParent>;
  bodyText?: IssueToBodyTextResolver<TParent>;
  closed?: IssueToClosedResolver<TParent>;
  closedAt?: IssueToClosedAtResolver<TParent>;
  comments?: IssueToCommentsResolver<TParent>;
  createdAt?: IssueToCreatedAtResolver<TParent>;
  createdViaEmail?: IssueToCreatedViaEmailResolver<TParent>;
  databaseId?: IssueToDatabaseIdResolver<TParent>;
  editor?: IssueToEditorResolver<TParent>;
  id?: IssueToIdResolver<TParent>;
  includesCreatedEdit?: IssueToIncludesCreatedEditResolver<TParent>;
  labels?: IssueToLabelsResolver<TParent>;
  lastEditedAt?: IssueToLastEditedAtResolver<TParent>;
  locked?: IssueToLockedResolver<TParent>;
  milestone?: IssueToMilestoneResolver<TParent>;
  number?: IssueToNumberResolver<TParent>;
  participants?: IssueToParticipantsResolver<TParent>;
  projectCards?: IssueToProjectCardsResolver<TParent>;
  publishedAt?: IssueToPublishedAtResolver<TParent>;
  reactionGroups?: IssueToReactionGroupsResolver<TParent>;
  reactions?: IssueToReactionsResolver<TParent>;
  repository?: IssueToRepositoryResolver<TParent>;
  resourcePath?: IssueToResourcePathResolver<TParent>;
  state?: IssueToStateResolver<TParent>;
  timeline?: IssueToTimelineResolver<TParent>;
  title?: IssueToTitleResolver<TParent>;
  updatedAt?: IssueToUpdatedAtResolver<TParent>;
  url?: IssueToUrlResolver<TParent>;
  userContentEdits?: IssueToUserContentEditsResolver<TParent>;
  viewerCanReact?: IssueToViewerCanReactResolver<TParent>;
  viewerCanSubscribe?: IssueToViewerCanSubscribeResolver<TParent>;
  viewerCanUpdate?: IssueToViewerCanUpdateResolver<TParent>;
  viewerCannotUpdateReasons?: IssueToViewerCannotUpdateReasonsResolver<TParent>;
  viewerDidAuthor?: IssueToViewerDidAuthorResolver<TParent>;
  viewerSubscription?: IssueToViewerSubscriptionResolver<TParent>;
}

export interface IssueToActiveLockReasonResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IssueToAssigneesArgs {
  after?: string;
  before?: string;
  first?: number;
  last?: number;
}
export interface IssueToAssigneesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: IssueToAssigneesArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IssueToAuthorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IssueToAuthorAssociationResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IssueToBodyResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IssueToBodyHTMLResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IssueToBodyTextResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IssueToClosedResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IssueToClosedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IssueToCommentsArgs {
  after?: string;
  before?: string;
  first?: number;
  last?: number;
}
export interface IssueToCommentsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: IssueToCommentsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IssueToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IssueToCreatedViaEmailResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IssueToDatabaseIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IssueToEditorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IssueToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IssueToIncludesCreatedEditResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IssueToLabelsArgs {
  after?: string;
  before?: string;
  first?: number;
  last?: number;
}
export interface IssueToLabelsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: IssueToLabelsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IssueToLastEditedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IssueToLockedResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IssueToMilestoneResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IssueToNumberResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IssueToParticipantsArgs {
  after?: string;
  before?: string;
  first?: number;
  last?: number;
}
export interface IssueToParticipantsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: IssueToParticipantsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IssueToProjectCardsArgs {
  after?: string;
  archivedStates?: Array<GQLProjectCardArchivedState | null>;
  before?: string;
  first?: number;
  last?: number;
}
export interface IssueToProjectCardsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: IssueToProjectCardsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IssueToPublishedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IssueToReactionGroupsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IssueToReactionsArgs {
  after?: string;
  before?: string;
  content?: GQLReactionContent;
  first?: number;
  last?: number;
  orderBy?: GQLReactionOrder;
}
export interface IssueToReactionsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: IssueToReactionsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IssueToRepositoryResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IssueToResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IssueToStateResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IssueToTimelineArgs {
  after?: string;
  before?: string;
  first?: number;
  last?: number;
  since?: GQLDateTime;
}
export interface IssueToTimelineResolver<TParent = any, TResult = any> {
  (parent: TParent, args: IssueToTimelineArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IssueToTitleResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IssueToUpdatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IssueToUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IssueToUserContentEditsArgs {
  after?: string;
  before?: string;
  first?: number;
  last?: number;
}
export interface IssueToUserContentEditsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: IssueToUserContentEditsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IssueToViewerCanReactResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IssueToViewerCanSubscribeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IssueToViewerCanUpdateResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IssueToViewerCannotUpdateReasonsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IssueToViewerDidAuthorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IssueToViewerSubscriptionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLAssignableTypeResolver<TParent = any> {
  (parent: TParent, context: any, info: GraphQLResolveInfo): 'Issue' | 'PullRequest';
}
export interface GQLUserConnectionTypeResolver<TParent = any> {
  edges?: UserConnectionToEdgesResolver<TParent>;
  nodes?: UserConnectionToNodesResolver<TParent>;
  pageInfo?: UserConnectionToPageInfoResolver<TParent>;
  totalCount?: UserConnectionToTotalCountResolver<TParent>;
}

export interface UserConnectionToEdgesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserConnectionToNodesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserConnectionToPageInfoResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserConnectionToTotalCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLUserEdgeTypeResolver<TParent = any> {
  cursor?: UserEdgeToCursorResolver<TParent>;
  node?: UserEdgeToNodeResolver<TParent>;
}

export interface UserEdgeToCursorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserEdgeToNodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLUserTypeResolver<TParent = any> {
  avatarUrl?: UserToAvatarUrlResolver<TParent>;
  bio?: UserToBioResolver<TParent>;
  bioHTML?: UserToBioHTMLResolver<TParent>;
  commitComments?: UserToCommitCommentsResolver<TParent>;
  company?: UserToCompanyResolver<TParent>;
  companyHTML?: UserToCompanyHTMLResolver<TParent>;
  createdAt?: UserToCreatedAtResolver<TParent>;
  databaseId?: UserToDatabaseIdResolver<TParent>;
  email?: UserToEmailResolver<TParent>;
  followers?: UserToFollowersResolver<TParent>;
  following?: UserToFollowingResolver<TParent>;
  gist?: UserToGistResolver<TParent>;
  gistComments?: UserToGistCommentsResolver<TParent>;
  gists?: UserToGistsResolver<TParent>;
  id?: UserToIdResolver<TParent>;
  isBountyHunter?: UserToIsBountyHunterResolver<TParent>;
  isCampusExpert?: UserToIsCampusExpertResolver<TParent>;
  isDeveloperProgramMember?: UserToIsDeveloperProgramMemberResolver<TParent>;
  isEmployee?: UserToIsEmployeeResolver<TParent>;
  isHireable?: UserToIsHireableResolver<TParent>;
  isSiteAdmin?: UserToIsSiteAdminResolver<TParent>;
  isViewer?: UserToIsViewerResolver<TParent>;
  issueComments?: UserToIssueCommentsResolver<TParent>;
  issues?: UserToIssuesResolver<TParent>;
  location?: UserToLocationResolver<TParent>;
  login?: UserToLoginResolver<TParent>;
  name?: UserToNameResolver<TParent>;
  organization?: UserToOrganizationResolver<TParent>;
  organizations?: UserToOrganizationsResolver<TParent>;
  pinnedRepositories?: UserToPinnedRepositoriesResolver<TParent>;
  publicKeys?: UserToPublicKeysResolver<TParent>;
  pullRequests?: UserToPullRequestsResolver<TParent>;
  repositories?: UserToRepositoriesResolver<TParent>;
  repositoriesContributedTo?: UserToRepositoriesContributedToResolver<TParent>;
  repository?: UserToRepositoryResolver<TParent>;
  resourcePath?: UserToResourcePathResolver<TParent>;
  starredRepositories?: UserToStarredRepositoriesResolver<TParent>;
  updatedAt?: UserToUpdatedAtResolver<TParent>;
  url?: UserToUrlResolver<TParent>;
  viewerCanFollow?: UserToViewerCanFollowResolver<TParent>;
  viewerIsFollowing?: UserToViewerIsFollowingResolver<TParent>;
  watching?: UserToWatchingResolver<TParent>;
  websiteUrl?: UserToWebsiteUrlResolver<TParent>;
}

export interface UserToAvatarUrlArgs {
  size?: number;
}
export interface UserToAvatarUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: UserToAvatarUrlArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserToBioResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserToBioHTMLResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserToCommitCommentsArgs {
  after?: string;
  before?: string;
  first?: number;
  last?: number;
}
export interface UserToCommitCommentsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: UserToCommitCommentsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserToCompanyResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserToCompanyHTMLResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserToDatabaseIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserToEmailResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserToFollowersArgs {
  after?: string;
  before?: string;
  first?: number;
  last?: number;
}
export interface UserToFollowersResolver<TParent = any, TResult = any> {
  (parent: TParent, args: UserToFollowersArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserToFollowingArgs {
  after?: string;
  before?: string;
  first?: number;
  last?: number;
}
export interface UserToFollowingResolver<TParent = any, TResult = any> {
  (parent: TParent, args: UserToFollowingArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserToGistArgs {
  name: string;
}
export interface UserToGistResolver<TParent = any, TResult = any> {
  (parent: TParent, args: UserToGistArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserToGistCommentsArgs {
  after?: string;
  before?: string;
  first?: number;
  last?: number;
}
export interface UserToGistCommentsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: UserToGistCommentsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserToGistsArgs {
  after?: string;
  before?: string;
  first?: number;
  last?: number;
  orderBy?: GQLGistOrder;
  privacy?: GQLGistPrivacy;
}
export interface UserToGistsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: UserToGistsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserToIsBountyHunterResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserToIsCampusExpertResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserToIsDeveloperProgramMemberResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserToIsEmployeeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserToIsHireableResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserToIsSiteAdminResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserToIsViewerResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserToIssueCommentsArgs {
  after?: string;
  before?: string;
  first?: number;
  last?: number;
}
export interface UserToIssueCommentsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: UserToIssueCommentsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserToIssuesArgs {
  after?: string;
  before?: string;
  first?: number;
  labels?: Array<string>;
  last?: number;
  orderBy?: GQLIssueOrder;
  states?: Array<GQLIssueState>;
}
export interface UserToIssuesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: UserToIssuesArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserToLocationResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserToLoginResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserToNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserToOrganizationArgs {
  login: string;
}
export interface UserToOrganizationResolver<TParent = any, TResult = any> {
  (parent: TParent, args: UserToOrganizationArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserToOrganizationsArgs {
  after?: string;
  before?: string;
  first?: number;
  last?: number;
}
export interface UserToOrganizationsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: UserToOrganizationsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserToPinnedRepositoriesArgs {
  affiliations?: Array<GQLRepositoryAffiliation | null>;
  after?: string;
  before?: string;
  first?: number;
  isLocked?: boolean;
  last?: number;
  orderBy?: GQLRepositoryOrder;
  ownerAffiliations?: Array<GQLRepositoryAffiliation | null>;
  privacy?: GQLRepositoryPrivacy;
}
export interface UserToPinnedRepositoriesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: UserToPinnedRepositoriesArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserToPublicKeysArgs {
  after?: string;
  before?: string;
  first?: number;
  last?: number;
}
export interface UserToPublicKeysResolver<TParent = any, TResult = any> {
  (parent: TParent, args: UserToPublicKeysArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserToPullRequestsArgs {
  after?: string;
  baseRefName?: string;
  before?: string;
  first?: number;
  headRefName?: string;
  labels?: Array<string>;
  last?: number;
  orderBy?: GQLIssueOrder;
  states?: Array<GQLPullRequestState>;
}
export interface UserToPullRequestsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: UserToPullRequestsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserToRepositoriesArgs {
  affiliations?: Array<GQLRepositoryAffiliation | null>;
  after?: string;
  before?: string;
  first?: number;
  isFork?: boolean;
  isLocked?: boolean;
  last?: number;
  orderBy?: GQLRepositoryOrder;
  ownerAffiliations?: Array<GQLRepositoryAffiliation | null>;
  privacy?: GQLRepositoryPrivacy;
}
export interface UserToRepositoriesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: UserToRepositoriesArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserToRepositoriesContributedToArgs {
  after?: string;
  before?: string;
  contributionTypes?: Array<GQLRepositoryContributionType | null>;
  first?: number;
  includeUserRepositories?: boolean;
  isLocked?: boolean;
  last?: number;
  orderBy?: GQLRepositoryOrder;
  privacy?: GQLRepositoryPrivacy;
}
export interface UserToRepositoriesContributedToResolver<TParent = any, TResult = any> {
  (parent: TParent, args: UserToRepositoriesContributedToArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserToRepositoryArgs {
  name: string;
}
export interface UserToRepositoryResolver<TParent = any, TResult = any> {
  (parent: TParent, args: UserToRepositoryArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserToResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserToStarredRepositoriesArgs {
  after?: string;
  before?: string;
  first?: number;
  last?: number;
  orderBy?: GQLStarOrder;
  ownedByViewer?: boolean;
}
export interface UserToStarredRepositoriesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: UserToStarredRepositoriesArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserToUpdatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserToUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserToViewerCanFollowResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserToViewerIsFollowingResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserToWatchingArgs {
  affiliations?: Array<GQLRepositoryAffiliation | null>;
  after?: string;
  before?: string;
  first?: number;
  isLocked?: boolean;
  last?: number;
  orderBy?: GQLRepositoryOrder;
  ownerAffiliations?: Array<GQLRepositoryAffiliation | null>;
  privacy?: GQLRepositoryPrivacy;
}
export interface UserToWatchingResolver<TParent = any, TResult = any> {
  (parent: TParent, args: UserToWatchingArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserToWebsiteUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLRegistryPackageOwnerTypeResolver<TParent = any> {
  (parent: TParent, context: any, info: GraphQLResolveInfo): 'Organization' | 'User' | 'Repository';
}
export interface GQLRegistryPackageSearchTypeResolver<TParent = any> {
  (parent: TParent, context: any, info: GraphQLResolveInfo): 'Organization' | 'User';
}
export interface GQLRepositoryOwnerTypeResolver<TParent = any> {
  (parent: TParent, context: any, info: GraphQLResolveInfo): 'Organization' | 'User';
}
export interface GQLRepositoryConnectionTypeResolver<TParent = any> {
  edges?: RepositoryConnectionToEdgesResolver<TParent>;
  nodes?: RepositoryConnectionToNodesResolver<TParent>;
  pageInfo?: RepositoryConnectionToPageInfoResolver<TParent>;
  totalCount?: RepositoryConnectionToTotalCountResolver<TParent>;
  totalDiskUsage?: RepositoryConnectionToTotalDiskUsageResolver<TParent>;
}

export interface RepositoryConnectionToEdgesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryConnectionToNodesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryConnectionToPageInfoResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryConnectionToTotalCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryConnectionToTotalDiskUsageResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLRepositoryEdgeTypeResolver<TParent = any> {
  cursor?: RepositoryEdgeToCursorResolver<TParent>;
  node?: RepositoryEdgeToNodeResolver<TParent>;
}

export interface RepositoryEdgeToCursorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryEdgeToNodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLRepositoryTypeResolver<TParent = any> {
  assignableUsers?: RepositoryToAssignableUsersResolver<TParent>;
  branchProtectionRules?: RepositoryToBranchProtectionRulesResolver<TParent>;
  codeOfConduct?: RepositoryToCodeOfConductResolver<TParent>;
  collaborators?: RepositoryToCollaboratorsResolver<TParent>;
  commitComments?: RepositoryToCommitCommentsResolver<TParent>;
  createdAt?: RepositoryToCreatedAtResolver<TParent>;
  databaseId?: RepositoryToDatabaseIdResolver<TParent>;
  defaultBranchRef?: RepositoryToDefaultBranchRefResolver<TParent>;
  deployKeys?: RepositoryToDeployKeysResolver<TParent>;
  deployments?: RepositoryToDeploymentsResolver<TParent>;
  description?: RepositoryToDescriptionResolver<TParent>;
  descriptionHTML?: RepositoryToDescriptionHTMLResolver<TParent>;
  diskUsage?: RepositoryToDiskUsageResolver<TParent>;
  forkCount?: RepositoryToForkCountResolver<TParent>;
  forks?: RepositoryToForksResolver<TParent>;
  hasIssuesEnabled?: RepositoryToHasIssuesEnabledResolver<TParent>;
  hasWikiEnabled?: RepositoryToHasWikiEnabledResolver<TParent>;
  homepageUrl?: RepositoryToHomepageUrlResolver<TParent>;
  id?: RepositoryToIdResolver<TParent>;
  isArchived?: RepositoryToIsArchivedResolver<TParent>;
  isFork?: RepositoryToIsForkResolver<TParent>;
  isLocked?: RepositoryToIsLockedResolver<TParent>;
  isMirror?: RepositoryToIsMirrorResolver<TParent>;
  isPrivate?: RepositoryToIsPrivateResolver<TParent>;
  issue?: RepositoryToIssueResolver<TParent>;
  issueOrPullRequest?: RepositoryToIssueOrPullRequestResolver<TParent>;
  issues?: RepositoryToIssuesResolver<TParent>;
  label?: RepositoryToLabelResolver<TParent>;
  labels?: RepositoryToLabelsResolver<TParent>;
  languages?: RepositoryToLanguagesResolver<TParent>;
  licenseInfo?: RepositoryToLicenseInfoResolver<TParent>;
  lockReason?: RepositoryToLockReasonResolver<TParent>;
  mentionableUsers?: RepositoryToMentionableUsersResolver<TParent>;
  mergeCommitAllowed?: RepositoryToMergeCommitAllowedResolver<TParent>;
  milestone?: RepositoryToMilestoneResolver<TParent>;
  milestones?: RepositoryToMilestonesResolver<TParent>;
  mirrorUrl?: RepositoryToMirrorUrlResolver<TParent>;
  name?: RepositoryToNameResolver<TParent>;
  nameWithOwner?: RepositoryToNameWithOwnerResolver<TParent>;
  object?: RepositoryToObjectResolver<TParent>;
  owner?: RepositoryToOwnerResolver<TParent>;
  parent?: RepositoryToParentResolver<TParent>;
  primaryLanguage?: RepositoryToPrimaryLanguageResolver<TParent>;
  project?: RepositoryToProjectResolver<TParent>;
  projects?: RepositoryToProjectsResolver<TParent>;
  projectsResourcePath?: RepositoryToProjectsResourcePathResolver<TParent>;
  projectsUrl?: RepositoryToProjectsUrlResolver<TParent>;
  protectedBranches?: RepositoryToProtectedBranchesResolver<TParent>;
  pullRequest?: RepositoryToPullRequestResolver<TParent>;
  pullRequests?: RepositoryToPullRequestsResolver<TParent>;
  pushedAt?: RepositoryToPushedAtResolver<TParent>;
  rebaseMergeAllowed?: RepositoryToRebaseMergeAllowedResolver<TParent>;
  ref?: RepositoryToRefResolver<TParent>;
  refs?: RepositoryToRefsResolver<TParent>;
  release?: RepositoryToReleaseResolver<TParent>;
  releases?: RepositoryToReleasesResolver<TParent>;
  repositoryTopics?: RepositoryToRepositoryTopicsResolver<TParent>;
  resourcePath?: RepositoryToResourcePathResolver<TParent>;
  shortDescriptionHTML?: RepositoryToShortDescriptionHTMLResolver<TParent>;
  squashMergeAllowed?: RepositoryToSquashMergeAllowedResolver<TParent>;
  sshUrl?: RepositoryToSshUrlResolver<TParent>;
  stargazers?: RepositoryToStargazersResolver<TParent>;
  updatedAt?: RepositoryToUpdatedAtResolver<TParent>;
  url?: RepositoryToUrlResolver<TParent>;
  viewerCanAdminister?: RepositoryToViewerCanAdministerResolver<TParent>;
  viewerCanCreateProjects?: RepositoryToViewerCanCreateProjectsResolver<TParent>;
  viewerCanSubscribe?: RepositoryToViewerCanSubscribeResolver<TParent>;
  viewerCanUpdateTopics?: RepositoryToViewerCanUpdateTopicsResolver<TParent>;
  viewerHasStarred?: RepositoryToViewerHasStarredResolver<TParent>;
  viewerPermission?: RepositoryToViewerPermissionResolver<TParent>;
  viewerSubscription?: RepositoryToViewerSubscriptionResolver<TParent>;
  watchers?: RepositoryToWatchersResolver<TParent>;
}

export interface RepositoryToAssignableUsersArgs {
  after?: string;
  before?: string;
  first?: number;
  last?: number;
}
export interface RepositoryToAssignableUsersResolver<TParent = any, TResult = any> {
  (parent: TParent, args: RepositoryToAssignableUsersArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryToBranchProtectionRulesArgs {
  after?: string;
  before?: string;
  first?: number;
  last?: number;
}
export interface RepositoryToBranchProtectionRulesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: RepositoryToBranchProtectionRulesArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryToCodeOfConductResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryToCollaboratorsArgs {
  affiliation?: GQLCollaboratorAffiliation;
  after?: string;
  before?: string;
  first?: number;
  last?: number;
}
export interface RepositoryToCollaboratorsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: RepositoryToCollaboratorsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryToCommitCommentsArgs {
  after?: string;
  before?: string;
  first?: number;
  last?: number;
}
export interface RepositoryToCommitCommentsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: RepositoryToCommitCommentsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryToDatabaseIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryToDefaultBranchRefResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryToDeployKeysArgs {
  after?: string;
  before?: string;
  first?: number;
  last?: number;
}
export interface RepositoryToDeployKeysResolver<TParent = any, TResult = any> {
  (parent: TParent, args: RepositoryToDeployKeysArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryToDeploymentsArgs {
  after?: string;
  before?: string;
  environments?: Array<string>;
  first?: number;
  last?: number;
}
export interface RepositoryToDeploymentsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: RepositoryToDeploymentsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryToDescriptionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryToDescriptionHTMLResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryToDiskUsageResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryToForkCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryToForksArgs {
  affiliations?: Array<GQLRepositoryAffiliation | null>;
  after?: string;
  before?: string;
  first?: number;
  isLocked?: boolean;
  last?: number;
  orderBy?: GQLRepositoryOrder;
  ownerAffiliations?: Array<GQLRepositoryAffiliation | null>;
  privacy?: GQLRepositoryPrivacy;
}
export interface RepositoryToForksResolver<TParent = any, TResult = any> {
  (parent: TParent, args: RepositoryToForksArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryToHasIssuesEnabledResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryToHasWikiEnabledResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryToHomepageUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryToIsArchivedResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryToIsForkResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryToIsLockedResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryToIsMirrorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryToIsPrivateResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryToIssueArgs {
  number: number;
}
export interface RepositoryToIssueResolver<TParent = any, TResult = any> {
  (parent: TParent, args: RepositoryToIssueArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryToIssueOrPullRequestArgs {
  number: number;
}
export interface RepositoryToIssueOrPullRequestResolver<TParent = any, TResult = any> {
  (parent: TParent, args: RepositoryToIssueOrPullRequestArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryToIssuesArgs {
  after?: string;
  before?: string;
  first?: number;
  labels?: Array<string>;
  last?: number;
  orderBy?: GQLIssueOrder;
  states?: Array<GQLIssueState>;
}
export interface RepositoryToIssuesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: RepositoryToIssuesArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryToLabelArgs {
  name: string;
}
export interface RepositoryToLabelResolver<TParent = any, TResult = any> {
  (parent: TParent, args: RepositoryToLabelArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryToLabelsArgs {
  after?: string;
  before?: string;
  first?: number;
  last?: number;
  query?: string;
}
export interface RepositoryToLabelsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: RepositoryToLabelsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryToLanguagesArgs {
  after?: string;
  before?: string;
  first?: number;
  last?: number;
  orderBy?: GQLLanguageOrder;
}
export interface RepositoryToLanguagesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: RepositoryToLanguagesArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryToLicenseInfoResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryToLockReasonResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryToMentionableUsersArgs {
  after?: string;
  before?: string;
  first?: number;
  last?: number;
}
export interface RepositoryToMentionableUsersResolver<TParent = any, TResult = any> {
  (parent: TParent, args: RepositoryToMentionableUsersArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryToMergeCommitAllowedResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryToMilestoneArgs {
  number: number;
}
export interface RepositoryToMilestoneResolver<TParent = any, TResult = any> {
  (parent: TParent, args: RepositoryToMilestoneArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryToMilestonesArgs {
  after?: string;
  before?: string;
  first?: number;
  last?: number;
  orderBy?: GQLMilestoneOrder;
  states?: Array<GQLMilestoneState>;
}
export interface RepositoryToMilestonesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: RepositoryToMilestonesArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryToMirrorUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryToNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryToNameWithOwnerResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryToObjectArgs {
  expression?: string;
  oid?: GQLGitObjectID;
}
export interface RepositoryToObjectResolver<TParent = any, TResult = any> {
  (parent: TParent, args: RepositoryToObjectArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryToOwnerResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryToParentResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryToPrimaryLanguageResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryToProjectArgs {
  number: number;
}
export interface RepositoryToProjectResolver<TParent = any, TResult = any> {
  (parent: TParent, args: RepositoryToProjectArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryToProjectsArgs {
  after?: string;
  before?: string;
  first?: number;
  last?: number;
  orderBy?: GQLProjectOrder;
  search?: string;
  states?: Array<GQLProjectState>;
}
export interface RepositoryToProjectsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: RepositoryToProjectsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryToProjectsResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryToProjectsUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryToProtectedBranchesArgs {
  after?: string;
  before?: string;
  first?: number;
  last?: number;
}
export interface RepositoryToProtectedBranchesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: RepositoryToProtectedBranchesArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryToPullRequestArgs {
  number: number;
}
export interface RepositoryToPullRequestResolver<TParent = any, TResult = any> {
  (parent: TParent, args: RepositoryToPullRequestArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryToPullRequestsArgs {
  after?: string;
  baseRefName?: string;
  before?: string;
  first?: number;
  headRefName?: string;
  labels?: Array<string>;
  last?: number;
  orderBy?: GQLIssueOrder;
  states?: Array<GQLPullRequestState>;
}
export interface RepositoryToPullRequestsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: RepositoryToPullRequestsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryToPushedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryToRebaseMergeAllowedResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryToRefArgs {
  qualifiedName: string;
}
export interface RepositoryToRefResolver<TParent = any, TResult = any> {
  (parent: TParent, args: RepositoryToRefArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryToRefsArgs {
  after?: string;
  before?: string;
  direction?: GQLOrderDirection;
  first?: number;
  last?: number;
  orderBy?: GQLRefOrder;
  refPrefix: string;
}
export interface RepositoryToRefsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: RepositoryToRefsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryToReleaseArgs {
  tagName: string;
}
export interface RepositoryToReleaseResolver<TParent = any, TResult = any> {
  (parent: TParent, args: RepositoryToReleaseArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryToReleasesArgs {
  after?: string;
  before?: string;
  first?: number;
  last?: number;
  orderBy?: GQLReleaseOrder;
}
export interface RepositoryToReleasesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: RepositoryToReleasesArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryToRepositoryTopicsArgs {
  after?: string;
  before?: string;
  first?: number;
  last?: number;
}
export interface RepositoryToRepositoryTopicsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: RepositoryToRepositoryTopicsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryToResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryToShortDescriptionHTMLArgs {
  limit?: number;
}
export interface RepositoryToShortDescriptionHTMLResolver<TParent = any, TResult = any> {
  (parent: TParent, args: RepositoryToShortDescriptionHTMLArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryToSquashMergeAllowedResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryToSshUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryToStargazersArgs {
  after?: string;
  before?: string;
  first?: number;
  last?: number;
  orderBy?: GQLStarOrder;
}
export interface RepositoryToStargazersResolver<TParent = any, TResult = any> {
  (parent: TParent, args: RepositoryToStargazersArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryToUpdatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryToUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryToViewerCanAdministerResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryToViewerCanCreateProjectsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryToViewerCanSubscribeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryToViewerCanUpdateTopicsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryToViewerHasStarredResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryToViewerPermissionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryToViewerSubscriptionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryToWatchersArgs {
  after?: string;
  before?: string;
  first?: number;
  last?: number;
}
export interface RepositoryToWatchersResolver<TParent = any, TResult = any> {
  (parent: TParent, args: RepositoryToWatchersArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLRepositoryInfoTypeResolver<TParent = any> {
  (parent: TParent, context: any, info: GraphQLResolveInfo): 'Repository';
}
export interface GQLStarrableTypeResolver<TParent = any> {
  (parent: TParent, context: any, info: GraphQLResolveInfo): 'Repository' | 'Topic' | 'Gist';
}
export interface GQLStargazerConnectionTypeResolver<TParent = any> {
  edges?: StargazerConnectionToEdgesResolver<TParent>;
  nodes?: StargazerConnectionToNodesResolver<TParent>;
  pageInfo?: StargazerConnectionToPageInfoResolver<TParent>;
  totalCount?: StargazerConnectionToTotalCountResolver<TParent>;
}

export interface StargazerConnectionToEdgesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface StargazerConnectionToNodesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface StargazerConnectionToPageInfoResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface StargazerConnectionToTotalCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLStargazerEdgeTypeResolver<TParent = any> {
  cursor?: StargazerEdgeToCursorResolver<TParent>;
  node?: StargazerEdgeToNodeResolver<TParent>;
  starredAt?: StargazerEdgeToStarredAtResolver<TParent>;
}

export interface StargazerEdgeToCursorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface StargazerEdgeToNodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface StargazerEdgeToStarredAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLSubscribableTypeResolver<TParent = any> {
  (parent: TParent, context: any, info: GraphQLResolveInfo): 'Issue' | 'Repository' | 'PullRequest' | 'Commit' | 'Team';
}
export interface GQLUniformResourceLocatableTypeResolver<TParent = any> {
  (parent: TParent, context: any, info: GraphQLResolveInfo): 'Organization' | 'Issue' | 'User' | 'Repository' | 'PullRequest' | 'PullRequestCommit' | 'Commit' | 'Milestone' | 'ClosedEvent' | 'CrossReferencedEvent' | 'MergedEvent' | 'ReviewDismissedEvent' | 'Release' | 'RepositoryTopic' | 'Bot';
}
export interface GQLBranchProtectionRuleConnectionTypeResolver<TParent = any> {
  edges?: BranchProtectionRuleConnectionToEdgesResolver<TParent>;
  nodes?: BranchProtectionRuleConnectionToNodesResolver<TParent>;
  pageInfo?: BranchProtectionRuleConnectionToPageInfoResolver<TParent>;
  totalCount?: BranchProtectionRuleConnectionToTotalCountResolver<TParent>;
}

export interface BranchProtectionRuleConnectionToEdgesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BranchProtectionRuleConnectionToNodesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BranchProtectionRuleConnectionToPageInfoResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BranchProtectionRuleConnectionToTotalCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLBranchProtectionRuleEdgeTypeResolver<TParent = any> {
  cursor?: BranchProtectionRuleEdgeToCursorResolver<TParent>;
  node?: BranchProtectionRuleEdgeToNodeResolver<TParent>;
}

export interface BranchProtectionRuleEdgeToCursorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BranchProtectionRuleEdgeToNodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLBranchProtectionRuleTypeResolver<TParent = any> {
  branchProtectionRuleConflicts?: BranchProtectionRuleToBranchProtectionRuleConflictsResolver<TParent>;
  creator?: BranchProtectionRuleToCreatorResolver<TParent>;
  databaseId?: BranchProtectionRuleToDatabaseIdResolver<TParent>;
  dismissesStaleReviews?: BranchProtectionRuleToDismissesStaleReviewsResolver<TParent>;
  id?: BranchProtectionRuleToIdResolver<TParent>;
  isAdminEnforced?: BranchProtectionRuleToIsAdminEnforcedResolver<TParent>;
  matchingRefs?: BranchProtectionRuleToMatchingRefsResolver<TParent>;
  pattern?: BranchProtectionRuleToPatternResolver<TParent>;
  pushAllowances?: BranchProtectionRuleToPushAllowancesResolver<TParent>;
  repository?: BranchProtectionRuleToRepositoryResolver<TParent>;
  requiredApprovingReviewCount?: BranchProtectionRuleToRequiredApprovingReviewCountResolver<TParent>;
  requiredStatusCheckContexts?: BranchProtectionRuleToRequiredStatusCheckContextsResolver<TParent>;
  requiresApprovingReviews?: BranchProtectionRuleToRequiresApprovingReviewsResolver<TParent>;
  requiresCommitSignatures?: BranchProtectionRuleToRequiresCommitSignaturesResolver<TParent>;
  requiresStatusChecks?: BranchProtectionRuleToRequiresStatusChecksResolver<TParent>;
  requiresStrictStatusChecks?: BranchProtectionRuleToRequiresStrictStatusChecksResolver<TParent>;
  restrictsPushes?: BranchProtectionRuleToRestrictsPushesResolver<TParent>;
  restrictsReviewDismissals?: BranchProtectionRuleToRestrictsReviewDismissalsResolver<TParent>;
  reviewDismissalAllowances?: BranchProtectionRuleToReviewDismissalAllowancesResolver<TParent>;
}

export interface BranchProtectionRuleToBranchProtectionRuleConflictsArgs {
  after?: string;
  before?: string;
  first?: number;
  last?: number;
}
export interface BranchProtectionRuleToBranchProtectionRuleConflictsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: BranchProtectionRuleToBranchProtectionRuleConflictsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BranchProtectionRuleToCreatorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BranchProtectionRuleToDatabaseIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BranchProtectionRuleToDismissesStaleReviewsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BranchProtectionRuleToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BranchProtectionRuleToIsAdminEnforcedResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BranchProtectionRuleToMatchingRefsArgs {
  after?: string;
  before?: string;
  first?: number;
  last?: number;
}
export interface BranchProtectionRuleToMatchingRefsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: BranchProtectionRuleToMatchingRefsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BranchProtectionRuleToPatternResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BranchProtectionRuleToPushAllowancesArgs {
  after?: string;
  before?: string;
  first?: number;
  last?: number;
}
export interface BranchProtectionRuleToPushAllowancesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: BranchProtectionRuleToPushAllowancesArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BranchProtectionRuleToRepositoryResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BranchProtectionRuleToRequiredApprovingReviewCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BranchProtectionRuleToRequiredStatusCheckContextsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BranchProtectionRuleToRequiresApprovingReviewsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BranchProtectionRuleToRequiresCommitSignaturesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BranchProtectionRuleToRequiresStatusChecksResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BranchProtectionRuleToRequiresStrictStatusChecksResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BranchProtectionRuleToRestrictsPushesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BranchProtectionRuleToRestrictsReviewDismissalsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BranchProtectionRuleToReviewDismissalAllowancesArgs {
  after?: string;
  before?: string;
  first?: number;
  last?: number;
}
export interface BranchProtectionRuleToReviewDismissalAllowancesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: BranchProtectionRuleToReviewDismissalAllowancesArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLBranchProtectionRuleConflictConnectionTypeResolver<TParent = any> {
  edges?: BranchProtectionRuleConflictConnectionToEdgesResolver<TParent>;
  nodes?: BranchProtectionRuleConflictConnectionToNodesResolver<TParent>;
  pageInfo?: BranchProtectionRuleConflictConnectionToPageInfoResolver<TParent>;
  totalCount?: BranchProtectionRuleConflictConnectionToTotalCountResolver<TParent>;
}

export interface BranchProtectionRuleConflictConnectionToEdgesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BranchProtectionRuleConflictConnectionToNodesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BranchProtectionRuleConflictConnectionToPageInfoResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BranchProtectionRuleConflictConnectionToTotalCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLBranchProtectionRuleConflictEdgeTypeResolver<TParent = any> {
  cursor?: BranchProtectionRuleConflictEdgeToCursorResolver<TParent>;
  node?: BranchProtectionRuleConflictEdgeToNodeResolver<TParent>;
}

export interface BranchProtectionRuleConflictEdgeToCursorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BranchProtectionRuleConflictEdgeToNodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLBranchProtectionRuleConflictTypeResolver<TParent = any> {
  branchProtectionRule?: BranchProtectionRuleConflictToBranchProtectionRuleResolver<TParent>;
  conflictingBranchProtectionRule?: BranchProtectionRuleConflictToConflictingBranchProtectionRuleResolver<TParent>;
  ref?: BranchProtectionRuleConflictToRefResolver<TParent>;
}

export interface BranchProtectionRuleConflictToBranchProtectionRuleResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BranchProtectionRuleConflictToConflictingBranchProtectionRuleResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BranchProtectionRuleConflictToRefResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLRefTypeResolver<TParent = any> {
  associatedPullRequests?: RefToAssociatedPullRequestsResolver<TParent>;
  id?: RefToIdResolver<TParent>;
  name?: RefToNameResolver<TParent>;
  prefix?: RefToPrefixResolver<TParent>;
  repository?: RefToRepositoryResolver<TParent>;
  target?: RefToTargetResolver<TParent>;
}

export interface RefToAssociatedPullRequestsArgs {
  after?: string;
  baseRefName?: string;
  before?: string;
  first?: number;
  headRefName?: string;
  labels?: Array<string>;
  last?: number;
  orderBy?: GQLIssueOrder;
  states?: Array<GQLPullRequestState>;
}
export interface RefToAssociatedPullRequestsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: RefToAssociatedPullRequestsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RefToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RefToNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RefToPrefixResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RefToRepositoryResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RefToTargetResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLPullRequestConnectionTypeResolver<TParent = any> {
  edges?: PullRequestConnectionToEdgesResolver<TParent>;
  nodes?: PullRequestConnectionToNodesResolver<TParent>;
  pageInfo?: PullRequestConnectionToPageInfoResolver<TParent>;
  totalCount?: PullRequestConnectionToTotalCountResolver<TParent>;
}

export interface PullRequestConnectionToEdgesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestConnectionToNodesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestConnectionToPageInfoResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestConnectionToTotalCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLPullRequestEdgeTypeResolver<TParent = any> {
  cursor?: PullRequestEdgeToCursorResolver<TParent>;
  node?: PullRequestEdgeToNodeResolver<TParent>;
}

export interface PullRequestEdgeToCursorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestEdgeToNodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLPullRequestTypeResolver<TParent = any> {
  activeLockReason?: PullRequestToActiveLockReasonResolver<TParent>;
  additions?: PullRequestToAdditionsResolver<TParent>;
  assignees?: PullRequestToAssigneesResolver<TParent>;
  author?: PullRequestToAuthorResolver<TParent>;
  authorAssociation?: PullRequestToAuthorAssociationResolver<TParent>;
  baseRef?: PullRequestToBaseRefResolver<TParent>;
  baseRefName?: PullRequestToBaseRefNameResolver<TParent>;
  baseRefOid?: PullRequestToBaseRefOidResolver<TParent>;
  body?: PullRequestToBodyResolver<TParent>;
  bodyHTML?: PullRequestToBodyHTMLResolver<TParent>;
  bodyText?: PullRequestToBodyTextResolver<TParent>;
  changedFiles?: PullRequestToChangedFilesResolver<TParent>;
  closed?: PullRequestToClosedResolver<TParent>;
  closedAt?: PullRequestToClosedAtResolver<TParent>;
  comments?: PullRequestToCommentsResolver<TParent>;
  commits?: PullRequestToCommitsResolver<TParent>;
  createdAt?: PullRequestToCreatedAtResolver<TParent>;
  createdViaEmail?: PullRequestToCreatedViaEmailResolver<TParent>;
  databaseId?: PullRequestToDatabaseIdResolver<TParent>;
  deletions?: PullRequestToDeletionsResolver<TParent>;
  editor?: PullRequestToEditorResolver<TParent>;
  headRef?: PullRequestToHeadRefResolver<TParent>;
  headRefName?: PullRequestToHeadRefNameResolver<TParent>;
  headRefOid?: PullRequestToHeadRefOidResolver<TParent>;
  headRepository?: PullRequestToHeadRepositoryResolver<TParent>;
  headRepositoryOwner?: PullRequestToHeadRepositoryOwnerResolver<TParent>;
  id?: PullRequestToIdResolver<TParent>;
  includesCreatedEdit?: PullRequestToIncludesCreatedEditResolver<TParent>;
  isCrossRepository?: PullRequestToIsCrossRepositoryResolver<TParent>;
  labels?: PullRequestToLabelsResolver<TParent>;
  lastEditedAt?: PullRequestToLastEditedAtResolver<TParent>;
  locked?: PullRequestToLockedResolver<TParent>;
  maintainerCanModify?: PullRequestToMaintainerCanModifyResolver<TParent>;
  mergeCommit?: PullRequestToMergeCommitResolver<TParent>;
  mergeable?: PullRequestToMergeableResolver<TParent>;
  merged?: PullRequestToMergedResolver<TParent>;
  mergedAt?: PullRequestToMergedAtResolver<TParent>;
  mergedBy?: PullRequestToMergedByResolver<TParent>;
  milestone?: PullRequestToMilestoneResolver<TParent>;
  number?: PullRequestToNumberResolver<TParent>;
  participants?: PullRequestToParticipantsResolver<TParent>;
  permalink?: PullRequestToPermalinkResolver<TParent>;
  potentialMergeCommit?: PullRequestToPotentialMergeCommitResolver<TParent>;
  projectCards?: PullRequestToProjectCardsResolver<TParent>;
  publishedAt?: PullRequestToPublishedAtResolver<TParent>;
  reactionGroups?: PullRequestToReactionGroupsResolver<TParent>;
  reactions?: PullRequestToReactionsResolver<TParent>;
  repository?: PullRequestToRepositoryResolver<TParent>;
  resourcePath?: PullRequestToResourcePathResolver<TParent>;
  revertResourcePath?: PullRequestToRevertResourcePathResolver<TParent>;
  revertUrl?: PullRequestToRevertUrlResolver<TParent>;
  reviewRequests?: PullRequestToReviewRequestsResolver<TParent>;
  reviews?: PullRequestToReviewsResolver<TParent>;
  state?: PullRequestToStateResolver<TParent>;
  suggestedReviewers?: PullRequestToSuggestedReviewersResolver<TParent>;
  timeline?: PullRequestToTimelineResolver<TParent>;
  title?: PullRequestToTitleResolver<TParent>;
  updatedAt?: PullRequestToUpdatedAtResolver<TParent>;
  url?: PullRequestToUrlResolver<TParent>;
  userContentEdits?: PullRequestToUserContentEditsResolver<TParent>;
  viewerCanApplySuggestion?: PullRequestToViewerCanApplySuggestionResolver<TParent>;
  viewerCanReact?: PullRequestToViewerCanReactResolver<TParent>;
  viewerCanSubscribe?: PullRequestToViewerCanSubscribeResolver<TParent>;
  viewerCanUpdate?: PullRequestToViewerCanUpdateResolver<TParent>;
  viewerCannotUpdateReasons?: PullRequestToViewerCannotUpdateReasonsResolver<TParent>;
  viewerDidAuthor?: PullRequestToViewerDidAuthorResolver<TParent>;
  viewerSubscription?: PullRequestToViewerSubscriptionResolver<TParent>;
}

export interface PullRequestToActiveLockReasonResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestToAdditionsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestToAssigneesArgs {
  after?: string;
  before?: string;
  first?: number;
  last?: number;
}
export interface PullRequestToAssigneesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: PullRequestToAssigneesArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestToAuthorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestToAuthorAssociationResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestToBaseRefResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestToBaseRefNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestToBaseRefOidResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestToBodyResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestToBodyHTMLResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestToBodyTextResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestToChangedFilesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestToClosedResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestToClosedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestToCommentsArgs {
  after?: string;
  before?: string;
  first?: number;
  last?: number;
}
export interface PullRequestToCommentsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: PullRequestToCommentsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestToCommitsArgs {
  after?: string;
  before?: string;
  first?: number;
  last?: number;
}
export interface PullRequestToCommitsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: PullRequestToCommitsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestToCreatedViaEmailResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestToDatabaseIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestToDeletionsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestToEditorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestToHeadRefResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestToHeadRefNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestToHeadRefOidResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestToHeadRepositoryResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestToHeadRepositoryOwnerResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestToIncludesCreatedEditResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestToIsCrossRepositoryResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestToLabelsArgs {
  after?: string;
  before?: string;
  first?: number;
  last?: number;
}
export interface PullRequestToLabelsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: PullRequestToLabelsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestToLastEditedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestToLockedResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestToMaintainerCanModifyResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestToMergeCommitResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestToMergeableResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestToMergedResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestToMergedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestToMergedByResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestToMilestoneResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestToNumberResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestToParticipantsArgs {
  after?: string;
  before?: string;
  first?: number;
  last?: number;
}
export interface PullRequestToParticipantsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: PullRequestToParticipantsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestToPermalinkResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestToPotentialMergeCommitResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestToProjectCardsArgs {
  after?: string;
  archivedStates?: Array<GQLProjectCardArchivedState | null>;
  before?: string;
  first?: number;
  last?: number;
}
export interface PullRequestToProjectCardsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: PullRequestToProjectCardsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestToPublishedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestToReactionGroupsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestToReactionsArgs {
  after?: string;
  before?: string;
  content?: GQLReactionContent;
  first?: number;
  last?: number;
  orderBy?: GQLReactionOrder;
}
export interface PullRequestToReactionsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: PullRequestToReactionsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestToRepositoryResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestToResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestToRevertResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestToRevertUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestToReviewRequestsArgs {
  after?: string;
  before?: string;
  first?: number;
  last?: number;
}
export interface PullRequestToReviewRequestsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: PullRequestToReviewRequestsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestToReviewsArgs {
  after?: string;
  author?: string;
  before?: string;
  first?: number;
  last?: number;
  states?: Array<GQLPullRequestReviewState>;
}
export interface PullRequestToReviewsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: PullRequestToReviewsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestToStateResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestToSuggestedReviewersResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestToTimelineArgs {
  after?: string;
  before?: string;
  first?: number;
  last?: number;
  since?: GQLDateTime;
}
export interface PullRequestToTimelineResolver<TParent = any, TResult = any> {
  (parent: TParent, args: PullRequestToTimelineArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestToTitleResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestToUpdatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestToUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestToUserContentEditsArgs {
  after?: string;
  before?: string;
  first?: number;
  last?: number;
}
export interface PullRequestToUserContentEditsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: PullRequestToUserContentEditsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestToViewerCanApplySuggestionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestToViewerCanReactResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestToViewerCanSubscribeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestToViewerCanUpdateResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestToViewerCannotUpdateReasonsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestToViewerDidAuthorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestToViewerSubscriptionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLCommentTypeResolver<TParent = any> {
  (parent: TParent, context: any, info: GraphQLResolveInfo): 'Issue' | 'PullRequest' | 'IssueComment' | 'CommitComment' | 'PullRequestReview' | 'PullRequestReviewComment' | 'GistComment';
}
export interface GQLUserContentEditConnectionTypeResolver<TParent = any> {
  edges?: UserContentEditConnectionToEdgesResolver<TParent>;
  nodes?: UserContentEditConnectionToNodesResolver<TParent>;
  pageInfo?: UserContentEditConnectionToPageInfoResolver<TParent>;
  totalCount?: UserContentEditConnectionToTotalCountResolver<TParent>;
}

export interface UserContentEditConnectionToEdgesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserContentEditConnectionToNodesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserContentEditConnectionToPageInfoResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserContentEditConnectionToTotalCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLUserContentEditEdgeTypeResolver<TParent = any> {
  cursor?: UserContentEditEdgeToCursorResolver<TParent>;
  node?: UserContentEditEdgeToNodeResolver<TParent>;
}

export interface UserContentEditEdgeToCursorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserContentEditEdgeToNodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLUserContentEditTypeResolver<TParent = any> {
  createdAt?: UserContentEditToCreatedAtResolver<TParent>;
  deletedAt?: UserContentEditToDeletedAtResolver<TParent>;
  deletedBy?: UserContentEditToDeletedByResolver<TParent>;
  diff?: UserContentEditToDiffResolver<TParent>;
  editedAt?: UserContentEditToEditedAtResolver<TParent>;
  editor?: UserContentEditToEditorResolver<TParent>;
  id?: UserContentEditToIdResolver<TParent>;
  updatedAt?: UserContentEditToUpdatedAtResolver<TParent>;
}

export interface UserContentEditToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserContentEditToDeletedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserContentEditToDeletedByResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserContentEditToDiffResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserContentEditToEditedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserContentEditToEditorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserContentEditToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserContentEditToUpdatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLLabelableTypeResolver<TParent = any> {
  (parent: TParent, context: any, info: GraphQLResolveInfo): 'Issue' | 'PullRequest';
}
export interface GQLLabelConnectionTypeResolver<TParent = any> {
  edges?: LabelConnectionToEdgesResolver<TParent>;
  nodes?: LabelConnectionToNodesResolver<TParent>;
  pageInfo?: LabelConnectionToPageInfoResolver<TParent>;
  totalCount?: LabelConnectionToTotalCountResolver<TParent>;
}

export interface LabelConnectionToEdgesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface LabelConnectionToNodesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface LabelConnectionToPageInfoResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface LabelConnectionToTotalCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLLabelEdgeTypeResolver<TParent = any> {
  cursor?: LabelEdgeToCursorResolver<TParent>;
  node?: LabelEdgeToNodeResolver<TParent>;
}

export interface LabelEdgeToCursorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface LabelEdgeToNodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLLabelTypeResolver<TParent = any> {
  color?: LabelToColorResolver<TParent>;
  createdAt?: LabelToCreatedAtResolver<TParent>;
  description?: LabelToDescriptionResolver<TParent>;
  id?: LabelToIdResolver<TParent>;
  isDefault?: LabelToIsDefaultResolver<TParent>;
  issues?: LabelToIssuesResolver<TParent>;
  name?: LabelToNameResolver<TParent>;
  pullRequests?: LabelToPullRequestsResolver<TParent>;
  repository?: LabelToRepositoryResolver<TParent>;
  resourcePath?: LabelToResourcePathResolver<TParent>;
  updatedAt?: LabelToUpdatedAtResolver<TParent>;
  url?: LabelToUrlResolver<TParent>;
}

export interface LabelToColorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface LabelToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface LabelToDescriptionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface LabelToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface LabelToIsDefaultResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface LabelToIssuesArgs {
  after?: string;
  before?: string;
  first?: number;
  labels?: Array<string>;
  last?: number;
  orderBy?: GQLIssueOrder;
  states?: Array<GQLIssueState>;
}
export interface LabelToIssuesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: LabelToIssuesArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface LabelToNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface LabelToPullRequestsArgs {
  after?: string;
  baseRefName?: string;
  before?: string;
  first?: number;
  headRefName?: string;
  labels?: Array<string>;
  last?: number;
  orderBy?: GQLIssueOrder;
  states?: Array<GQLPullRequestState>;
}
export interface LabelToPullRequestsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: LabelToPullRequestsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface LabelToRepositoryResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface LabelToResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface LabelToUpdatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface LabelToUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLIssueConnectionTypeResolver<TParent = any> {
  edges?: IssueConnectionToEdgesResolver<TParent>;
  nodes?: IssueConnectionToNodesResolver<TParent>;
  pageInfo?: IssueConnectionToPageInfoResolver<TParent>;
  totalCount?: IssueConnectionToTotalCountResolver<TParent>;
}

export interface IssueConnectionToEdgesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IssueConnectionToNodesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IssueConnectionToPageInfoResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IssueConnectionToTotalCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLIssueEdgeTypeResolver<TParent = any> {
  cursor?: IssueEdgeToCursorResolver<TParent>;
  node?: IssueEdgeToNodeResolver<TParent>;
}

export interface IssueEdgeToCursorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IssueEdgeToNodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLLockableTypeResolver<TParent = any> {
  (parent: TParent, context: any, info: GraphQLResolveInfo): 'Issue' | 'PullRequest';
}
export interface GQLReactableTypeResolver<TParent = any> {
  (parent: TParent, context: any, info: GraphQLResolveInfo): 'Issue' | 'PullRequest' | 'IssueComment' | 'CommitComment' | 'PullRequestReviewComment';
}
export interface GQLReactionGroupTypeResolver<TParent = any> {
  content?: ReactionGroupToContentResolver<TParent>;
  createdAt?: ReactionGroupToCreatedAtResolver<TParent>;
  subject?: ReactionGroupToSubjectResolver<TParent>;
  users?: ReactionGroupToUsersResolver<TParent>;
  viewerHasReacted?: ReactionGroupToViewerHasReactedResolver<TParent>;
}

export interface ReactionGroupToContentResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReactionGroupToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReactionGroupToSubjectResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReactionGroupToUsersArgs {
  after?: string;
  before?: string;
  first?: number;
  last?: number;
}
export interface ReactionGroupToUsersResolver<TParent = any, TResult = any> {
  (parent: TParent, args: ReactionGroupToUsersArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReactionGroupToViewerHasReactedResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLReactingUserConnectionTypeResolver<TParent = any> {
  edges?: ReactingUserConnectionToEdgesResolver<TParent>;
  nodes?: ReactingUserConnectionToNodesResolver<TParent>;
  pageInfo?: ReactingUserConnectionToPageInfoResolver<TParent>;
  totalCount?: ReactingUserConnectionToTotalCountResolver<TParent>;
}

export interface ReactingUserConnectionToEdgesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReactingUserConnectionToNodesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReactingUserConnectionToPageInfoResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReactingUserConnectionToTotalCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLReactingUserEdgeTypeResolver<TParent = any> {
  cursor?: ReactingUserEdgeToCursorResolver<TParent>;
  node?: ReactingUserEdgeToNodeResolver<TParent>;
  reactedAt?: ReactingUserEdgeToReactedAtResolver<TParent>;
}

export interface ReactingUserEdgeToCursorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReactingUserEdgeToNodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReactingUserEdgeToReactedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLReactionConnectionTypeResolver<TParent = any> {
  edges?: ReactionConnectionToEdgesResolver<TParent>;
  nodes?: ReactionConnectionToNodesResolver<TParent>;
  pageInfo?: ReactionConnectionToPageInfoResolver<TParent>;
  totalCount?: ReactionConnectionToTotalCountResolver<TParent>;
  viewerHasReacted?: ReactionConnectionToViewerHasReactedResolver<TParent>;
}

export interface ReactionConnectionToEdgesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReactionConnectionToNodesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReactionConnectionToPageInfoResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReactionConnectionToTotalCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReactionConnectionToViewerHasReactedResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLReactionEdgeTypeResolver<TParent = any> {
  cursor?: ReactionEdgeToCursorResolver<TParent>;
  node?: ReactionEdgeToNodeResolver<TParent>;
}

export interface ReactionEdgeToCursorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReactionEdgeToNodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLReactionTypeResolver<TParent = any> {
  content?: ReactionToContentResolver<TParent>;
  createdAt?: ReactionToCreatedAtResolver<TParent>;
  databaseId?: ReactionToDatabaseIdResolver<TParent>;
  id?: ReactionToIdResolver<TParent>;
  reactable?: ReactionToReactableResolver<TParent>;
  user?: ReactionToUserResolver<TParent>;
}

export interface ReactionToContentResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReactionToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReactionToDatabaseIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReactionToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReactionToReactableResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReactionToUserResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLRepositoryNodeTypeResolver<TParent = any> {
  (parent: TParent, context: any, info: GraphQLResolveInfo): 'Issue' | 'PullRequest' | 'IssueComment' | 'CommitComment' | 'PullRequestReview' | 'PullRequestReviewComment' | 'CommitCommentThread';
}
export interface GQLUpdatableCommentTypeResolver<TParent = any> {
  (parent: TParent, context: any, info: GraphQLResolveInfo): 'Issue' | 'PullRequest' | 'IssueComment' | 'CommitComment' | 'PullRequestReview' | 'PullRequestReviewComment' | 'GistComment';
}
export interface GQLIssueCommentConnectionTypeResolver<TParent = any> {
  edges?: IssueCommentConnectionToEdgesResolver<TParent>;
  nodes?: IssueCommentConnectionToNodesResolver<TParent>;
  pageInfo?: IssueCommentConnectionToPageInfoResolver<TParent>;
  totalCount?: IssueCommentConnectionToTotalCountResolver<TParent>;
}

export interface IssueCommentConnectionToEdgesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IssueCommentConnectionToNodesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IssueCommentConnectionToPageInfoResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IssueCommentConnectionToTotalCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLIssueCommentEdgeTypeResolver<TParent = any> {
  cursor?: IssueCommentEdgeToCursorResolver<TParent>;
  node?: IssueCommentEdgeToNodeResolver<TParent>;
}

export interface IssueCommentEdgeToCursorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IssueCommentEdgeToNodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLIssueCommentTypeResolver<TParent = any> {
  author?: IssueCommentToAuthorResolver<TParent>;
  authorAssociation?: IssueCommentToAuthorAssociationResolver<TParent>;
  body?: IssueCommentToBodyResolver<TParent>;
  bodyHTML?: IssueCommentToBodyHTMLResolver<TParent>;
  bodyText?: IssueCommentToBodyTextResolver<TParent>;
  createdAt?: IssueCommentToCreatedAtResolver<TParent>;
  createdViaEmail?: IssueCommentToCreatedViaEmailResolver<TParent>;
  databaseId?: IssueCommentToDatabaseIdResolver<TParent>;
  editor?: IssueCommentToEditorResolver<TParent>;
  id?: IssueCommentToIdResolver<TParent>;
  includesCreatedEdit?: IssueCommentToIncludesCreatedEditResolver<TParent>;
  isMinimized?: IssueCommentToIsMinimizedResolver<TParent>;
  issue?: IssueCommentToIssueResolver<TParent>;
  lastEditedAt?: IssueCommentToLastEditedAtResolver<TParent>;
  minimizedReason?: IssueCommentToMinimizedReasonResolver<TParent>;
  publishedAt?: IssueCommentToPublishedAtResolver<TParent>;
  pullRequest?: IssueCommentToPullRequestResolver<TParent>;
  reactionGroups?: IssueCommentToReactionGroupsResolver<TParent>;
  reactions?: IssueCommentToReactionsResolver<TParent>;
  repository?: IssueCommentToRepositoryResolver<TParent>;
  resourcePath?: IssueCommentToResourcePathResolver<TParent>;
  updatedAt?: IssueCommentToUpdatedAtResolver<TParent>;
  url?: IssueCommentToUrlResolver<TParent>;
  userContentEdits?: IssueCommentToUserContentEditsResolver<TParent>;
  viewerCanDelete?: IssueCommentToViewerCanDeleteResolver<TParent>;
  viewerCanMinimize?: IssueCommentToViewerCanMinimizeResolver<TParent>;
  viewerCanReact?: IssueCommentToViewerCanReactResolver<TParent>;
  viewerCanUpdate?: IssueCommentToViewerCanUpdateResolver<TParent>;
  viewerCannotUpdateReasons?: IssueCommentToViewerCannotUpdateReasonsResolver<TParent>;
  viewerDidAuthor?: IssueCommentToViewerDidAuthorResolver<TParent>;
}

export interface IssueCommentToAuthorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IssueCommentToAuthorAssociationResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IssueCommentToBodyResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IssueCommentToBodyHTMLResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IssueCommentToBodyTextResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IssueCommentToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IssueCommentToCreatedViaEmailResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IssueCommentToDatabaseIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IssueCommentToEditorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IssueCommentToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IssueCommentToIncludesCreatedEditResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IssueCommentToIsMinimizedResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IssueCommentToIssueResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IssueCommentToLastEditedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IssueCommentToMinimizedReasonResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IssueCommentToPublishedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IssueCommentToPullRequestResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IssueCommentToReactionGroupsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IssueCommentToReactionsArgs {
  after?: string;
  before?: string;
  content?: GQLReactionContent;
  first?: number;
  last?: number;
  orderBy?: GQLReactionOrder;
}
export interface IssueCommentToReactionsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: IssueCommentToReactionsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IssueCommentToRepositoryResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IssueCommentToResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IssueCommentToUpdatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IssueCommentToUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IssueCommentToUserContentEditsArgs {
  after?: string;
  before?: string;
  first?: number;
  last?: number;
}
export interface IssueCommentToUserContentEditsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: IssueCommentToUserContentEditsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IssueCommentToViewerCanDeleteResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IssueCommentToViewerCanMinimizeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IssueCommentToViewerCanReactResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IssueCommentToViewerCanUpdateResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IssueCommentToViewerCannotUpdateReasonsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IssueCommentToViewerDidAuthorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLDeletableTypeResolver<TParent = any> {
  (parent: TParent, context: any, info: GraphQLResolveInfo): 'IssueComment' | 'CommitComment' | 'PullRequestReview' | 'PullRequestReviewComment' | 'GistComment';
}
export interface GQLPullRequestCommitConnectionTypeResolver<TParent = any> {
  edges?: PullRequestCommitConnectionToEdgesResolver<TParent>;
  nodes?: PullRequestCommitConnectionToNodesResolver<TParent>;
  pageInfo?: PullRequestCommitConnectionToPageInfoResolver<TParent>;
  totalCount?: PullRequestCommitConnectionToTotalCountResolver<TParent>;
}

export interface PullRequestCommitConnectionToEdgesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestCommitConnectionToNodesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestCommitConnectionToPageInfoResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestCommitConnectionToTotalCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLPullRequestCommitEdgeTypeResolver<TParent = any> {
  cursor?: PullRequestCommitEdgeToCursorResolver<TParent>;
  node?: PullRequestCommitEdgeToNodeResolver<TParent>;
}

export interface PullRequestCommitEdgeToCursorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestCommitEdgeToNodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLPullRequestCommitTypeResolver<TParent = any> {
  commit?: PullRequestCommitToCommitResolver<TParent>;
  id?: PullRequestCommitToIdResolver<TParent>;
  pullRequest?: PullRequestCommitToPullRequestResolver<TParent>;
  resourcePath?: PullRequestCommitToResourcePathResolver<TParent>;
  url?: PullRequestCommitToUrlResolver<TParent>;
}

export interface PullRequestCommitToCommitResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestCommitToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestCommitToPullRequestResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestCommitToResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestCommitToUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLCommitTypeResolver<TParent = any> {
  abbreviatedOid?: CommitToAbbreviatedOidResolver<TParent>;
  additions?: CommitToAdditionsResolver<TParent>;
  author?: CommitToAuthorResolver<TParent>;
  authoredByCommitter?: CommitToAuthoredByCommitterResolver<TParent>;
  authoredDate?: CommitToAuthoredDateResolver<TParent>;
  blame?: CommitToBlameResolver<TParent>;
  changedFiles?: CommitToChangedFilesResolver<TParent>;
  comments?: CommitToCommentsResolver<TParent>;
  commitResourcePath?: CommitToCommitResourcePathResolver<TParent>;
  commitUrl?: CommitToCommitUrlResolver<TParent>;
  committedDate?: CommitToCommittedDateResolver<TParent>;
  committedViaWeb?: CommitToCommittedViaWebResolver<TParent>;
  committer?: CommitToCommitterResolver<TParent>;
  deletions?: CommitToDeletionsResolver<TParent>;
  history?: CommitToHistoryResolver<TParent>;
  id?: CommitToIdResolver<TParent>;
  message?: CommitToMessageResolver<TParent>;
  messageBody?: CommitToMessageBodyResolver<TParent>;
  messageBodyHTML?: CommitToMessageBodyHTMLResolver<TParent>;
  messageHeadline?: CommitToMessageHeadlineResolver<TParent>;
  messageHeadlineHTML?: CommitToMessageHeadlineHTMLResolver<TParent>;
  oid?: CommitToOidResolver<TParent>;
  parents?: CommitToParentsResolver<TParent>;
  pushedDate?: CommitToPushedDateResolver<TParent>;
  repository?: CommitToRepositoryResolver<TParent>;
  resourcePath?: CommitToResourcePathResolver<TParent>;
  signature?: CommitToSignatureResolver<TParent>;
  status?: CommitToStatusResolver<TParent>;
  tarballUrl?: CommitToTarballUrlResolver<TParent>;
  tree?: CommitToTreeResolver<TParent>;
  treeResourcePath?: CommitToTreeResourcePathResolver<TParent>;
  treeUrl?: CommitToTreeUrlResolver<TParent>;
  url?: CommitToUrlResolver<TParent>;
  viewerCanSubscribe?: CommitToViewerCanSubscribeResolver<TParent>;
  viewerSubscription?: CommitToViewerSubscriptionResolver<TParent>;
  zipballUrl?: CommitToZipballUrlResolver<TParent>;
}

export interface CommitToAbbreviatedOidResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommitToAdditionsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommitToAuthorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommitToAuthoredByCommitterResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommitToAuthoredDateResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommitToBlameArgs {
  path: string;
}
export interface CommitToBlameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: CommitToBlameArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommitToChangedFilesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommitToCommentsArgs {
  after?: string;
  before?: string;
  first?: number;
  last?: number;
}
export interface CommitToCommentsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: CommitToCommentsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommitToCommitResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommitToCommitUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommitToCommittedDateResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommitToCommittedViaWebResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommitToCommitterResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommitToDeletionsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommitToHistoryArgs {
  after?: string;
  author?: GQLCommitAuthor;
  before?: string;
  first?: number;
  last?: number;
  path?: string;
  since?: GQLGitTimestamp;
  until?: GQLGitTimestamp;
}
export interface CommitToHistoryResolver<TParent = any, TResult = any> {
  (parent: TParent, args: CommitToHistoryArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommitToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommitToMessageResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommitToMessageBodyResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommitToMessageBodyHTMLResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommitToMessageHeadlineResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommitToMessageHeadlineHTMLResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommitToOidResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommitToParentsArgs {
  after?: string;
  before?: string;
  first?: number;
  last?: number;
}
export interface CommitToParentsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: CommitToParentsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommitToPushedDateResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommitToRepositoryResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommitToResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommitToSignatureResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommitToStatusResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommitToTarballUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommitToTreeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommitToTreeResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommitToTreeUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommitToUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommitToViewerCanSubscribeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommitToViewerSubscriptionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommitToZipballUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLGitObjectTypeResolver<TParent = any> {
  (parent: TParent, context: any, info: GraphQLResolveInfo): 'Commit' | 'Tree' | 'Blob' | 'Tag';
}
export interface GQLGitActorTypeResolver<TParent = any> {
  avatarUrl?: GitActorToAvatarUrlResolver<TParent>;
  date?: GitActorToDateResolver<TParent>;
  email?: GitActorToEmailResolver<TParent>;
  name?: GitActorToNameResolver<TParent>;
  user?: GitActorToUserResolver<TParent>;
}

export interface GitActorToAvatarUrlArgs {
  size?: number;
}
export interface GitActorToAvatarUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: GitActorToAvatarUrlArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GitActorToDateResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GitActorToEmailResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GitActorToNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GitActorToUserResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLBlameTypeResolver<TParent = any> {
  ranges?: BlameToRangesResolver<TParent>;
}

export interface BlameToRangesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLBlameRangeTypeResolver<TParent = any> {
  age?: BlameRangeToAgeResolver<TParent>;
  commit?: BlameRangeToCommitResolver<TParent>;
  endingLine?: BlameRangeToEndingLineResolver<TParent>;
  startingLine?: BlameRangeToStartingLineResolver<TParent>;
}

export interface BlameRangeToAgeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BlameRangeToCommitResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BlameRangeToEndingLineResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BlameRangeToStartingLineResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLCommitCommentConnectionTypeResolver<TParent = any> {
  edges?: CommitCommentConnectionToEdgesResolver<TParent>;
  nodes?: CommitCommentConnectionToNodesResolver<TParent>;
  pageInfo?: CommitCommentConnectionToPageInfoResolver<TParent>;
  totalCount?: CommitCommentConnectionToTotalCountResolver<TParent>;
}

export interface CommitCommentConnectionToEdgesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommitCommentConnectionToNodesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommitCommentConnectionToPageInfoResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommitCommentConnectionToTotalCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLCommitCommentEdgeTypeResolver<TParent = any> {
  cursor?: CommitCommentEdgeToCursorResolver<TParent>;
  node?: CommitCommentEdgeToNodeResolver<TParent>;
}

export interface CommitCommentEdgeToCursorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommitCommentEdgeToNodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLCommitCommentTypeResolver<TParent = any> {
  author?: CommitCommentToAuthorResolver<TParent>;
  authorAssociation?: CommitCommentToAuthorAssociationResolver<TParent>;
  body?: CommitCommentToBodyResolver<TParent>;
  bodyHTML?: CommitCommentToBodyHTMLResolver<TParent>;
  bodyText?: CommitCommentToBodyTextResolver<TParent>;
  commit?: CommitCommentToCommitResolver<TParent>;
  createdAt?: CommitCommentToCreatedAtResolver<TParent>;
  createdViaEmail?: CommitCommentToCreatedViaEmailResolver<TParent>;
  databaseId?: CommitCommentToDatabaseIdResolver<TParent>;
  editor?: CommitCommentToEditorResolver<TParent>;
  id?: CommitCommentToIdResolver<TParent>;
  includesCreatedEdit?: CommitCommentToIncludesCreatedEditResolver<TParent>;
  isMinimized?: CommitCommentToIsMinimizedResolver<TParent>;
  lastEditedAt?: CommitCommentToLastEditedAtResolver<TParent>;
  minimizedReason?: CommitCommentToMinimizedReasonResolver<TParent>;
  path?: CommitCommentToPathResolver<TParent>;
  position?: CommitCommentToPositionResolver<TParent>;
  publishedAt?: CommitCommentToPublishedAtResolver<TParent>;
  reactionGroups?: CommitCommentToReactionGroupsResolver<TParent>;
  reactions?: CommitCommentToReactionsResolver<TParent>;
  repository?: CommitCommentToRepositoryResolver<TParent>;
  resourcePath?: CommitCommentToResourcePathResolver<TParent>;
  updatedAt?: CommitCommentToUpdatedAtResolver<TParent>;
  url?: CommitCommentToUrlResolver<TParent>;
  userContentEdits?: CommitCommentToUserContentEditsResolver<TParent>;
  viewerCanDelete?: CommitCommentToViewerCanDeleteResolver<TParent>;
  viewerCanMinimize?: CommitCommentToViewerCanMinimizeResolver<TParent>;
  viewerCanReact?: CommitCommentToViewerCanReactResolver<TParent>;
  viewerCanUpdate?: CommitCommentToViewerCanUpdateResolver<TParent>;
  viewerCannotUpdateReasons?: CommitCommentToViewerCannotUpdateReasonsResolver<TParent>;
  viewerDidAuthor?: CommitCommentToViewerDidAuthorResolver<TParent>;
}

export interface CommitCommentToAuthorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommitCommentToAuthorAssociationResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommitCommentToBodyResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommitCommentToBodyHTMLResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommitCommentToBodyTextResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommitCommentToCommitResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommitCommentToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommitCommentToCreatedViaEmailResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommitCommentToDatabaseIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommitCommentToEditorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommitCommentToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommitCommentToIncludesCreatedEditResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommitCommentToIsMinimizedResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommitCommentToLastEditedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommitCommentToMinimizedReasonResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommitCommentToPathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommitCommentToPositionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommitCommentToPublishedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommitCommentToReactionGroupsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommitCommentToReactionsArgs {
  after?: string;
  before?: string;
  content?: GQLReactionContent;
  first?: number;
  last?: number;
  orderBy?: GQLReactionOrder;
}
export interface CommitCommentToReactionsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: CommitCommentToReactionsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommitCommentToRepositoryResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommitCommentToResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommitCommentToUpdatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommitCommentToUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommitCommentToUserContentEditsArgs {
  after?: string;
  before?: string;
  first?: number;
  last?: number;
}
export interface CommitCommentToUserContentEditsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: CommitCommentToUserContentEditsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommitCommentToViewerCanDeleteResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommitCommentToViewerCanMinimizeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommitCommentToViewerCanReactResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommitCommentToViewerCanUpdateResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommitCommentToViewerCannotUpdateReasonsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommitCommentToViewerDidAuthorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLCommitHistoryConnectionTypeResolver<TParent = any> {
  edges?: CommitHistoryConnectionToEdgesResolver<TParent>;
  nodes?: CommitHistoryConnectionToNodesResolver<TParent>;
  pageInfo?: CommitHistoryConnectionToPageInfoResolver<TParent>;
  totalCount?: CommitHistoryConnectionToTotalCountResolver<TParent>;
}

export interface CommitHistoryConnectionToEdgesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommitHistoryConnectionToNodesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommitHistoryConnectionToPageInfoResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommitHistoryConnectionToTotalCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLCommitEdgeTypeResolver<TParent = any> {
  cursor?: CommitEdgeToCursorResolver<TParent>;
  node?: CommitEdgeToNodeResolver<TParent>;
}

export interface CommitEdgeToCursorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommitEdgeToNodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLCommitConnectionTypeResolver<TParent = any> {
  edges?: CommitConnectionToEdgesResolver<TParent>;
  nodes?: CommitConnectionToNodesResolver<TParent>;
  pageInfo?: CommitConnectionToPageInfoResolver<TParent>;
  totalCount?: CommitConnectionToTotalCountResolver<TParent>;
}

export interface CommitConnectionToEdgesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommitConnectionToNodesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommitConnectionToPageInfoResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommitConnectionToTotalCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLGitSignatureTypeResolver<TParent = any> {
  (parent: TParent, context: any, info: GraphQLResolveInfo): 'GpgSignature' | 'SmimeSignature' | 'UnknownSignature';
}
export interface GQLStatusTypeResolver<TParent = any> {
  commit?: StatusToCommitResolver<TParent>;
  context?: StatusToContextResolver<TParent>;
  contexts?: StatusToContextsResolver<TParent>;
  id?: StatusToIdResolver<TParent>;
  state?: StatusToStateResolver<TParent>;
}

export interface StatusToCommitResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface StatusToContextArgs {
  name: string;
}
export interface StatusToContextResolver<TParent = any, TResult = any> {
  (parent: TParent, args: StatusToContextArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface StatusToContextsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface StatusToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface StatusToStateResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLStatusContextTypeResolver<TParent = any> {
  commit?: StatusContextToCommitResolver<TParent>;
  context?: StatusContextToContextResolver<TParent>;
  createdAt?: StatusContextToCreatedAtResolver<TParent>;
  creator?: StatusContextToCreatorResolver<TParent>;
  description?: StatusContextToDescriptionResolver<TParent>;
  id?: StatusContextToIdResolver<TParent>;
  state?: StatusContextToStateResolver<TParent>;
  targetUrl?: StatusContextToTargetUrlResolver<TParent>;
}

export interface StatusContextToCommitResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface StatusContextToContextResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface StatusContextToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface StatusContextToCreatorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface StatusContextToDescriptionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface StatusContextToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface StatusContextToStateResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface StatusContextToTargetUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLTreeTypeResolver<TParent = any> {
  abbreviatedOid?: TreeToAbbreviatedOidResolver<TParent>;
  commitResourcePath?: TreeToCommitResourcePathResolver<TParent>;
  commitUrl?: TreeToCommitUrlResolver<TParent>;
  entries?: TreeToEntriesResolver<TParent>;
  id?: TreeToIdResolver<TParent>;
  oid?: TreeToOidResolver<TParent>;
  repository?: TreeToRepositoryResolver<TParent>;
}

export interface TreeToAbbreviatedOidResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TreeToCommitResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TreeToCommitUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TreeToEntriesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TreeToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TreeToOidResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TreeToRepositoryResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLTreeEntryTypeResolver<TParent = any> {
  mode?: TreeEntryToModeResolver<TParent>;
  name?: TreeEntryToNameResolver<TParent>;
  object?: TreeEntryToObjectResolver<TParent>;
  oid?: TreeEntryToOidResolver<TParent>;
  repository?: TreeEntryToRepositoryResolver<TParent>;
  type?: TreeEntryToTypeResolver<TParent>;
}

export interface TreeEntryToModeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TreeEntryToNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TreeEntryToObjectResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TreeEntryToOidResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TreeEntryToRepositoryResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TreeEntryToTypeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLMilestoneTypeResolver<TParent = any> {
  closed?: MilestoneToClosedResolver<TParent>;
  closedAt?: MilestoneToClosedAtResolver<TParent>;
  createdAt?: MilestoneToCreatedAtResolver<TParent>;
  creator?: MilestoneToCreatorResolver<TParent>;
  description?: MilestoneToDescriptionResolver<TParent>;
  dueOn?: MilestoneToDueOnResolver<TParent>;
  id?: MilestoneToIdResolver<TParent>;
  issues?: MilestoneToIssuesResolver<TParent>;
  number?: MilestoneToNumberResolver<TParent>;
  pullRequests?: MilestoneToPullRequestsResolver<TParent>;
  repository?: MilestoneToRepositoryResolver<TParent>;
  resourcePath?: MilestoneToResourcePathResolver<TParent>;
  state?: MilestoneToStateResolver<TParent>;
  title?: MilestoneToTitleResolver<TParent>;
  updatedAt?: MilestoneToUpdatedAtResolver<TParent>;
  url?: MilestoneToUrlResolver<TParent>;
}

export interface MilestoneToClosedResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MilestoneToClosedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MilestoneToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MilestoneToCreatorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MilestoneToDescriptionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MilestoneToDueOnResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MilestoneToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MilestoneToIssuesArgs {
  after?: string;
  before?: string;
  first?: number;
  labels?: Array<string>;
  last?: number;
  orderBy?: GQLIssueOrder;
  states?: Array<GQLIssueState>;
}
export interface MilestoneToIssuesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MilestoneToIssuesArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MilestoneToNumberResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MilestoneToPullRequestsArgs {
  after?: string;
  baseRefName?: string;
  before?: string;
  first?: number;
  headRefName?: string;
  labels?: Array<string>;
  last?: number;
  orderBy?: GQLIssueOrder;
  states?: Array<GQLPullRequestState>;
}
export interface MilestoneToPullRequestsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MilestoneToPullRequestsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MilestoneToRepositoryResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MilestoneToResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MilestoneToStateResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MilestoneToTitleResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MilestoneToUpdatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MilestoneToUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLReviewRequestConnectionTypeResolver<TParent = any> {
  edges?: ReviewRequestConnectionToEdgesResolver<TParent>;
  nodes?: ReviewRequestConnectionToNodesResolver<TParent>;
  pageInfo?: ReviewRequestConnectionToPageInfoResolver<TParent>;
  totalCount?: ReviewRequestConnectionToTotalCountResolver<TParent>;
}

export interface ReviewRequestConnectionToEdgesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReviewRequestConnectionToNodesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReviewRequestConnectionToPageInfoResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReviewRequestConnectionToTotalCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLReviewRequestEdgeTypeResolver<TParent = any> {
  cursor?: ReviewRequestEdgeToCursorResolver<TParent>;
  node?: ReviewRequestEdgeToNodeResolver<TParent>;
}

export interface ReviewRequestEdgeToCursorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReviewRequestEdgeToNodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLReviewRequestTypeResolver<TParent = any> {
  databaseId?: ReviewRequestToDatabaseIdResolver<TParent>;
  id?: ReviewRequestToIdResolver<TParent>;
  pullRequest?: ReviewRequestToPullRequestResolver<TParent>;
  requestedReviewer?: ReviewRequestToRequestedReviewerResolver<TParent>;
}

export interface ReviewRequestToDatabaseIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReviewRequestToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReviewRequestToPullRequestResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReviewRequestToRequestedReviewerResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLRequestedReviewerTypeResolver<TParent = any> {
  (parent: TParent, context: any, info: GraphQLResolveInfo): 'Team' | 'User';
}
export interface GQLTeamTypeResolver<TParent = any> {
  ancestors?: TeamToAncestorsResolver<TParent>;
  avatarUrl?: TeamToAvatarUrlResolver<TParent>;
  childTeams?: TeamToChildTeamsResolver<TParent>;
  combinedSlug?: TeamToCombinedSlugResolver<TParent>;
  createdAt?: TeamToCreatedAtResolver<TParent>;
  description?: TeamToDescriptionResolver<TParent>;
  editTeamResourcePath?: TeamToEditTeamResourcePathResolver<TParent>;
  editTeamUrl?: TeamToEditTeamUrlResolver<TParent>;
  id?: TeamToIdResolver<TParent>;
  invitations?: TeamToInvitationsResolver<TParent>;
  members?: TeamToMembersResolver<TParent>;
  membersResourcePath?: TeamToMembersResourcePathResolver<TParent>;
  membersUrl?: TeamToMembersUrlResolver<TParent>;
  name?: TeamToNameResolver<TParent>;
  newTeamResourcePath?: TeamToNewTeamResourcePathResolver<TParent>;
  newTeamUrl?: TeamToNewTeamUrlResolver<TParent>;
  organization?: TeamToOrganizationResolver<TParent>;
  parentTeam?: TeamToParentTeamResolver<TParent>;
  privacy?: TeamToPrivacyResolver<TParent>;
  repositories?: TeamToRepositoriesResolver<TParent>;
  repositoriesResourcePath?: TeamToRepositoriesResourcePathResolver<TParent>;
  repositoriesUrl?: TeamToRepositoriesUrlResolver<TParent>;
  resourcePath?: TeamToResourcePathResolver<TParent>;
  slug?: TeamToSlugResolver<TParent>;
  teamsResourcePath?: TeamToTeamsResourcePathResolver<TParent>;
  teamsUrl?: TeamToTeamsUrlResolver<TParent>;
  updatedAt?: TeamToUpdatedAtResolver<TParent>;
  url?: TeamToUrlResolver<TParent>;
  viewerCanAdminister?: TeamToViewerCanAdministerResolver<TParent>;
  viewerCanSubscribe?: TeamToViewerCanSubscribeResolver<TParent>;
  viewerSubscription?: TeamToViewerSubscriptionResolver<TParent>;
}

export interface TeamToAncestorsArgs {
  after?: string;
  before?: string;
  first?: number;
  last?: number;
}
export interface TeamToAncestorsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: TeamToAncestorsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamToAvatarUrlArgs {
  size?: number;
}
export interface TeamToAvatarUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: TeamToAvatarUrlArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamToChildTeamsArgs {
  after?: string;
  before?: string;
  first?: number;
  immediateOnly?: boolean;
  last?: number;
  orderBy?: GQLTeamOrder;
  userLogins?: Array<string>;
}
export interface TeamToChildTeamsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: TeamToChildTeamsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamToCombinedSlugResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamToDescriptionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamToEditTeamResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamToEditTeamUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamToInvitationsArgs {
  after?: string;
  before?: string;
  first?: number;
  last?: number;
}
export interface TeamToInvitationsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: TeamToInvitationsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamToMembersArgs {
  after?: string;
  before?: string;
  first?: number;
  last?: number;
  membership?: GQLTeamMembershipType;
  orderBy?: GQLTeamMemberOrder;
  query?: string;
  role?: GQLTeamMemberRole;
}
export interface TeamToMembersResolver<TParent = any, TResult = any> {
  (parent: TParent, args: TeamToMembersArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamToMembersResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamToMembersUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamToNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamToNewTeamResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamToNewTeamUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamToOrganizationResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamToParentTeamResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamToPrivacyResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamToRepositoriesArgs {
  after?: string;
  before?: string;
  first?: number;
  last?: number;
  orderBy?: GQLTeamRepositoryOrder;
  query?: string;
}
export interface TeamToRepositoriesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: TeamToRepositoriesArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamToRepositoriesResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamToRepositoriesUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamToResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamToSlugResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamToTeamsResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamToTeamsUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamToUpdatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamToUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamToViewerCanAdministerResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamToViewerCanSubscribeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamToViewerSubscriptionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLTeamConnectionTypeResolver<TParent = any> {
  edges?: TeamConnectionToEdgesResolver<TParent>;
  nodes?: TeamConnectionToNodesResolver<TParent>;
  pageInfo?: TeamConnectionToPageInfoResolver<TParent>;
  totalCount?: TeamConnectionToTotalCountResolver<TParent>;
}

export interface TeamConnectionToEdgesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamConnectionToNodesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamConnectionToPageInfoResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamConnectionToTotalCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLTeamEdgeTypeResolver<TParent = any> {
  cursor?: TeamEdgeToCursorResolver<TParent>;
  node?: TeamEdgeToNodeResolver<TParent>;
}

export interface TeamEdgeToCursorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamEdgeToNodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLOrganizationInvitationConnectionTypeResolver<TParent = any> {
  edges?: OrganizationInvitationConnectionToEdgesResolver<TParent>;
  nodes?: OrganizationInvitationConnectionToNodesResolver<TParent>;
  pageInfo?: OrganizationInvitationConnectionToPageInfoResolver<TParent>;
  totalCount?: OrganizationInvitationConnectionToTotalCountResolver<TParent>;
}

export interface OrganizationInvitationConnectionToEdgesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrganizationInvitationConnectionToNodesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrganizationInvitationConnectionToPageInfoResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrganizationInvitationConnectionToTotalCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLOrganizationInvitationEdgeTypeResolver<TParent = any> {
  cursor?: OrganizationInvitationEdgeToCursorResolver<TParent>;
  node?: OrganizationInvitationEdgeToNodeResolver<TParent>;
}

export interface OrganizationInvitationEdgeToCursorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrganizationInvitationEdgeToNodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLOrganizationInvitationTypeResolver<TParent = any> {
  createdAt?: OrganizationInvitationToCreatedAtResolver<TParent>;
  email?: OrganizationInvitationToEmailResolver<TParent>;
  id?: OrganizationInvitationToIdResolver<TParent>;
  invitationType?: OrganizationInvitationToInvitationTypeResolver<TParent>;
  invitee?: OrganizationInvitationToInviteeResolver<TParent>;
  inviter?: OrganizationInvitationToInviterResolver<TParent>;
  organization?: OrganizationInvitationToOrganizationResolver<TParent>;
  role?: OrganizationInvitationToRoleResolver<TParent>;
}

export interface OrganizationInvitationToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrganizationInvitationToEmailResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrganizationInvitationToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrganizationInvitationToInvitationTypeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrganizationInvitationToInviteeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrganizationInvitationToInviterResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrganizationInvitationToOrganizationResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrganizationInvitationToRoleResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLTeamMemberConnectionTypeResolver<TParent = any> {
  edges?: TeamMemberConnectionToEdgesResolver<TParent>;
  nodes?: TeamMemberConnectionToNodesResolver<TParent>;
  pageInfo?: TeamMemberConnectionToPageInfoResolver<TParent>;
  totalCount?: TeamMemberConnectionToTotalCountResolver<TParent>;
}

export interface TeamMemberConnectionToEdgesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamMemberConnectionToNodesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamMemberConnectionToPageInfoResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamMemberConnectionToTotalCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLTeamMemberEdgeTypeResolver<TParent = any> {
  cursor?: TeamMemberEdgeToCursorResolver<TParent>;
  memberAccessResourcePath?: TeamMemberEdgeToMemberAccessResourcePathResolver<TParent>;
  memberAccessUrl?: TeamMemberEdgeToMemberAccessUrlResolver<TParent>;
  node?: TeamMemberEdgeToNodeResolver<TParent>;
  role?: TeamMemberEdgeToRoleResolver<TParent>;
}

export interface TeamMemberEdgeToCursorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamMemberEdgeToMemberAccessResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamMemberEdgeToMemberAccessUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamMemberEdgeToNodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamMemberEdgeToRoleResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLTeamRepositoryConnectionTypeResolver<TParent = any> {
  edges?: TeamRepositoryConnectionToEdgesResolver<TParent>;
  nodes?: TeamRepositoryConnectionToNodesResolver<TParent>;
  pageInfo?: TeamRepositoryConnectionToPageInfoResolver<TParent>;
  totalCount?: TeamRepositoryConnectionToTotalCountResolver<TParent>;
}

export interface TeamRepositoryConnectionToEdgesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamRepositoryConnectionToNodesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamRepositoryConnectionToPageInfoResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamRepositoryConnectionToTotalCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLTeamRepositoryEdgeTypeResolver<TParent = any> {
  cursor?: TeamRepositoryEdgeToCursorResolver<TParent>;
  node?: TeamRepositoryEdgeToNodeResolver<TParent>;
  permission?: TeamRepositoryEdgeToPermissionResolver<TParent>;
}

export interface TeamRepositoryEdgeToCursorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamRepositoryEdgeToNodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamRepositoryEdgeToPermissionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLPullRequestReviewConnectionTypeResolver<TParent = any> {
  edges?: PullRequestReviewConnectionToEdgesResolver<TParent>;
  nodes?: PullRequestReviewConnectionToNodesResolver<TParent>;
  pageInfo?: PullRequestReviewConnectionToPageInfoResolver<TParent>;
  totalCount?: PullRequestReviewConnectionToTotalCountResolver<TParent>;
}

export interface PullRequestReviewConnectionToEdgesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestReviewConnectionToNodesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestReviewConnectionToPageInfoResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestReviewConnectionToTotalCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLPullRequestReviewEdgeTypeResolver<TParent = any> {
  cursor?: PullRequestReviewEdgeToCursorResolver<TParent>;
  node?: PullRequestReviewEdgeToNodeResolver<TParent>;
}

export interface PullRequestReviewEdgeToCursorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestReviewEdgeToNodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLPullRequestReviewTypeResolver<TParent = any> {
  author?: PullRequestReviewToAuthorResolver<TParent>;
  authorAssociation?: PullRequestReviewToAuthorAssociationResolver<TParent>;
  body?: PullRequestReviewToBodyResolver<TParent>;
  bodyHTML?: PullRequestReviewToBodyHTMLResolver<TParent>;
  bodyText?: PullRequestReviewToBodyTextResolver<TParent>;
  comments?: PullRequestReviewToCommentsResolver<TParent>;
  commit?: PullRequestReviewToCommitResolver<TParent>;
  createdAt?: PullRequestReviewToCreatedAtResolver<TParent>;
  createdViaEmail?: PullRequestReviewToCreatedViaEmailResolver<TParent>;
  databaseId?: PullRequestReviewToDatabaseIdResolver<TParent>;
  editor?: PullRequestReviewToEditorResolver<TParent>;
  id?: PullRequestReviewToIdResolver<TParent>;
  includesCreatedEdit?: PullRequestReviewToIncludesCreatedEditResolver<TParent>;
  lastEditedAt?: PullRequestReviewToLastEditedAtResolver<TParent>;
  onBehalfOf?: PullRequestReviewToOnBehalfOfResolver<TParent>;
  publishedAt?: PullRequestReviewToPublishedAtResolver<TParent>;
  pullRequest?: PullRequestReviewToPullRequestResolver<TParent>;
  repository?: PullRequestReviewToRepositoryResolver<TParent>;
  resourcePath?: PullRequestReviewToResourcePathResolver<TParent>;
  state?: PullRequestReviewToStateResolver<TParent>;
  submittedAt?: PullRequestReviewToSubmittedAtResolver<TParent>;
  updatedAt?: PullRequestReviewToUpdatedAtResolver<TParent>;
  url?: PullRequestReviewToUrlResolver<TParent>;
  userContentEdits?: PullRequestReviewToUserContentEditsResolver<TParent>;
  viewerCanDelete?: PullRequestReviewToViewerCanDeleteResolver<TParent>;
  viewerCanUpdate?: PullRequestReviewToViewerCanUpdateResolver<TParent>;
  viewerCannotUpdateReasons?: PullRequestReviewToViewerCannotUpdateReasonsResolver<TParent>;
  viewerDidAuthor?: PullRequestReviewToViewerDidAuthorResolver<TParent>;
}

export interface PullRequestReviewToAuthorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestReviewToAuthorAssociationResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestReviewToBodyResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestReviewToBodyHTMLResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestReviewToBodyTextResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestReviewToCommentsArgs {
  after?: string;
  before?: string;
  first?: number;
  last?: number;
}
export interface PullRequestReviewToCommentsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: PullRequestReviewToCommentsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestReviewToCommitResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestReviewToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestReviewToCreatedViaEmailResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestReviewToDatabaseIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestReviewToEditorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestReviewToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestReviewToIncludesCreatedEditResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestReviewToLastEditedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestReviewToOnBehalfOfArgs {
  after?: string;
  before?: string;
  first?: number;
  last?: number;
}
export interface PullRequestReviewToOnBehalfOfResolver<TParent = any, TResult = any> {
  (parent: TParent, args: PullRequestReviewToOnBehalfOfArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestReviewToPublishedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestReviewToPullRequestResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestReviewToRepositoryResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestReviewToResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestReviewToStateResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestReviewToSubmittedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestReviewToUpdatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestReviewToUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestReviewToUserContentEditsArgs {
  after?: string;
  before?: string;
  first?: number;
  last?: number;
}
export interface PullRequestReviewToUserContentEditsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: PullRequestReviewToUserContentEditsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestReviewToViewerCanDeleteResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestReviewToViewerCanUpdateResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestReviewToViewerCannotUpdateReasonsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestReviewToViewerDidAuthorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLPullRequestReviewCommentConnectionTypeResolver<TParent = any> {
  edges?: PullRequestReviewCommentConnectionToEdgesResolver<TParent>;
  nodes?: PullRequestReviewCommentConnectionToNodesResolver<TParent>;
  pageInfo?: PullRequestReviewCommentConnectionToPageInfoResolver<TParent>;
  totalCount?: PullRequestReviewCommentConnectionToTotalCountResolver<TParent>;
}

export interface PullRequestReviewCommentConnectionToEdgesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestReviewCommentConnectionToNodesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestReviewCommentConnectionToPageInfoResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestReviewCommentConnectionToTotalCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLPullRequestReviewCommentEdgeTypeResolver<TParent = any> {
  cursor?: PullRequestReviewCommentEdgeToCursorResolver<TParent>;
  node?: PullRequestReviewCommentEdgeToNodeResolver<TParent>;
}

export interface PullRequestReviewCommentEdgeToCursorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestReviewCommentEdgeToNodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLPullRequestReviewCommentTypeResolver<TParent = any> {
  author?: PullRequestReviewCommentToAuthorResolver<TParent>;
  authorAssociation?: PullRequestReviewCommentToAuthorAssociationResolver<TParent>;
  body?: PullRequestReviewCommentToBodyResolver<TParent>;
  bodyHTML?: PullRequestReviewCommentToBodyHTMLResolver<TParent>;
  bodyText?: PullRequestReviewCommentToBodyTextResolver<TParent>;
  commit?: PullRequestReviewCommentToCommitResolver<TParent>;
  createdAt?: PullRequestReviewCommentToCreatedAtResolver<TParent>;
  createdViaEmail?: PullRequestReviewCommentToCreatedViaEmailResolver<TParent>;
  databaseId?: PullRequestReviewCommentToDatabaseIdResolver<TParent>;
  diffHunk?: PullRequestReviewCommentToDiffHunkResolver<TParent>;
  draftedAt?: PullRequestReviewCommentToDraftedAtResolver<TParent>;
  editor?: PullRequestReviewCommentToEditorResolver<TParent>;
  id?: PullRequestReviewCommentToIdResolver<TParent>;
  includesCreatedEdit?: PullRequestReviewCommentToIncludesCreatedEditResolver<TParent>;
  isMinimized?: PullRequestReviewCommentToIsMinimizedResolver<TParent>;
  lastEditedAt?: PullRequestReviewCommentToLastEditedAtResolver<TParent>;
  minimizedReason?: PullRequestReviewCommentToMinimizedReasonResolver<TParent>;
  originalCommit?: PullRequestReviewCommentToOriginalCommitResolver<TParent>;
  originalPosition?: PullRequestReviewCommentToOriginalPositionResolver<TParent>;
  outdated?: PullRequestReviewCommentToOutdatedResolver<TParent>;
  path?: PullRequestReviewCommentToPathResolver<TParent>;
  position?: PullRequestReviewCommentToPositionResolver<TParent>;
  publishedAt?: PullRequestReviewCommentToPublishedAtResolver<TParent>;
  pullRequest?: PullRequestReviewCommentToPullRequestResolver<TParent>;
  pullRequestReview?: PullRequestReviewCommentToPullRequestReviewResolver<TParent>;
  reactionGroups?: PullRequestReviewCommentToReactionGroupsResolver<TParent>;
  reactions?: PullRequestReviewCommentToReactionsResolver<TParent>;
  replyTo?: PullRequestReviewCommentToReplyToResolver<TParent>;
  repository?: PullRequestReviewCommentToRepositoryResolver<TParent>;
  resourcePath?: PullRequestReviewCommentToResourcePathResolver<TParent>;
  state?: PullRequestReviewCommentToStateResolver<TParent>;
  updatedAt?: PullRequestReviewCommentToUpdatedAtResolver<TParent>;
  url?: PullRequestReviewCommentToUrlResolver<TParent>;
  userContentEdits?: PullRequestReviewCommentToUserContentEditsResolver<TParent>;
  viewerCanDelete?: PullRequestReviewCommentToViewerCanDeleteResolver<TParent>;
  viewerCanMinimize?: PullRequestReviewCommentToViewerCanMinimizeResolver<TParent>;
  viewerCanReact?: PullRequestReviewCommentToViewerCanReactResolver<TParent>;
  viewerCanUpdate?: PullRequestReviewCommentToViewerCanUpdateResolver<TParent>;
  viewerCannotUpdateReasons?: PullRequestReviewCommentToViewerCannotUpdateReasonsResolver<TParent>;
  viewerDidAuthor?: PullRequestReviewCommentToViewerDidAuthorResolver<TParent>;
}

export interface PullRequestReviewCommentToAuthorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestReviewCommentToAuthorAssociationResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestReviewCommentToBodyResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestReviewCommentToBodyHTMLResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestReviewCommentToBodyTextResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestReviewCommentToCommitResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestReviewCommentToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestReviewCommentToCreatedViaEmailResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestReviewCommentToDatabaseIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestReviewCommentToDiffHunkResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestReviewCommentToDraftedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestReviewCommentToEditorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestReviewCommentToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestReviewCommentToIncludesCreatedEditResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestReviewCommentToIsMinimizedResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestReviewCommentToLastEditedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestReviewCommentToMinimizedReasonResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestReviewCommentToOriginalCommitResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestReviewCommentToOriginalPositionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestReviewCommentToOutdatedResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestReviewCommentToPathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestReviewCommentToPositionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestReviewCommentToPublishedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestReviewCommentToPullRequestResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestReviewCommentToPullRequestReviewResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestReviewCommentToReactionGroupsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestReviewCommentToReactionsArgs {
  after?: string;
  before?: string;
  content?: GQLReactionContent;
  first?: number;
  last?: number;
  orderBy?: GQLReactionOrder;
}
export interface PullRequestReviewCommentToReactionsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: PullRequestReviewCommentToReactionsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestReviewCommentToReplyToResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestReviewCommentToRepositoryResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestReviewCommentToResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestReviewCommentToStateResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestReviewCommentToUpdatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestReviewCommentToUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestReviewCommentToUserContentEditsArgs {
  after?: string;
  before?: string;
  first?: number;
  last?: number;
}
export interface PullRequestReviewCommentToUserContentEditsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: PullRequestReviewCommentToUserContentEditsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestReviewCommentToViewerCanDeleteResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestReviewCommentToViewerCanMinimizeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestReviewCommentToViewerCanReactResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestReviewCommentToViewerCanUpdateResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestReviewCommentToViewerCannotUpdateReasonsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestReviewCommentToViewerDidAuthorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLSuggestedReviewerTypeResolver<TParent = any> {
  isAuthor?: SuggestedReviewerToIsAuthorResolver<TParent>;
  isCommenter?: SuggestedReviewerToIsCommenterResolver<TParent>;
  reviewer?: SuggestedReviewerToReviewerResolver<TParent>;
}

export interface SuggestedReviewerToIsAuthorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SuggestedReviewerToIsCommenterResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SuggestedReviewerToReviewerResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLPullRequestTimelineConnectionTypeResolver<TParent = any> {
  edges?: PullRequestTimelineConnectionToEdgesResolver<TParent>;
  nodes?: PullRequestTimelineConnectionToNodesResolver<TParent>;
  pageInfo?: PullRequestTimelineConnectionToPageInfoResolver<TParent>;
  totalCount?: PullRequestTimelineConnectionToTotalCountResolver<TParent>;
}

export interface PullRequestTimelineConnectionToEdgesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestTimelineConnectionToNodesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestTimelineConnectionToPageInfoResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestTimelineConnectionToTotalCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLPullRequestTimelineItemEdgeTypeResolver<TParent = any> {
  cursor?: PullRequestTimelineItemEdgeToCursorResolver<TParent>;
  node?: PullRequestTimelineItemEdgeToNodeResolver<TParent>;
}

export interface PullRequestTimelineItemEdgeToCursorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestTimelineItemEdgeToNodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLPullRequestTimelineItemTypeResolver<TParent = any> {
  (parent: TParent, context: any, info: GraphQLResolveInfo): 'AssignedEvent' | 'BaseRefForcePushedEvent' | 'ClosedEvent' | 'Commit' | 'CommitCommentThread' | 'CrossReferencedEvent' | 'DemilestonedEvent' | 'DeployedEvent' | 'DeploymentEnvironmentChangedEvent' | 'HeadRefDeletedEvent' | 'HeadRefForcePushedEvent' | 'HeadRefRestoredEvent' | 'IssueComment' | 'LabeledEvent' | 'LockedEvent' | 'MergedEvent' | 'MilestonedEvent' | 'PullRequestReview' | 'PullRequestReviewComment' | 'PullRequestReviewThread' | 'ReferencedEvent' | 'RenamedTitleEvent' | 'ReopenedEvent' | 'ReviewDismissedEvent' | 'ReviewRequestRemovedEvent' | 'ReviewRequestedEvent' | 'SubscribedEvent' | 'UnassignedEvent' | 'UnlabeledEvent' | 'UnlockedEvent' | 'UnsubscribedEvent';
}
export interface GQLAssignedEventTypeResolver<TParent = any> {
  actor?: AssignedEventToActorResolver<TParent>;
  assignable?: AssignedEventToAssignableResolver<TParent>;
  createdAt?: AssignedEventToCreatedAtResolver<TParent>;
  id?: AssignedEventToIdResolver<TParent>;
  user?: AssignedEventToUserResolver<TParent>;
}

export interface AssignedEventToActorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AssignedEventToAssignableResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AssignedEventToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AssignedEventToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AssignedEventToUserResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLBaseRefForcePushedEventTypeResolver<TParent = any> {
  actor?: BaseRefForcePushedEventToActorResolver<TParent>;
  afterCommit?: BaseRefForcePushedEventToAfterCommitResolver<TParent>;
  beforeCommit?: BaseRefForcePushedEventToBeforeCommitResolver<TParent>;
  createdAt?: BaseRefForcePushedEventToCreatedAtResolver<TParent>;
  id?: BaseRefForcePushedEventToIdResolver<TParent>;
  pullRequest?: BaseRefForcePushedEventToPullRequestResolver<TParent>;
  ref?: BaseRefForcePushedEventToRefResolver<TParent>;
}

export interface BaseRefForcePushedEventToActorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BaseRefForcePushedEventToAfterCommitResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BaseRefForcePushedEventToBeforeCommitResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BaseRefForcePushedEventToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BaseRefForcePushedEventToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BaseRefForcePushedEventToPullRequestResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BaseRefForcePushedEventToRefResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLClosedEventTypeResolver<TParent = any> {
  actor?: ClosedEventToActorResolver<TParent>;
  closable?: ClosedEventToClosableResolver<TParent>;
  closer?: ClosedEventToCloserResolver<TParent>;
  createdAt?: ClosedEventToCreatedAtResolver<TParent>;
  id?: ClosedEventToIdResolver<TParent>;
  resourcePath?: ClosedEventToResourcePathResolver<TParent>;
  url?: ClosedEventToUrlResolver<TParent>;
}

export interface ClosedEventToActorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ClosedEventToClosableResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ClosedEventToCloserResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ClosedEventToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ClosedEventToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ClosedEventToResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ClosedEventToUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLCloserTypeResolver<TParent = any> {
  (parent: TParent, context: any, info: GraphQLResolveInfo): 'Commit' | 'PullRequest';
}
export interface GQLCommitCommentThreadTypeResolver<TParent = any> {
  comments?: CommitCommentThreadToCommentsResolver<TParent>;
  commit?: CommitCommentThreadToCommitResolver<TParent>;
  id?: CommitCommentThreadToIdResolver<TParent>;
  path?: CommitCommentThreadToPathResolver<TParent>;
  position?: CommitCommentThreadToPositionResolver<TParent>;
  repository?: CommitCommentThreadToRepositoryResolver<TParent>;
}

export interface CommitCommentThreadToCommentsArgs {
  after?: string;
  before?: string;
  first?: number;
  last?: number;
}
export interface CommitCommentThreadToCommentsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: CommitCommentThreadToCommentsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommitCommentThreadToCommitResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommitCommentThreadToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommitCommentThreadToPathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommitCommentThreadToPositionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommitCommentThreadToRepositoryResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLCrossReferencedEventTypeResolver<TParent = any> {
  actor?: CrossReferencedEventToActorResolver<TParent>;
  createdAt?: CrossReferencedEventToCreatedAtResolver<TParent>;
  id?: CrossReferencedEventToIdResolver<TParent>;
  isCrossRepository?: CrossReferencedEventToIsCrossRepositoryResolver<TParent>;
  referencedAt?: CrossReferencedEventToReferencedAtResolver<TParent>;
  resourcePath?: CrossReferencedEventToResourcePathResolver<TParent>;
  source?: CrossReferencedEventToSourceResolver<TParent>;
  target?: CrossReferencedEventToTargetResolver<TParent>;
  url?: CrossReferencedEventToUrlResolver<TParent>;
  willCloseTarget?: CrossReferencedEventToWillCloseTargetResolver<TParent>;
}

export interface CrossReferencedEventToActorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CrossReferencedEventToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CrossReferencedEventToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CrossReferencedEventToIsCrossRepositoryResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CrossReferencedEventToReferencedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CrossReferencedEventToResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CrossReferencedEventToSourceResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CrossReferencedEventToTargetResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CrossReferencedEventToUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CrossReferencedEventToWillCloseTargetResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLReferencedSubjectTypeResolver<TParent = any> {
  (parent: TParent, context: any, info: GraphQLResolveInfo): 'Issue' | 'PullRequest';
}
export interface GQLDemilestonedEventTypeResolver<TParent = any> {
  actor?: DemilestonedEventToActorResolver<TParent>;
  createdAt?: DemilestonedEventToCreatedAtResolver<TParent>;
  id?: DemilestonedEventToIdResolver<TParent>;
  milestoneTitle?: DemilestonedEventToMilestoneTitleResolver<TParent>;
  subject?: DemilestonedEventToSubjectResolver<TParent>;
}

export interface DemilestonedEventToActorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DemilestonedEventToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DemilestonedEventToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DemilestonedEventToMilestoneTitleResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DemilestonedEventToSubjectResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLMilestoneItemTypeResolver<TParent = any> {
  (parent: TParent, context: any, info: GraphQLResolveInfo): 'Issue' | 'PullRequest';
}
export interface GQLDeployedEventTypeResolver<TParent = any> {
  actor?: DeployedEventToActorResolver<TParent>;
  createdAt?: DeployedEventToCreatedAtResolver<TParent>;
  databaseId?: DeployedEventToDatabaseIdResolver<TParent>;
  deployment?: DeployedEventToDeploymentResolver<TParent>;
  id?: DeployedEventToIdResolver<TParent>;
  pullRequest?: DeployedEventToPullRequestResolver<TParent>;
  ref?: DeployedEventToRefResolver<TParent>;
}

export interface DeployedEventToActorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DeployedEventToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DeployedEventToDatabaseIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DeployedEventToDeploymentResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DeployedEventToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DeployedEventToPullRequestResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DeployedEventToRefResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLDeploymentTypeResolver<TParent = any> {
  commit?: DeploymentToCommitResolver<TParent>;
  commitOid?: DeploymentToCommitOidResolver<TParent>;
  createdAt?: DeploymentToCreatedAtResolver<TParent>;
  creator?: DeploymentToCreatorResolver<TParent>;
  databaseId?: DeploymentToDatabaseIdResolver<TParent>;
  description?: DeploymentToDescriptionResolver<TParent>;
  environment?: DeploymentToEnvironmentResolver<TParent>;
  id?: DeploymentToIdResolver<TParent>;
  latestStatus?: DeploymentToLatestStatusResolver<TParent>;
  payload?: DeploymentToPayloadResolver<TParent>;
  ref?: DeploymentToRefResolver<TParent>;
  repository?: DeploymentToRepositoryResolver<TParent>;
  state?: DeploymentToStateResolver<TParent>;
  statuses?: DeploymentToStatusesResolver<TParent>;
  task?: DeploymentToTaskResolver<TParent>;
  updatedAt?: DeploymentToUpdatedAtResolver<TParent>;
}

export interface DeploymentToCommitResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DeploymentToCommitOidResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DeploymentToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DeploymentToCreatorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DeploymentToDatabaseIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DeploymentToDescriptionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DeploymentToEnvironmentResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DeploymentToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DeploymentToLatestStatusResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DeploymentToPayloadResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DeploymentToRefResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DeploymentToRepositoryResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DeploymentToStateResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DeploymentToStatusesArgs {
  after?: string;
  before?: string;
  first?: number;
  last?: number;
}
export interface DeploymentToStatusesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: DeploymentToStatusesArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DeploymentToTaskResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DeploymentToUpdatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLDeploymentStatusTypeResolver<TParent = any> {
  createdAt?: DeploymentStatusToCreatedAtResolver<TParent>;
  creator?: DeploymentStatusToCreatorResolver<TParent>;
  deployment?: DeploymentStatusToDeploymentResolver<TParent>;
  description?: DeploymentStatusToDescriptionResolver<TParent>;
  environmentUrl?: DeploymentStatusToEnvironmentUrlResolver<TParent>;
  id?: DeploymentStatusToIdResolver<TParent>;
  logUrl?: DeploymentStatusToLogUrlResolver<TParent>;
  state?: DeploymentStatusToStateResolver<TParent>;
  updatedAt?: DeploymentStatusToUpdatedAtResolver<TParent>;
}

export interface DeploymentStatusToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DeploymentStatusToCreatorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DeploymentStatusToDeploymentResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DeploymentStatusToDescriptionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DeploymentStatusToEnvironmentUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DeploymentStatusToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DeploymentStatusToLogUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DeploymentStatusToStateResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DeploymentStatusToUpdatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLDeploymentStatusConnectionTypeResolver<TParent = any> {
  edges?: DeploymentStatusConnectionToEdgesResolver<TParent>;
  nodes?: DeploymentStatusConnectionToNodesResolver<TParent>;
  pageInfo?: DeploymentStatusConnectionToPageInfoResolver<TParent>;
  totalCount?: DeploymentStatusConnectionToTotalCountResolver<TParent>;
}

export interface DeploymentStatusConnectionToEdgesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DeploymentStatusConnectionToNodesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DeploymentStatusConnectionToPageInfoResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DeploymentStatusConnectionToTotalCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLDeploymentStatusEdgeTypeResolver<TParent = any> {
  cursor?: DeploymentStatusEdgeToCursorResolver<TParent>;
  node?: DeploymentStatusEdgeToNodeResolver<TParent>;
}

export interface DeploymentStatusEdgeToCursorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DeploymentStatusEdgeToNodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLDeploymentEnvironmentChangedEventTypeResolver<TParent = any> {
  actor?: DeploymentEnvironmentChangedEventToActorResolver<TParent>;
  createdAt?: DeploymentEnvironmentChangedEventToCreatedAtResolver<TParent>;
  deploymentStatus?: DeploymentEnvironmentChangedEventToDeploymentStatusResolver<TParent>;
  id?: DeploymentEnvironmentChangedEventToIdResolver<TParent>;
  pullRequest?: DeploymentEnvironmentChangedEventToPullRequestResolver<TParent>;
}

export interface DeploymentEnvironmentChangedEventToActorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DeploymentEnvironmentChangedEventToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DeploymentEnvironmentChangedEventToDeploymentStatusResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DeploymentEnvironmentChangedEventToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DeploymentEnvironmentChangedEventToPullRequestResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLHeadRefDeletedEventTypeResolver<TParent = any> {
  actor?: HeadRefDeletedEventToActorResolver<TParent>;
  createdAt?: HeadRefDeletedEventToCreatedAtResolver<TParent>;
  headRef?: HeadRefDeletedEventToHeadRefResolver<TParent>;
  headRefName?: HeadRefDeletedEventToHeadRefNameResolver<TParent>;
  id?: HeadRefDeletedEventToIdResolver<TParent>;
  pullRequest?: HeadRefDeletedEventToPullRequestResolver<TParent>;
}

export interface HeadRefDeletedEventToActorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface HeadRefDeletedEventToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface HeadRefDeletedEventToHeadRefResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface HeadRefDeletedEventToHeadRefNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface HeadRefDeletedEventToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface HeadRefDeletedEventToPullRequestResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLHeadRefForcePushedEventTypeResolver<TParent = any> {
  actor?: HeadRefForcePushedEventToActorResolver<TParent>;
  afterCommit?: HeadRefForcePushedEventToAfterCommitResolver<TParent>;
  beforeCommit?: HeadRefForcePushedEventToBeforeCommitResolver<TParent>;
  createdAt?: HeadRefForcePushedEventToCreatedAtResolver<TParent>;
  id?: HeadRefForcePushedEventToIdResolver<TParent>;
  pullRequest?: HeadRefForcePushedEventToPullRequestResolver<TParent>;
  ref?: HeadRefForcePushedEventToRefResolver<TParent>;
}

export interface HeadRefForcePushedEventToActorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface HeadRefForcePushedEventToAfterCommitResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface HeadRefForcePushedEventToBeforeCommitResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface HeadRefForcePushedEventToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface HeadRefForcePushedEventToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface HeadRefForcePushedEventToPullRequestResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface HeadRefForcePushedEventToRefResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLHeadRefRestoredEventTypeResolver<TParent = any> {
  actor?: HeadRefRestoredEventToActorResolver<TParent>;
  createdAt?: HeadRefRestoredEventToCreatedAtResolver<TParent>;
  id?: HeadRefRestoredEventToIdResolver<TParent>;
  pullRequest?: HeadRefRestoredEventToPullRequestResolver<TParent>;
}

export interface HeadRefRestoredEventToActorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface HeadRefRestoredEventToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface HeadRefRestoredEventToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface HeadRefRestoredEventToPullRequestResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLLabeledEventTypeResolver<TParent = any> {
  actor?: LabeledEventToActorResolver<TParent>;
  createdAt?: LabeledEventToCreatedAtResolver<TParent>;
  id?: LabeledEventToIdResolver<TParent>;
  label?: LabeledEventToLabelResolver<TParent>;
  labelable?: LabeledEventToLabelableResolver<TParent>;
}

export interface LabeledEventToActorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface LabeledEventToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface LabeledEventToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface LabeledEventToLabelResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface LabeledEventToLabelableResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLLockedEventTypeResolver<TParent = any> {
  actor?: LockedEventToActorResolver<TParent>;
  createdAt?: LockedEventToCreatedAtResolver<TParent>;
  id?: LockedEventToIdResolver<TParent>;
  lockReason?: LockedEventToLockReasonResolver<TParent>;
  lockable?: LockedEventToLockableResolver<TParent>;
}

export interface LockedEventToActorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface LockedEventToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface LockedEventToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface LockedEventToLockReasonResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface LockedEventToLockableResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLMergedEventTypeResolver<TParent = any> {
  actor?: MergedEventToActorResolver<TParent>;
  commit?: MergedEventToCommitResolver<TParent>;
  createdAt?: MergedEventToCreatedAtResolver<TParent>;
  id?: MergedEventToIdResolver<TParent>;
  mergeRef?: MergedEventToMergeRefResolver<TParent>;
  mergeRefName?: MergedEventToMergeRefNameResolver<TParent>;
  pullRequest?: MergedEventToPullRequestResolver<TParent>;
  resourcePath?: MergedEventToResourcePathResolver<TParent>;
  url?: MergedEventToUrlResolver<TParent>;
}

export interface MergedEventToActorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MergedEventToCommitResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MergedEventToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MergedEventToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MergedEventToMergeRefResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MergedEventToMergeRefNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MergedEventToPullRequestResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MergedEventToResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MergedEventToUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLMilestonedEventTypeResolver<TParent = any> {
  actor?: MilestonedEventToActorResolver<TParent>;
  createdAt?: MilestonedEventToCreatedAtResolver<TParent>;
  id?: MilestonedEventToIdResolver<TParent>;
  milestoneTitle?: MilestonedEventToMilestoneTitleResolver<TParent>;
  subject?: MilestonedEventToSubjectResolver<TParent>;
}

export interface MilestonedEventToActorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MilestonedEventToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MilestonedEventToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MilestonedEventToMilestoneTitleResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MilestonedEventToSubjectResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLPullRequestReviewThreadTypeResolver<TParent = any> {
  comments?: PullRequestReviewThreadToCommentsResolver<TParent>;
  id?: PullRequestReviewThreadToIdResolver<TParent>;
  pullRequest?: PullRequestReviewThreadToPullRequestResolver<TParent>;
  repository?: PullRequestReviewThreadToRepositoryResolver<TParent>;
}

export interface PullRequestReviewThreadToCommentsArgs {
  after?: string;
  before?: string;
  first?: number;
  last?: number;
}
export interface PullRequestReviewThreadToCommentsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: PullRequestReviewThreadToCommentsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestReviewThreadToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestReviewThreadToPullRequestResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestReviewThreadToRepositoryResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLReferencedEventTypeResolver<TParent = any> {
  actor?: ReferencedEventToActorResolver<TParent>;
  commit?: ReferencedEventToCommitResolver<TParent>;
  commitRepository?: ReferencedEventToCommitRepositoryResolver<TParent>;
  createdAt?: ReferencedEventToCreatedAtResolver<TParent>;
  id?: ReferencedEventToIdResolver<TParent>;
  isCrossRepository?: ReferencedEventToIsCrossRepositoryResolver<TParent>;
  isDirectReference?: ReferencedEventToIsDirectReferenceResolver<TParent>;
  subject?: ReferencedEventToSubjectResolver<TParent>;
}

export interface ReferencedEventToActorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReferencedEventToCommitResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReferencedEventToCommitRepositoryResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReferencedEventToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReferencedEventToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReferencedEventToIsCrossRepositoryResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReferencedEventToIsDirectReferenceResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReferencedEventToSubjectResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLRenamedTitleEventTypeResolver<TParent = any> {
  actor?: RenamedTitleEventToActorResolver<TParent>;
  createdAt?: RenamedTitleEventToCreatedAtResolver<TParent>;
  currentTitle?: RenamedTitleEventToCurrentTitleResolver<TParent>;
  id?: RenamedTitleEventToIdResolver<TParent>;
  previousTitle?: RenamedTitleEventToPreviousTitleResolver<TParent>;
  subject?: RenamedTitleEventToSubjectResolver<TParent>;
}

export interface RenamedTitleEventToActorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RenamedTitleEventToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RenamedTitleEventToCurrentTitleResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RenamedTitleEventToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RenamedTitleEventToPreviousTitleResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RenamedTitleEventToSubjectResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLRenamedTitleSubjectTypeResolver<TParent = any> {
  (parent: TParent, context: any, info: GraphQLResolveInfo): 'Issue' | 'PullRequest';
}
export interface GQLReopenedEventTypeResolver<TParent = any> {
  actor?: ReopenedEventToActorResolver<TParent>;
  closable?: ReopenedEventToClosableResolver<TParent>;
  createdAt?: ReopenedEventToCreatedAtResolver<TParent>;
  id?: ReopenedEventToIdResolver<TParent>;
}

export interface ReopenedEventToActorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReopenedEventToClosableResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReopenedEventToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReopenedEventToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLReviewDismissedEventTypeResolver<TParent = any> {
  actor?: ReviewDismissedEventToActorResolver<TParent>;
  createdAt?: ReviewDismissedEventToCreatedAtResolver<TParent>;
  databaseId?: ReviewDismissedEventToDatabaseIdResolver<TParent>;
  id?: ReviewDismissedEventToIdResolver<TParent>;
  message?: ReviewDismissedEventToMessageResolver<TParent>;
  messageHtml?: ReviewDismissedEventToMessageHtmlResolver<TParent>;
  previousReviewState?: ReviewDismissedEventToPreviousReviewStateResolver<TParent>;
  pullRequest?: ReviewDismissedEventToPullRequestResolver<TParent>;
  pullRequestCommit?: ReviewDismissedEventToPullRequestCommitResolver<TParent>;
  resourcePath?: ReviewDismissedEventToResourcePathResolver<TParent>;
  review?: ReviewDismissedEventToReviewResolver<TParent>;
  url?: ReviewDismissedEventToUrlResolver<TParent>;
}

export interface ReviewDismissedEventToActorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReviewDismissedEventToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReviewDismissedEventToDatabaseIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReviewDismissedEventToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReviewDismissedEventToMessageResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReviewDismissedEventToMessageHtmlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReviewDismissedEventToPreviousReviewStateResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReviewDismissedEventToPullRequestResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReviewDismissedEventToPullRequestCommitResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReviewDismissedEventToResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReviewDismissedEventToReviewResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReviewDismissedEventToUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLReviewRequestRemovedEventTypeResolver<TParent = any> {
  actor?: ReviewRequestRemovedEventToActorResolver<TParent>;
  createdAt?: ReviewRequestRemovedEventToCreatedAtResolver<TParent>;
  id?: ReviewRequestRemovedEventToIdResolver<TParent>;
  pullRequest?: ReviewRequestRemovedEventToPullRequestResolver<TParent>;
  requestedReviewer?: ReviewRequestRemovedEventToRequestedReviewerResolver<TParent>;
}

export interface ReviewRequestRemovedEventToActorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReviewRequestRemovedEventToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReviewRequestRemovedEventToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReviewRequestRemovedEventToPullRequestResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReviewRequestRemovedEventToRequestedReviewerResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLReviewRequestedEventTypeResolver<TParent = any> {
  actor?: ReviewRequestedEventToActorResolver<TParent>;
  createdAt?: ReviewRequestedEventToCreatedAtResolver<TParent>;
  id?: ReviewRequestedEventToIdResolver<TParent>;
  pullRequest?: ReviewRequestedEventToPullRequestResolver<TParent>;
  requestedReviewer?: ReviewRequestedEventToRequestedReviewerResolver<TParent>;
}

export interface ReviewRequestedEventToActorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReviewRequestedEventToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReviewRequestedEventToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReviewRequestedEventToPullRequestResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReviewRequestedEventToRequestedReviewerResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLSubscribedEventTypeResolver<TParent = any> {
  actor?: SubscribedEventToActorResolver<TParent>;
  createdAt?: SubscribedEventToCreatedAtResolver<TParent>;
  id?: SubscribedEventToIdResolver<TParent>;
  subscribable?: SubscribedEventToSubscribableResolver<TParent>;
}

export interface SubscribedEventToActorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SubscribedEventToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SubscribedEventToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SubscribedEventToSubscribableResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLUnassignedEventTypeResolver<TParent = any> {
  actor?: UnassignedEventToActorResolver<TParent>;
  assignable?: UnassignedEventToAssignableResolver<TParent>;
  createdAt?: UnassignedEventToCreatedAtResolver<TParent>;
  id?: UnassignedEventToIdResolver<TParent>;
  user?: UnassignedEventToUserResolver<TParent>;
}

export interface UnassignedEventToActorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UnassignedEventToAssignableResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UnassignedEventToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UnassignedEventToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UnassignedEventToUserResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLUnlabeledEventTypeResolver<TParent = any> {
  actor?: UnlabeledEventToActorResolver<TParent>;
  createdAt?: UnlabeledEventToCreatedAtResolver<TParent>;
  id?: UnlabeledEventToIdResolver<TParent>;
  label?: UnlabeledEventToLabelResolver<TParent>;
  labelable?: UnlabeledEventToLabelableResolver<TParent>;
}

export interface UnlabeledEventToActorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UnlabeledEventToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UnlabeledEventToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UnlabeledEventToLabelResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UnlabeledEventToLabelableResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLUnlockedEventTypeResolver<TParent = any> {
  actor?: UnlockedEventToActorResolver<TParent>;
  createdAt?: UnlockedEventToCreatedAtResolver<TParent>;
  id?: UnlockedEventToIdResolver<TParent>;
  lockable?: UnlockedEventToLockableResolver<TParent>;
}

export interface UnlockedEventToActorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UnlockedEventToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UnlockedEventToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UnlockedEventToLockableResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLUnsubscribedEventTypeResolver<TParent = any> {
  actor?: UnsubscribedEventToActorResolver<TParent>;
  createdAt?: UnsubscribedEventToCreatedAtResolver<TParent>;
  id?: UnsubscribedEventToIdResolver<TParent>;
  subscribable?: UnsubscribedEventToSubscribableResolver<TParent>;
}

export interface UnsubscribedEventToActorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UnsubscribedEventToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UnsubscribedEventToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UnsubscribedEventToSubscribableResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLRefConnectionTypeResolver<TParent = any> {
  edges?: RefConnectionToEdgesResolver<TParent>;
  nodes?: RefConnectionToNodesResolver<TParent>;
  pageInfo?: RefConnectionToPageInfoResolver<TParent>;
  totalCount?: RefConnectionToTotalCountResolver<TParent>;
}

export interface RefConnectionToEdgesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RefConnectionToNodesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RefConnectionToPageInfoResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RefConnectionToTotalCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLRefEdgeTypeResolver<TParent = any> {
  cursor?: RefEdgeToCursorResolver<TParent>;
  node?: RefEdgeToNodeResolver<TParent>;
}

export interface RefEdgeToCursorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RefEdgeToNodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLPushAllowanceConnectionTypeResolver<TParent = any> {
  edges?: PushAllowanceConnectionToEdgesResolver<TParent>;
  nodes?: PushAllowanceConnectionToNodesResolver<TParent>;
  pageInfo?: PushAllowanceConnectionToPageInfoResolver<TParent>;
  totalCount?: PushAllowanceConnectionToTotalCountResolver<TParent>;
}

export interface PushAllowanceConnectionToEdgesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PushAllowanceConnectionToNodesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PushAllowanceConnectionToPageInfoResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PushAllowanceConnectionToTotalCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLPushAllowanceEdgeTypeResolver<TParent = any> {
  cursor?: PushAllowanceEdgeToCursorResolver<TParent>;
  node?: PushAllowanceEdgeToNodeResolver<TParent>;
}

export interface PushAllowanceEdgeToCursorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PushAllowanceEdgeToNodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLPushAllowanceTypeResolver<TParent = any> {
  actor?: PushAllowanceToActorResolver<TParent>;
  branchProtectionRule?: PushAllowanceToBranchProtectionRuleResolver<TParent>;
  id?: PushAllowanceToIdResolver<TParent>;
  protectedBranch?: PushAllowanceToProtectedBranchResolver<TParent>;
}

export interface PushAllowanceToActorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PushAllowanceToBranchProtectionRuleResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PushAllowanceToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PushAllowanceToProtectedBranchResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLPushAllowanceActorTypeResolver<TParent = any> {
  (parent: TParent, context: any, info: GraphQLResolveInfo): 'Team' | 'User';
}
export interface GQLProtectedBranchTypeResolver<TParent = any> {
  creator?: ProtectedBranchToCreatorResolver<TParent>;
  hasDismissableStaleReviews?: ProtectedBranchToHasDismissableStaleReviewsResolver<TParent>;
  hasRequiredReviews?: ProtectedBranchToHasRequiredReviewsResolver<TParent>;
  hasRequiredStatusChecks?: ProtectedBranchToHasRequiredStatusChecksResolver<TParent>;
  hasRestrictedPushes?: ProtectedBranchToHasRestrictedPushesResolver<TParent>;
  hasRestrictedReviewDismissals?: ProtectedBranchToHasRestrictedReviewDismissalsResolver<TParent>;
  hasStrictRequiredStatusChecks?: ProtectedBranchToHasStrictRequiredStatusChecksResolver<TParent>;
  id?: ProtectedBranchToIdResolver<TParent>;
  isAdminEnforced?: ProtectedBranchToIsAdminEnforcedResolver<TParent>;
  name?: ProtectedBranchToNameResolver<TParent>;
  pushAllowances?: ProtectedBranchToPushAllowancesResolver<TParent>;
  repository?: ProtectedBranchToRepositoryResolver<TParent>;
  requiredStatusCheckContexts?: ProtectedBranchToRequiredStatusCheckContextsResolver<TParent>;
  reviewDismissalAllowances?: ProtectedBranchToReviewDismissalAllowancesResolver<TParent>;
}

export interface ProtectedBranchToCreatorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProtectedBranchToHasDismissableStaleReviewsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProtectedBranchToHasRequiredReviewsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProtectedBranchToHasRequiredStatusChecksResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProtectedBranchToHasRestrictedPushesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProtectedBranchToHasRestrictedReviewDismissalsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProtectedBranchToHasStrictRequiredStatusChecksResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProtectedBranchToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProtectedBranchToIsAdminEnforcedResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProtectedBranchToNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProtectedBranchToPushAllowancesArgs {
  after?: string;
  before?: string;
  first?: number;
  last?: number;
}
export interface ProtectedBranchToPushAllowancesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: ProtectedBranchToPushAllowancesArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProtectedBranchToRepositoryResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProtectedBranchToRequiredStatusCheckContextsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProtectedBranchToReviewDismissalAllowancesArgs {
  after?: string;
  before?: string;
  first?: number;
  last?: number;
}
export interface ProtectedBranchToReviewDismissalAllowancesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: ProtectedBranchToReviewDismissalAllowancesArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLReviewDismissalAllowanceConnectionTypeResolver<TParent = any> {
  edges?: ReviewDismissalAllowanceConnectionToEdgesResolver<TParent>;
  nodes?: ReviewDismissalAllowanceConnectionToNodesResolver<TParent>;
  pageInfo?: ReviewDismissalAllowanceConnectionToPageInfoResolver<TParent>;
  totalCount?: ReviewDismissalAllowanceConnectionToTotalCountResolver<TParent>;
}

export interface ReviewDismissalAllowanceConnectionToEdgesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReviewDismissalAllowanceConnectionToNodesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReviewDismissalAllowanceConnectionToPageInfoResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReviewDismissalAllowanceConnectionToTotalCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLReviewDismissalAllowanceEdgeTypeResolver<TParent = any> {
  cursor?: ReviewDismissalAllowanceEdgeToCursorResolver<TParent>;
  node?: ReviewDismissalAllowanceEdgeToNodeResolver<TParent>;
}

export interface ReviewDismissalAllowanceEdgeToCursorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReviewDismissalAllowanceEdgeToNodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLReviewDismissalAllowanceTypeResolver<TParent = any> {
  actor?: ReviewDismissalAllowanceToActorResolver<TParent>;
  branchProtectionRule?: ReviewDismissalAllowanceToBranchProtectionRuleResolver<TParent>;
  id?: ReviewDismissalAllowanceToIdResolver<TParent>;
  protectedBranch?: ReviewDismissalAllowanceToProtectedBranchResolver<TParent>;
}

export interface ReviewDismissalAllowanceToActorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReviewDismissalAllowanceToBranchProtectionRuleResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReviewDismissalAllowanceToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReviewDismissalAllowanceToProtectedBranchResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLReviewDismissalAllowanceActorTypeResolver<TParent = any> {
  (parent: TParent, context: any, info: GraphQLResolveInfo): 'Team' | 'User';
}
export interface GQLRepositoryCollaboratorConnectionTypeResolver<TParent = any> {
  edges?: RepositoryCollaboratorConnectionToEdgesResolver<TParent>;
  nodes?: RepositoryCollaboratorConnectionToNodesResolver<TParent>;
  pageInfo?: RepositoryCollaboratorConnectionToPageInfoResolver<TParent>;
  totalCount?: RepositoryCollaboratorConnectionToTotalCountResolver<TParent>;
}

export interface RepositoryCollaboratorConnectionToEdgesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryCollaboratorConnectionToNodesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryCollaboratorConnectionToPageInfoResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryCollaboratorConnectionToTotalCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLRepositoryCollaboratorEdgeTypeResolver<TParent = any> {
  cursor?: RepositoryCollaboratorEdgeToCursorResolver<TParent>;
  node?: RepositoryCollaboratorEdgeToNodeResolver<TParent>;
  permission?: RepositoryCollaboratorEdgeToPermissionResolver<TParent>;
}

export interface RepositoryCollaboratorEdgeToCursorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryCollaboratorEdgeToNodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryCollaboratorEdgeToPermissionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLDeployKeyConnectionTypeResolver<TParent = any> {
  edges?: DeployKeyConnectionToEdgesResolver<TParent>;
  nodes?: DeployKeyConnectionToNodesResolver<TParent>;
  pageInfo?: DeployKeyConnectionToPageInfoResolver<TParent>;
  totalCount?: DeployKeyConnectionToTotalCountResolver<TParent>;
}

export interface DeployKeyConnectionToEdgesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DeployKeyConnectionToNodesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DeployKeyConnectionToPageInfoResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DeployKeyConnectionToTotalCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLDeployKeyEdgeTypeResolver<TParent = any> {
  cursor?: DeployKeyEdgeToCursorResolver<TParent>;
  node?: DeployKeyEdgeToNodeResolver<TParent>;
}

export interface DeployKeyEdgeToCursorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DeployKeyEdgeToNodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLDeployKeyTypeResolver<TParent = any> {
  createdAt?: DeployKeyToCreatedAtResolver<TParent>;
  id?: DeployKeyToIdResolver<TParent>;
  key?: DeployKeyToKeyResolver<TParent>;
  readOnly?: DeployKeyToReadOnlyResolver<TParent>;
  title?: DeployKeyToTitleResolver<TParent>;
  verified?: DeployKeyToVerifiedResolver<TParent>;
}

export interface DeployKeyToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DeployKeyToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DeployKeyToKeyResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DeployKeyToReadOnlyResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DeployKeyToTitleResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DeployKeyToVerifiedResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLDeploymentConnectionTypeResolver<TParent = any> {
  edges?: DeploymentConnectionToEdgesResolver<TParent>;
  nodes?: DeploymentConnectionToNodesResolver<TParent>;
  pageInfo?: DeploymentConnectionToPageInfoResolver<TParent>;
  totalCount?: DeploymentConnectionToTotalCountResolver<TParent>;
}

export interface DeploymentConnectionToEdgesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DeploymentConnectionToNodesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DeploymentConnectionToPageInfoResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DeploymentConnectionToTotalCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLDeploymentEdgeTypeResolver<TParent = any> {
  cursor?: DeploymentEdgeToCursorResolver<TParent>;
  node?: DeploymentEdgeToNodeResolver<TParent>;
}

export interface DeploymentEdgeToCursorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DeploymentEdgeToNodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLIssueOrPullRequestTypeResolver<TParent = any> {
  (parent: TParent, context: any, info: GraphQLResolveInfo): 'Issue' | 'PullRequest';
}
export interface GQLLanguageConnectionTypeResolver<TParent = any> {
  edges?: LanguageConnectionToEdgesResolver<TParent>;
  nodes?: LanguageConnectionToNodesResolver<TParent>;
  pageInfo?: LanguageConnectionToPageInfoResolver<TParent>;
  totalCount?: LanguageConnectionToTotalCountResolver<TParent>;
  totalSize?: LanguageConnectionToTotalSizeResolver<TParent>;
}

export interface LanguageConnectionToEdgesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface LanguageConnectionToNodesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface LanguageConnectionToPageInfoResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface LanguageConnectionToTotalCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface LanguageConnectionToTotalSizeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLLanguageEdgeTypeResolver<TParent = any> {
  cursor?: LanguageEdgeToCursorResolver<TParent>;
  node?: LanguageEdgeToNodeResolver<TParent>;
  size?: LanguageEdgeToSizeResolver<TParent>;
}

export interface LanguageEdgeToCursorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface LanguageEdgeToNodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface LanguageEdgeToSizeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLLanguageTypeResolver<TParent = any> {
  color?: LanguageToColorResolver<TParent>;
  id?: LanguageToIdResolver<TParent>;
  name?: LanguageToNameResolver<TParent>;
}

export interface LanguageToColorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface LanguageToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface LanguageToNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLMilestoneConnectionTypeResolver<TParent = any> {
  edges?: MilestoneConnectionToEdgesResolver<TParent>;
  nodes?: MilestoneConnectionToNodesResolver<TParent>;
  pageInfo?: MilestoneConnectionToPageInfoResolver<TParent>;
  totalCount?: MilestoneConnectionToTotalCountResolver<TParent>;
}

export interface MilestoneConnectionToEdgesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MilestoneConnectionToNodesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MilestoneConnectionToPageInfoResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MilestoneConnectionToTotalCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLMilestoneEdgeTypeResolver<TParent = any> {
  cursor?: MilestoneEdgeToCursorResolver<TParent>;
  node?: MilestoneEdgeToNodeResolver<TParent>;
}

export interface MilestoneEdgeToCursorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MilestoneEdgeToNodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLProjectConnectionTypeResolver<TParent = any> {
  edges?: ProjectConnectionToEdgesResolver<TParent>;
  nodes?: ProjectConnectionToNodesResolver<TParent>;
  pageInfo?: ProjectConnectionToPageInfoResolver<TParent>;
  totalCount?: ProjectConnectionToTotalCountResolver<TParent>;
}

export interface ProjectConnectionToEdgesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProjectConnectionToNodesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProjectConnectionToPageInfoResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProjectConnectionToTotalCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLProjectEdgeTypeResolver<TParent = any> {
  cursor?: ProjectEdgeToCursorResolver<TParent>;
  node?: ProjectEdgeToNodeResolver<TParent>;
}

export interface ProjectEdgeToCursorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProjectEdgeToNodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLProtectedBranchConnectionTypeResolver<TParent = any> {
  edges?: ProtectedBranchConnectionToEdgesResolver<TParent>;
  nodes?: ProtectedBranchConnectionToNodesResolver<TParent>;
  pageInfo?: ProtectedBranchConnectionToPageInfoResolver<TParent>;
  totalCount?: ProtectedBranchConnectionToTotalCountResolver<TParent>;
}

export interface ProtectedBranchConnectionToEdgesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProtectedBranchConnectionToNodesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProtectedBranchConnectionToPageInfoResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProtectedBranchConnectionToTotalCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLProtectedBranchEdgeTypeResolver<TParent = any> {
  cursor?: ProtectedBranchEdgeToCursorResolver<TParent>;
  node?: ProtectedBranchEdgeToNodeResolver<TParent>;
}

export interface ProtectedBranchEdgeToCursorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProtectedBranchEdgeToNodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLReleaseTypeResolver<TParent = any> {
  author?: ReleaseToAuthorResolver<TParent>;
  createdAt?: ReleaseToCreatedAtResolver<TParent>;
  description?: ReleaseToDescriptionResolver<TParent>;
  id?: ReleaseToIdResolver<TParent>;
  isDraft?: ReleaseToIsDraftResolver<TParent>;
  isPrerelease?: ReleaseToIsPrereleaseResolver<TParent>;
  name?: ReleaseToNameResolver<TParent>;
  publishedAt?: ReleaseToPublishedAtResolver<TParent>;
  releaseAssets?: ReleaseToReleaseAssetsResolver<TParent>;
  resourcePath?: ReleaseToResourcePathResolver<TParent>;
  tag?: ReleaseToTagResolver<TParent>;
  updatedAt?: ReleaseToUpdatedAtResolver<TParent>;
  url?: ReleaseToUrlResolver<TParent>;
}

export interface ReleaseToAuthorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReleaseToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReleaseToDescriptionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReleaseToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReleaseToIsDraftResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReleaseToIsPrereleaseResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReleaseToNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReleaseToPublishedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReleaseToReleaseAssetsArgs {
  after?: string;
  before?: string;
  first?: number;
  last?: number;
  name?: string;
}
export interface ReleaseToReleaseAssetsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: ReleaseToReleaseAssetsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReleaseToResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReleaseToTagResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReleaseToUpdatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReleaseToUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLReleaseAssetConnectionTypeResolver<TParent = any> {
  edges?: ReleaseAssetConnectionToEdgesResolver<TParent>;
  nodes?: ReleaseAssetConnectionToNodesResolver<TParent>;
  pageInfo?: ReleaseAssetConnectionToPageInfoResolver<TParent>;
  totalCount?: ReleaseAssetConnectionToTotalCountResolver<TParent>;
}

export interface ReleaseAssetConnectionToEdgesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReleaseAssetConnectionToNodesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReleaseAssetConnectionToPageInfoResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReleaseAssetConnectionToTotalCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLReleaseAssetEdgeTypeResolver<TParent = any> {
  cursor?: ReleaseAssetEdgeToCursorResolver<TParent>;
  node?: ReleaseAssetEdgeToNodeResolver<TParent>;
}

export interface ReleaseAssetEdgeToCursorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReleaseAssetEdgeToNodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLReleaseAssetTypeResolver<TParent = any> {
  contentType?: ReleaseAssetToContentTypeResolver<TParent>;
  createdAt?: ReleaseAssetToCreatedAtResolver<TParent>;
  downloadCount?: ReleaseAssetToDownloadCountResolver<TParent>;
  downloadUrl?: ReleaseAssetToDownloadUrlResolver<TParent>;
  id?: ReleaseAssetToIdResolver<TParent>;
  name?: ReleaseAssetToNameResolver<TParent>;
  release?: ReleaseAssetToReleaseResolver<TParent>;
  size?: ReleaseAssetToSizeResolver<TParent>;
  updatedAt?: ReleaseAssetToUpdatedAtResolver<TParent>;
  uploadedBy?: ReleaseAssetToUploadedByResolver<TParent>;
  url?: ReleaseAssetToUrlResolver<TParent>;
}

export interface ReleaseAssetToContentTypeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReleaseAssetToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReleaseAssetToDownloadCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReleaseAssetToDownloadUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReleaseAssetToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReleaseAssetToNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReleaseAssetToReleaseResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReleaseAssetToSizeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReleaseAssetToUpdatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReleaseAssetToUploadedByResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReleaseAssetToUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLReleaseConnectionTypeResolver<TParent = any> {
  edges?: ReleaseConnectionToEdgesResolver<TParent>;
  nodes?: ReleaseConnectionToNodesResolver<TParent>;
  pageInfo?: ReleaseConnectionToPageInfoResolver<TParent>;
  totalCount?: ReleaseConnectionToTotalCountResolver<TParent>;
}

export interface ReleaseConnectionToEdgesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReleaseConnectionToNodesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReleaseConnectionToPageInfoResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReleaseConnectionToTotalCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLReleaseEdgeTypeResolver<TParent = any> {
  cursor?: ReleaseEdgeToCursorResolver<TParent>;
  node?: ReleaseEdgeToNodeResolver<TParent>;
}

export interface ReleaseEdgeToCursorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReleaseEdgeToNodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLRepositoryTopicConnectionTypeResolver<TParent = any> {
  edges?: RepositoryTopicConnectionToEdgesResolver<TParent>;
  nodes?: RepositoryTopicConnectionToNodesResolver<TParent>;
  pageInfo?: RepositoryTopicConnectionToPageInfoResolver<TParent>;
  totalCount?: RepositoryTopicConnectionToTotalCountResolver<TParent>;
}

export interface RepositoryTopicConnectionToEdgesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryTopicConnectionToNodesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryTopicConnectionToPageInfoResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryTopicConnectionToTotalCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLRepositoryTopicEdgeTypeResolver<TParent = any> {
  cursor?: RepositoryTopicEdgeToCursorResolver<TParent>;
  node?: RepositoryTopicEdgeToNodeResolver<TParent>;
}

export interface RepositoryTopicEdgeToCursorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryTopicEdgeToNodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLRepositoryTopicTypeResolver<TParent = any> {
  id?: RepositoryTopicToIdResolver<TParent>;
  resourcePath?: RepositoryTopicToResourcePathResolver<TParent>;
  topic?: RepositoryTopicToTopicResolver<TParent>;
  url?: RepositoryTopicToUrlResolver<TParent>;
}

export interface RepositoryTopicToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryTopicToResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryTopicToTopicResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryTopicToUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLTopicTypeResolver<TParent = any> {
  id?: TopicToIdResolver<TParent>;
  name?: TopicToNameResolver<TParent>;
  relatedTopics?: TopicToRelatedTopicsResolver<TParent>;
  stargazers?: TopicToStargazersResolver<TParent>;
  viewerHasStarred?: TopicToViewerHasStarredResolver<TParent>;
}

export interface TopicToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TopicToNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TopicToRelatedTopicsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TopicToStargazersArgs {
  after?: string;
  before?: string;
  first?: number;
  last?: number;
  orderBy?: GQLStarOrder;
}
export interface TopicToStargazersResolver<TParent = any, TResult = any> {
  (parent: TParent, args: TopicToStargazersArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TopicToViewerHasStarredResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLFollowerConnectionTypeResolver<TParent = any> {
  edges?: FollowerConnectionToEdgesResolver<TParent>;
  nodes?: FollowerConnectionToNodesResolver<TParent>;
  pageInfo?: FollowerConnectionToPageInfoResolver<TParent>;
  totalCount?: FollowerConnectionToTotalCountResolver<TParent>;
}

export interface FollowerConnectionToEdgesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface FollowerConnectionToNodesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface FollowerConnectionToPageInfoResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface FollowerConnectionToTotalCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLFollowingConnectionTypeResolver<TParent = any> {
  edges?: FollowingConnectionToEdgesResolver<TParent>;
  nodes?: FollowingConnectionToNodesResolver<TParent>;
  pageInfo?: FollowingConnectionToPageInfoResolver<TParent>;
  totalCount?: FollowingConnectionToTotalCountResolver<TParent>;
}

export interface FollowingConnectionToEdgesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface FollowingConnectionToNodesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface FollowingConnectionToPageInfoResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface FollowingConnectionToTotalCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLGistTypeResolver<TParent = any> {
  comments?: GistToCommentsResolver<TParent>;
  createdAt?: GistToCreatedAtResolver<TParent>;
  description?: GistToDescriptionResolver<TParent>;
  id?: GistToIdResolver<TParent>;
  isPublic?: GistToIsPublicResolver<TParent>;
  name?: GistToNameResolver<TParent>;
  owner?: GistToOwnerResolver<TParent>;
  pushedAt?: GistToPushedAtResolver<TParent>;
  stargazers?: GistToStargazersResolver<TParent>;
  updatedAt?: GistToUpdatedAtResolver<TParent>;
  viewerHasStarred?: GistToViewerHasStarredResolver<TParent>;
}

export interface GistToCommentsArgs {
  after?: string;
  before?: string;
  first?: number;
  last?: number;
}
export interface GistToCommentsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: GistToCommentsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GistToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GistToDescriptionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GistToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GistToIsPublicResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GistToNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GistToOwnerResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GistToPushedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GistToStargazersArgs {
  after?: string;
  before?: string;
  first?: number;
  last?: number;
  orderBy?: GQLStarOrder;
}
export interface GistToStargazersResolver<TParent = any, TResult = any> {
  (parent: TParent, args: GistToStargazersArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GistToUpdatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GistToViewerHasStarredResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLGistCommentConnectionTypeResolver<TParent = any> {
  edges?: GistCommentConnectionToEdgesResolver<TParent>;
  nodes?: GistCommentConnectionToNodesResolver<TParent>;
  pageInfo?: GistCommentConnectionToPageInfoResolver<TParent>;
  totalCount?: GistCommentConnectionToTotalCountResolver<TParent>;
}

export interface GistCommentConnectionToEdgesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GistCommentConnectionToNodesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GistCommentConnectionToPageInfoResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GistCommentConnectionToTotalCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLGistCommentEdgeTypeResolver<TParent = any> {
  cursor?: GistCommentEdgeToCursorResolver<TParent>;
  node?: GistCommentEdgeToNodeResolver<TParent>;
}

export interface GistCommentEdgeToCursorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GistCommentEdgeToNodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLGistCommentTypeResolver<TParent = any> {
  author?: GistCommentToAuthorResolver<TParent>;
  authorAssociation?: GistCommentToAuthorAssociationResolver<TParent>;
  body?: GistCommentToBodyResolver<TParent>;
  bodyHTML?: GistCommentToBodyHTMLResolver<TParent>;
  bodyText?: GistCommentToBodyTextResolver<TParent>;
  createdAt?: GistCommentToCreatedAtResolver<TParent>;
  createdViaEmail?: GistCommentToCreatedViaEmailResolver<TParent>;
  databaseId?: GistCommentToDatabaseIdResolver<TParent>;
  editor?: GistCommentToEditorResolver<TParent>;
  gist?: GistCommentToGistResolver<TParent>;
  id?: GistCommentToIdResolver<TParent>;
  includesCreatedEdit?: GistCommentToIncludesCreatedEditResolver<TParent>;
  isMinimized?: GistCommentToIsMinimizedResolver<TParent>;
  lastEditedAt?: GistCommentToLastEditedAtResolver<TParent>;
  minimizedReason?: GistCommentToMinimizedReasonResolver<TParent>;
  publishedAt?: GistCommentToPublishedAtResolver<TParent>;
  updatedAt?: GistCommentToUpdatedAtResolver<TParent>;
  userContentEdits?: GistCommentToUserContentEditsResolver<TParent>;
  viewerCanDelete?: GistCommentToViewerCanDeleteResolver<TParent>;
  viewerCanMinimize?: GistCommentToViewerCanMinimizeResolver<TParent>;
  viewerCanUpdate?: GistCommentToViewerCanUpdateResolver<TParent>;
  viewerCannotUpdateReasons?: GistCommentToViewerCannotUpdateReasonsResolver<TParent>;
  viewerDidAuthor?: GistCommentToViewerDidAuthorResolver<TParent>;
}

export interface GistCommentToAuthorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GistCommentToAuthorAssociationResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GistCommentToBodyResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GistCommentToBodyHTMLResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GistCommentToBodyTextResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GistCommentToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GistCommentToCreatedViaEmailResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GistCommentToDatabaseIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GistCommentToEditorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GistCommentToGistResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GistCommentToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GistCommentToIncludesCreatedEditResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GistCommentToIsMinimizedResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GistCommentToLastEditedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GistCommentToMinimizedReasonResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GistCommentToPublishedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GistCommentToUpdatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GistCommentToUserContentEditsArgs {
  after?: string;
  before?: string;
  first?: number;
  last?: number;
}
export interface GistCommentToUserContentEditsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: GistCommentToUserContentEditsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GistCommentToViewerCanDeleteResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GistCommentToViewerCanMinimizeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GistCommentToViewerCanUpdateResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GistCommentToViewerCannotUpdateReasonsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GistCommentToViewerDidAuthorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLGistConnectionTypeResolver<TParent = any> {
  edges?: GistConnectionToEdgesResolver<TParent>;
  nodes?: GistConnectionToNodesResolver<TParent>;
  pageInfo?: GistConnectionToPageInfoResolver<TParent>;
  totalCount?: GistConnectionToTotalCountResolver<TParent>;
}

export interface GistConnectionToEdgesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GistConnectionToNodesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GistConnectionToPageInfoResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GistConnectionToTotalCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLGistEdgeTypeResolver<TParent = any> {
  cursor?: GistEdgeToCursorResolver<TParent>;
  node?: GistEdgeToNodeResolver<TParent>;
}

export interface GistEdgeToCursorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GistEdgeToNodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLOrganizationConnectionTypeResolver<TParent = any> {
  edges?: OrganizationConnectionToEdgesResolver<TParent>;
  nodes?: OrganizationConnectionToNodesResolver<TParent>;
  pageInfo?: OrganizationConnectionToPageInfoResolver<TParent>;
  totalCount?: OrganizationConnectionToTotalCountResolver<TParent>;
}

export interface OrganizationConnectionToEdgesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrganizationConnectionToNodesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrganizationConnectionToPageInfoResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrganizationConnectionToTotalCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLOrganizationEdgeTypeResolver<TParent = any> {
  cursor?: OrganizationEdgeToCursorResolver<TParent>;
  node?: OrganizationEdgeToNodeResolver<TParent>;
}

export interface OrganizationEdgeToCursorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrganizationEdgeToNodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLPublicKeyConnectionTypeResolver<TParent = any> {
  edges?: PublicKeyConnectionToEdgesResolver<TParent>;
  nodes?: PublicKeyConnectionToNodesResolver<TParent>;
  pageInfo?: PublicKeyConnectionToPageInfoResolver<TParent>;
  totalCount?: PublicKeyConnectionToTotalCountResolver<TParent>;
}

export interface PublicKeyConnectionToEdgesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PublicKeyConnectionToNodesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PublicKeyConnectionToPageInfoResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PublicKeyConnectionToTotalCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLPublicKeyEdgeTypeResolver<TParent = any> {
  cursor?: PublicKeyEdgeToCursorResolver<TParent>;
  node?: PublicKeyEdgeToNodeResolver<TParent>;
}

export interface PublicKeyEdgeToCursorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PublicKeyEdgeToNodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLPublicKeyTypeResolver<TParent = any> {
  id?: PublicKeyToIdResolver<TParent>;
  key?: PublicKeyToKeyResolver<TParent>;
}

export interface PublicKeyToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PublicKeyToKeyResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLStarredRepositoryConnectionTypeResolver<TParent = any> {
  edges?: StarredRepositoryConnectionToEdgesResolver<TParent>;
  nodes?: StarredRepositoryConnectionToNodesResolver<TParent>;
  pageInfo?: StarredRepositoryConnectionToPageInfoResolver<TParent>;
  totalCount?: StarredRepositoryConnectionToTotalCountResolver<TParent>;
}

export interface StarredRepositoryConnectionToEdgesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface StarredRepositoryConnectionToNodesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface StarredRepositoryConnectionToPageInfoResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface StarredRepositoryConnectionToTotalCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLStarredRepositoryEdgeTypeResolver<TParent = any> {
  cursor?: StarredRepositoryEdgeToCursorResolver<TParent>;
  node?: StarredRepositoryEdgeToNodeResolver<TParent>;
  starredAt?: StarredRepositoryEdgeToStarredAtResolver<TParent>;
}

export interface StarredRepositoryEdgeToCursorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface StarredRepositoryEdgeToNodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface StarredRepositoryEdgeToStarredAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLIssueTimelineConnectionTypeResolver<TParent = any> {
  edges?: IssueTimelineConnectionToEdgesResolver<TParent>;
  nodes?: IssueTimelineConnectionToNodesResolver<TParent>;
  pageInfo?: IssueTimelineConnectionToPageInfoResolver<TParent>;
  totalCount?: IssueTimelineConnectionToTotalCountResolver<TParent>;
}

export interface IssueTimelineConnectionToEdgesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IssueTimelineConnectionToNodesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IssueTimelineConnectionToPageInfoResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IssueTimelineConnectionToTotalCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLIssueTimelineItemEdgeTypeResolver<TParent = any> {
  cursor?: IssueTimelineItemEdgeToCursorResolver<TParent>;
  node?: IssueTimelineItemEdgeToNodeResolver<TParent>;
}

export interface IssueTimelineItemEdgeToCursorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IssueTimelineItemEdgeToNodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLIssueTimelineItemTypeResolver<TParent = any> {
  (parent: TParent, context: any, info: GraphQLResolveInfo): 'AssignedEvent' | 'ClosedEvent' | 'Commit' | 'CrossReferencedEvent' | 'DemilestonedEvent' | 'IssueComment' | 'LabeledEvent' | 'LockedEvent' | 'MilestonedEvent' | 'ReferencedEvent' | 'RenamedTitleEvent' | 'ReopenedEvent' | 'SubscribedEvent' | 'TransferredEvent' | 'UnassignedEvent' | 'UnlabeledEvent' | 'UnlockedEvent' | 'UnsubscribedEvent';
}
export interface GQLTransferredEventTypeResolver<TParent = any> {
  actor?: TransferredEventToActorResolver<TParent>;
  createdAt?: TransferredEventToCreatedAtResolver<TParent>;
  fromRepository?: TransferredEventToFromRepositoryResolver<TParent>;
  id?: TransferredEventToIdResolver<TParent>;
  issue?: TransferredEventToIssueResolver<TParent>;
}

export interface TransferredEventToActorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TransferredEventToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TransferredEventToFromRepositoryResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TransferredEventToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TransferredEventToIssueResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLOrganizationIdentityProviderTypeResolver<TParent = any> {
  digestMethod?: OrganizationIdentityProviderToDigestMethodResolver<TParent>;
  externalIdentities?: OrganizationIdentityProviderToExternalIdentitiesResolver<TParent>;
  id?: OrganizationIdentityProviderToIdResolver<TParent>;
  idpCertificate?: OrganizationIdentityProviderToIdpCertificateResolver<TParent>;
  issuer?: OrganizationIdentityProviderToIssuerResolver<TParent>;
  organization?: OrganizationIdentityProviderToOrganizationResolver<TParent>;
  signatureMethod?: OrganizationIdentityProviderToSignatureMethodResolver<TParent>;
  ssoUrl?: OrganizationIdentityProviderToSsoUrlResolver<TParent>;
}

export interface OrganizationIdentityProviderToDigestMethodResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrganizationIdentityProviderToExternalIdentitiesArgs {
  after?: string;
  before?: string;
  first?: number;
  last?: number;
}
export interface OrganizationIdentityProviderToExternalIdentitiesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: OrganizationIdentityProviderToExternalIdentitiesArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrganizationIdentityProviderToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrganizationIdentityProviderToIdpCertificateResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrganizationIdentityProviderToIssuerResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrganizationIdentityProviderToOrganizationResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrganizationIdentityProviderToSignatureMethodResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrganizationIdentityProviderToSsoUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLExternalIdentityConnectionTypeResolver<TParent = any> {
  edges?: ExternalIdentityConnectionToEdgesResolver<TParent>;
  nodes?: ExternalIdentityConnectionToNodesResolver<TParent>;
  pageInfo?: ExternalIdentityConnectionToPageInfoResolver<TParent>;
  totalCount?: ExternalIdentityConnectionToTotalCountResolver<TParent>;
}

export interface ExternalIdentityConnectionToEdgesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ExternalIdentityConnectionToNodesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ExternalIdentityConnectionToPageInfoResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ExternalIdentityConnectionToTotalCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLExternalIdentityEdgeTypeResolver<TParent = any> {
  cursor?: ExternalIdentityEdgeToCursorResolver<TParent>;
  node?: ExternalIdentityEdgeToNodeResolver<TParent>;
}

export interface ExternalIdentityEdgeToCursorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ExternalIdentityEdgeToNodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLExternalIdentityTypeResolver<TParent = any> {
  guid?: ExternalIdentityToGuidResolver<TParent>;
  id?: ExternalIdentityToIdResolver<TParent>;
  organizationInvitation?: ExternalIdentityToOrganizationInvitationResolver<TParent>;
  samlIdentity?: ExternalIdentityToSamlIdentityResolver<TParent>;
  scimIdentity?: ExternalIdentityToScimIdentityResolver<TParent>;
  user?: ExternalIdentityToUserResolver<TParent>;
}

export interface ExternalIdentityToGuidResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ExternalIdentityToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ExternalIdentityToOrganizationInvitationResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ExternalIdentityToSamlIdentityResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ExternalIdentityToScimIdentityResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ExternalIdentityToUserResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLExternalIdentitySamlAttributesTypeResolver<TParent = any> {
  nameId?: ExternalIdentitySamlAttributesToNameIdResolver<TParent>;
}

export interface ExternalIdentitySamlAttributesToNameIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLExternalIdentityScimAttributesTypeResolver<TParent = any> {
  username?: ExternalIdentityScimAttributesToUsernameResolver<TParent>;
}

export interface ExternalIdentityScimAttributesToUsernameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLRateLimitTypeResolver<TParent = any> {
  cost?: RateLimitToCostResolver<TParent>;
  limit?: RateLimitToLimitResolver<TParent>;
  nodeCount?: RateLimitToNodeCountResolver<TParent>;
  remaining?: RateLimitToRemainingResolver<TParent>;
  resetAt?: RateLimitToResetAtResolver<TParent>;
}

export interface RateLimitToCostResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RateLimitToLimitResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RateLimitToNodeCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RateLimitToRemainingResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RateLimitToResetAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLSearchResultItemConnectionTypeResolver<TParent = any> {
  codeCount?: SearchResultItemConnectionToCodeCountResolver<TParent>;
  edges?: SearchResultItemConnectionToEdgesResolver<TParent>;
  issueCount?: SearchResultItemConnectionToIssueCountResolver<TParent>;
  nodes?: SearchResultItemConnectionToNodesResolver<TParent>;
  pageInfo?: SearchResultItemConnectionToPageInfoResolver<TParent>;
  repositoryCount?: SearchResultItemConnectionToRepositoryCountResolver<TParent>;
  userCount?: SearchResultItemConnectionToUserCountResolver<TParent>;
  wikiCount?: SearchResultItemConnectionToWikiCountResolver<TParent>;
}

export interface SearchResultItemConnectionToCodeCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SearchResultItemConnectionToEdgesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SearchResultItemConnectionToIssueCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SearchResultItemConnectionToNodesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SearchResultItemConnectionToPageInfoResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SearchResultItemConnectionToRepositoryCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SearchResultItemConnectionToUserCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SearchResultItemConnectionToWikiCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLSearchResultItemEdgeTypeResolver<TParent = any> {
  cursor?: SearchResultItemEdgeToCursorResolver<TParent>;
  node?: SearchResultItemEdgeToNodeResolver<TParent>;
  textMatches?: SearchResultItemEdgeToTextMatchesResolver<TParent>;
}

export interface SearchResultItemEdgeToCursorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SearchResultItemEdgeToNodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SearchResultItemEdgeToTextMatchesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLSearchResultItemTypeResolver<TParent = any> {
  (parent: TParent, context: any, info: GraphQLResolveInfo): 'Issue' | 'MarketplaceListing' | 'Organization' | 'PullRequest' | 'Repository' | 'User';
}
export interface GQLTextMatchTypeResolver<TParent = any> {
  fragment?: TextMatchToFragmentResolver<TParent>;
  highlights?: TextMatchToHighlightsResolver<TParent>;
  property?: TextMatchToPropertyResolver<TParent>;
}

export interface TextMatchToFragmentResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TextMatchToHighlightsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TextMatchToPropertyResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLTextMatchHighlightTypeResolver<TParent = any> {
  beginIndice?: TextMatchHighlightToBeginIndiceResolver<TParent>;
  endIndice?: TextMatchHighlightToEndIndiceResolver<TParent>;
  text?: TextMatchHighlightToTextResolver<TParent>;
}

export interface TextMatchHighlightToBeginIndiceResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TextMatchHighlightToEndIndiceResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TextMatchHighlightToTextResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLMutationTypeResolver<TParent = any> {
  acceptTopicSuggestion?: MutationToAcceptTopicSuggestionResolver<TParent>;
  addComment?: MutationToAddCommentResolver<TParent>;
  addProjectCard?: MutationToAddProjectCardResolver<TParent>;
  addProjectColumn?: MutationToAddProjectColumnResolver<TParent>;
  addPullRequestReview?: MutationToAddPullRequestReviewResolver<TParent>;
  addPullRequestReviewComment?: MutationToAddPullRequestReviewCommentResolver<TParent>;
  addReaction?: MutationToAddReactionResolver<TParent>;
  addStar?: MutationToAddStarResolver<TParent>;
  createBranchProtectionRule?: MutationToCreateBranchProtectionRuleResolver<TParent>;
  createProject?: MutationToCreateProjectResolver<TParent>;
  declineTopicSuggestion?: MutationToDeclineTopicSuggestionResolver<TParent>;
  deleteBranchProtectionRule?: MutationToDeleteBranchProtectionRuleResolver<TParent>;
  deleteProject?: MutationToDeleteProjectResolver<TParent>;
  deleteProjectCard?: MutationToDeleteProjectCardResolver<TParent>;
  deleteProjectColumn?: MutationToDeleteProjectColumnResolver<TParent>;
  deletePullRequestReview?: MutationToDeletePullRequestReviewResolver<TParent>;
  dismissPullRequestReview?: MutationToDismissPullRequestReviewResolver<TParent>;
  lockLockable?: MutationToLockLockableResolver<TParent>;
  moveProjectCard?: MutationToMoveProjectCardResolver<TParent>;
  moveProjectColumn?: MutationToMoveProjectColumnResolver<TParent>;
  removeOutsideCollaborator?: MutationToRemoveOutsideCollaboratorResolver<TParent>;
  removeReaction?: MutationToRemoveReactionResolver<TParent>;
  removeStar?: MutationToRemoveStarResolver<TParent>;
  requestReviews?: MutationToRequestReviewsResolver<TParent>;
  submitPullRequestReview?: MutationToSubmitPullRequestReviewResolver<TParent>;
  unlockLockable?: MutationToUnlockLockableResolver<TParent>;
  updateBranchProtectionRule?: MutationToUpdateBranchProtectionRuleResolver<TParent>;
  updateProject?: MutationToUpdateProjectResolver<TParent>;
  updateProjectCard?: MutationToUpdateProjectCardResolver<TParent>;
  updateProjectColumn?: MutationToUpdateProjectColumnResolver<TParent>;
  updatePullRequestReview?: MutationToUpdatePullRequestReviewResolver<TParent>;
  updatePullRequestReviewComment?: MutationToUpdatePullRequestReviewCommentResolver<TParent>;
  updateSubscription?: MutationToUpdateSubscriptionResolver<TParent>;
  updateTopics?: MutationToUpdateTopicsResolver<TParent>;
}

export interface MutationToAcceptTopicSuggestionArgs {
  input: GQLAcceptTopicSuggestionInput;
}
export interface MutationToAcceptTopicSuggestionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToAcceptTopicSuggestionArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToAddCommentArgs {
  input: GQLAddCommentInput;
}
export interface MutationToAddCommentResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToAddCommentArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToAddProjectCardArgs {
  input: GQLAddProjectCardInput;
}
export interface MutationToAddProjectCardResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToAddProjectCardArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToAddProjectColumnArgs {
  input: GQLAddProjectColumnInput;
}
export interface MutationToAddProjectColumnResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToAddProjectColumnArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToAddPullRequestReviewArgs {
  input: GQLAddPullRequestReviewInput;
}
export interface MutationToAddPullRequestReviewResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToAddPullRequestReviewArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToAddPullRequestReviewCommentArgs {
  input: GQLAddPullRequestReviewCommentInput;
}
export interface MutationToAddPullRequestReviewCommentResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToAddPullRequestReviewCommentArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToAddReactionArgs {
  input: GQLAddReactionInput;
}
export interface MutationToAddReactionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToAddReactionArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToAddStarArgs {
  input: GQLAddStarInput;
}
export interface MutationToAddStarResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToAddStarArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToCreateBranchProtectionRuleArgs {
  input: GQLCreateBranchProtectionRuleInput;
}
export interface MutationToCreateBranchProtectionRuleResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToCreateBranchProtectionRuleArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToCreateProjectArgs {
  input: GQLCreateProjectInput;
}
export interface MutationToCreateProjectResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToCreateProjectArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToDeclineTopicSuggestionArgs {
  input: GQLDeclineTopicSuggestionInput;
}
export interface MutationToDeclineTopicSuggestionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToDeclineTopicSuggestionArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToDeleteBranchProtectionRuleArgs {
  input: GQLDeleteBranchProtectionRuleInput;
}
export interface MutationToDeleteBranchProtectionRuleResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToDeleteBranchProtectionRuleArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToDeleteProjectArgs {
  input: GQLDeleteProjectInput;
}
export interface MutationToDeleteProjectResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToDeleteProjectArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToDeleteProjectCardArgs {
  input: GQLDeleteProjectCardInput;
}
export interface MutationToDeleteProjectCardResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToDeleteProjectCardArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToDeleteProjectColumnArgs {
  input: GQLDeleteProjectColumnInput;
}
export interface MutationToDeleteProjectColumnResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToDeleteProjectColumnArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToDeletePullRequestReviewArgs {
  input: GQLDeletePullRequestReviewInput;
}
export interface MutationToDeletePullRequestReviewResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToDeletePullRequestReviewArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToDismissPullRequestReviewArgs {
  input: GQLDismissPullRequestReviewInput;
}
export interface MutationToDismissPullRequestReviewResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToDismissPullRequestReviewArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToLockLockableArgs {
  input: GQLLockLockableInput;
}
export interface MutationToLockLockableResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToLockLockableArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToMoveProjectCardArgs {
  input: GQLMoveProjectCardInput;
}
export interface MutationToMoveProjectCardResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToMoveProjectCardArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToMoveProjectColumnArgs {
  input: GQLMoveProjectColumnInput;
}
export interface MutationToMoveProjectColumnResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToMoveProjectColumnArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToRemoveOutsideCollaboratorArgs {
  input: GQLRemoveOutsideCollaboratorInput;
}
export interface MutationToRemoveOutsideCollaboratorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToRemoveOutsideCollaboratorArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToRemoveReactionArgs {
  input: GQLRemoveReactionInput;
}
export interface MutationToRemoveReactionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToRemoveReactionArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToRemoveStarArgs {
  input: GQLRemoveStarInput;
}
export interface MutationToRemoveStarResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToRemoveStarArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToRequestReviewsArgs {
  input: GQLRequestReviewsInput;
}
export interface MutationToRequestReviewsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToRequestReviewsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToSubmitPullRequestReviewArgs {
  input: GQLSubmitPullRequestReviewInput;
}
export interface MutationToSubmitPullRequestReviewResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToSubmitPullRequestReviewArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToUnlockLockableArgs {
  input: GQLUnlockLockableInput;
}
export interface MutationToUnlockLockableResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToUnlockLockableArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToUpdateBranchProtectionRuleArgs {
  input: GQLUpdateBranchProtectionRuleInput;
}
export interface MutationToUpdateBranchProtectionRuleResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToUpdateBranchProtectionRuleArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToUpdateProjectArgs {
  input: GQLUpdateProjectInput;
}
export interface MutationToUpdateProjectResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToUpdateProjectArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToUpdateProjectCardArgs {
  input: GQLUpdateProjectCardInput;
}
export interface MutationToUpdateProjectCardResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToUpdateProjectCardArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToUpdateProjectColumnArgs {
  input: GQLUpdateProjectColumnInput;
}
export interface MutationToUpdateProjectColumnResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToUpdateProjectColumnArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToUpdatePullRequestReviewArgs {
  input: GQLUpdatePullRequestReviewInput;
}
export interface MutationToUpdatePullRequestReviewResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToUpdatePullRequestReviewArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToUpdatePullRequestReviewCommentArgs {
  input: GQLUpdatePullRequestReviewCommentInput;
}
export interface MutationToUpdatePullRequestReviewCommentResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToUpdatePullRequestReviewCommentArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToUpdateSubscriptionArgs {
  input: GQLUpdateSubscriptionInput;
}
export interface MutationToUpdateSubscriptionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToUpdateSubscriptionArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToUpdateTopicsArgs {
  input: GQLUpdateTopicsInput;
}
export interface MutationToUpdateTopicsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToUpdateTopicsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLAcceptTopicSuggestionPayloadTypeResolver<TParent = any> {
  clientMutationId?: AcceptTopicSuggestionPayloadToClientMutationIdResolver<TParent>;
  topic?: AcceptTopicSuggestionPayloadToTopicResolver<TParent>;
}

export interface AcceptTopicSuggestionPayloadToClientMutationIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AcceptTopicSuggestionPayloadToTopicResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLAddCommentPayloadTypeResolver<TParent = any> {
  clientMutationId?: AddCommentPayloadToClientMutationIdResolver<TParent>;
  commentEdge?: AddCommentPayloadToCommentEdgeResolver<TParent>;
  subject?: AddCommentPayloadToSubjectResolver<TParent>;
  timelineEdge?: AddCommentPayloadToTimelineEdgeResolver<TParent>;
}

export interface AddCommentPayloadToClientMutationIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AddCommentPayloadToCommentEdgeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AddCommentPayloadToSubjectResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AddCommentPayloadToTimelineEdgeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLAddProjectCardPayloadTypeResolver<TParent = any> {
  cardEdge?: AddProjectCardPayloadToCardEdgeResolver<TParent>;
  clientMutationId?: AddProjectCardPayloadToClientMutationIdResolver<TParent>;
  projectColumn?: AddProjectCardPayloadToProjectColumnResolver<TParent>;
}

export interface AddProjectCardPayloadToCardEdgeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AddProjectCardPayloadToClientMutationIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AddProjectCardPayloadToProjectColumnResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLAddProjectColumnPayloadTypeResolver<TParent = any> {
  clientMutationId?: AddProjectColumnPayloadToClientMutationIdResolver<TParent>;
  columnEdge?: AddProjectColumnPayloadToColumnEdgeResolver<TParent>;
  project?: AddProjectColumnPayloadToProjectResolver<TParent>;
}

export interface AddProjectColumnPayloadToClientMutationIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AddProjectColumnPayloadToColumnEdgeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AddProjectColumnPayloadToProjectResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLAddPullRequestReviewPayloadTypeResolver<TParent = any> {
  clientMutationId?: AddPullRequestReviewPayloadToClientMutationIdResolver<TParent>;
  pullRequestReview?: AddPullRequestReviewPayloadToPullRequestReviewResolver<TParent>;
  reviewEdge?: AddPullRequestReviewPayloadToReviewEdgeResolver<TParent>;
}

export interface AddPullRequestReviewPayloadToClientMutationIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AddPullRequestReviewPayloadToPullRequestReviewResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AddPullRequestReviewPayloadToReviewEdgeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLAddPullRequestReviewCommentPayloadTypeResolver<TParent = any> {
  clientMutationId?: AddPullRequestReviewCommentPayloadToClientMutationIdResolver<TParent>;
  comment?: AddPullRequestReviewCommentPayloadToCommentResolver<TParent>;
  commentEdge?: AddPullRequestReviewCommentPayloadToCommentEdgeResolver<TParent>;
}

export interface AddPullRequestReviewCommentPayloadToClientMutationIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AddPullRequestReviewCommentPayloadToCommentResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AddPullRequestReviewCommentPayloadToCommentEdgeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLAddReactionPayloadTypeResolver<TParent = any> {
  clientMutationId?: AddReactionPayloadToClientMutationIdResolver<TParent>;
  reaction?: AddReactionPayloadToReactionResolver<TParent>;
  subject?: AddReactionPayloadToSubjectResolver<TParent>;
}

export interface AddReactionPayloadToClientMutationIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AddReactionPayloadToReactionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AddReactionPayloadToSubjectResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLAddStarPayloadTypeResolver<TParent = any> {
  clientMutationId?: AddStarPayloadToClientMutationIdResolver<TParent>;
  starrable?: AddStarPayloadToStarrableResolver<TParent>;
}

export interface AddStarPayloadToClientMutationIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AddStarPayloadToStarrableResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLCreateBranchProtectionRulePayloadTypeResolver<TParent = any> {
  branchProtectionRule?: CreateBranchProtectionRulePayloadToBranchProtectionRuleResolver<TParent>;
  clientMutationId?: CreateBranchProtectionRulePayloadToClientMutationIdResolver<TParent>;
}

export interface CreateBranchProtectionRulePayloadToBranchProtectionRuleResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CreateBranchProtectionRulePayloadToClientMutationIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLCreateProjectPayloadTypeResolver<TParent = any> {
  clientMutationId?: CreateProjectPayloadToClientMutationIdResolver<TParent>;
  project?: CreateProjectPayloadToProjectResolver<TParent>;
}

export interface CreateProjectPayloadToClientMutationIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CreateProjectPayloadToProjectResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLDeclineTopicSuggestionPayloadTypeResolver<TParent = any> {
  clientMutationId?: DeclineTopicSuggestionPayloadToClientMutationIdResolver<TParent>;
  topic?: DeclineTopicSuggestionPayloadToTopicResolver<TParent>;
}

export interface DeclineTopicSuggestionPayloadToClientMutationIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DeclineTopicSuggestionPayloadToTopicResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLDeleteBranchProtectionRulePayloadTypeResolver<TParent = any> {
  clientMutationId?: DeleteBranchProtectionRulePayloadToClientMutationIdResolver<TParent>;
}

export interface DeleteBranchProtectionRulePayloadToClientMutationIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLDeleteProjectPayloadTypeResolver<TParent = any> {
  clientMutationId?: DeleteProjectPayloadToClientMutationIdResolver<TParent>;
  owner?: DeleteProjectPayloadToOwnerResolver<TParent>;
}

export interface DeleteProjectPayloadToClientMutationIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DeleteProjectPayloadToOwnerResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLDeleteProjectCardPayloadTypeResolver<TParent = any> {
  clientMutationId?: DeleteProjectCardPayloadToClientMutationIdResolver<TParent>;
  column?: DeleteProjectCardPayloadToColumnResolver<TParent>;
  deletedCardId?: DeleteProjectCardPayloadToDeletedCardIdResolver<TParent>;
}

export interface DeleteProjectCardPayloadToClientMutationIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DeleteProjectCardPayloadToColumnResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DeleteProjectCardPayloadToDeletedCardIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLDeleteProjectColumnPayloadTypeResolver<TParent = any> {
  clientMutationId?: DeleteProjectColumnPayloadToClientMutationIdResolver<TParent>;
  deletedColumnId?: DeleteProjectColumnPayloadToDeletedColumnIdResolver<TParent>;
  project?: DeleteProjectColumnPayloadToProjectResolver<TParent>;
}

export interface DeleteProjectColumnPayloadToClientMutationIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DeleteProjectColumnPayloadToDeletedColumnIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DeleteProjectColumnPayloadToProjectResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLDeletePullRequestReviewPayloadTypeResolver<TParent = any> {
  clientMutationId?: DeletePullRequestReviewPayloadToClientMutationIdResolver<TParent>;
  pullRequestReview?: DeletePullRequestReviewPayloadToPullRequestReviewResolver<TParent>;
}

export interface DeletePullRequestReviewPayloadToClientMutationIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DeletePullRequestReviewPayloadToPullRequestReviewResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLDismissPullRequestReviewPayloadTypeResolver<TParent = any> {
  clientMutationId?: DismissPullRequestReviewPayloadToClientMutationIdResolver<TParent>;
  pullRequestReview?: DismissPullRequestReviewPayloadToPullRequestReviewResolver<TParent>;
}

export interface DismissPullRequestReviewPayloadToClientMutationIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DismissPullRequestReviewPayloadToPullRequestReviewResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLLockLockablePayloadTypeResolver<TParent = any> {
  clientMutationId?: LockLockablePayloadToClientMutationIdResolver<TParent>;
  lockedRecord?: LockLockablePayloadToLockedRecordResolver<TParent>;
}

export interface LockLockablePayloadToClientMutationIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface LockLockablePayloadToLockedRecordResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLMoveProjectCardPayloadTypeResolver<TParent = any> {
  cardEdge?: MoveProjectCardPayloadToCardEdgeResolver<TParent>;
  clientMutationId?: MoveProjectCardPayloadToClientMutationIdResolver<TParent>;
}

export interface MoveProjectCardPayloadToCardEdgeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MoveProjectCardPayloadToClientMutationIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLMoveProjectColumnPayloadTypeResolver<TParent = any> {
  clientMutationId?: MoveProjectColumnPayloadToClientMutationIdResolver<TParent>;
  columnEdge?: MoveProjectColumnPayloadToColumnEdgeResolver<TParent>;
}

export interface MoveProjectColumnPayloadToClientMutationIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MoveProjectColumnPayloadToColumnEdgeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLRemoveOutsideCollaboratorPayloadTypeResolver<TParent = any> {
  clientMutationId?: RemoveOutsideCollaboratorPayloadToClientMutationIdResolver<TParent>;
  removedUser?: RemoveOutsideCollaboratorPayloadToRemovedUserResolver<TParent>;
}

export interface RemoveOutsideCollaboratorPayloadToClientMutationIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RemoveOutsideCollaboratorPayloadToRemovedUserResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLRemoveReactionPayloadTypeResolver<TParent = any> {
  clientMutationId?: RemoveReactionPayloadToClientMutationIdResolver<TParent>;
  reaction?: RemoveReactionPayloadToReactionResolver<TParent>;
  subject?: RemoveReactionPayloadToSubjectResolver<TParent>;
}

export interface RemoveReactionPayloadToClientMutationIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RemoveReactionPayloadToReactionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RemoveReactionPayloadToSubjectResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLRemoveStarPayloadTypeResolver<TParent = any> {
  clientMutationId?: RemoveStarPayloadToClientMutationIdResolver<TParent>;
  starrable?: RemoveStarPayloadToStarrableResolver<TParent>;
}

export interface RemoveStarPayloadToClientMutationIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RemoveStarPayloadToStarrableResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLRequestReviewsPayloadTypeResolver<TParent = any> {
  clientMutationId?: RequestReviewsPayloadToClientMutationIdResolver<TParent>;
  pullRequest?: RequestReviewsPayloadToPullRequestResolver<TParent>;
  requestedReviewersEdge?: RequestReviewsPayloadToRequestedReviewersEdgeResolver<TParent>;
}

export interface RequestReviewsPayloadToClientMutationIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RequestReviewsPayloadToPullRequestResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RequestReviewsPayloadToRequestedReviewersEdgeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLSubmitPullRequestReviewPayloadTypeResolver<TParent = any> {
  clientMutationId?: SubmitPullRequestReviewPayloadToClientMutationIdResolver<TParent>;
  pullRequestReview?: SubmitPullRequestReviewPayloadToPullRequestReviewResolver<TParent>;
}

export interface SubmitPullRequestReviewPayloadToClientMutationIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SubmitPullRequestReviewPayloadToPullRequestReviewResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLUnlockLockablePayloadTypeResolver<TParent = any> {
  clientMutationId?: UnlockLockablePayloadToClientMutationIdResolver<TParent>;
  unlockedRecord?: UnlockLockablePayloadToUnlockedRecordResolver<TParent>;
}

export interface UnlockLockablePayloadToClientMutationIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UnlockLockablePayloadToUnlockedRecordResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLUpdateBranchProtectionRulePayloadTypeResolver<TParent = any> {
  branchProtectionRule?: UpdateBranchProtectionRulePayloadToBranchProtectionRuleResolver<TParent>;
  clientMutationId?: UpdateBranchProtectionRulePayloadToClientMutationIdResolver<TParent>;
}

export interface UpdateBranchProtectionRulePayloadToBranchProtectionRuleResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UpdateBranchProtectionRulePayloadToClientMutationIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLUpdateProjectPayloadTypeResolver<TParent = any> {
  clientMutationId?: UpdateProjectPayloadToClientMutationIdResolver<TParent>;
  project?: UpdateProjectPayloadToProjectResolver<TParent>;
}

export interface UpdateProjectPayloadToClientMutationIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UpdateProjectPayloadToProjectResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLUpdateProjectCardPayloadTypeResolver<TParent = any> {
  clientMutationId?: UpdateProjectCardPayloadToClientMutationIdResolver<TParent>;
  projectCard?: UpdateProjectCardPayloadToProjectCardResolver<TParent>;
}

export interface UpdateProjectCardPayloadToClientMutationIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UpdateProjectCardPayloadToProjectCardResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLUpdateProjectColumnPayloadTypeResolver<TParent = any> {
  clientMutationId?: UpdateProjectColumnPayloadToClientMutationIdResolver<TParent>;
  projectColumn?: UpdateProjectColumnPayloadToProjectColumnResolver<TParent>;
}

export interface UpdateProjectColumnPayloadToClientMutationIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UpdateProjectColumnPayloadToProjectColumnResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLUpdatePullRequestReviewPayloadTypeResolver<TParent = any> {
  clientMutationId?: UpdatePullRequestReviewPayloadToClientMutationIdResolver<TParent>;
  pullRequestReview?: UpdatePullRequestReviewPayloadToPullRequestReviewResolver<TParent>;
}

export interface UpdatePullRequestReviewPayloadToClientMutationIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UpdatePullRequestReviewPayloadToPullRequestReviewResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLUpdatePullRequestReviewCommentPayloadTypeResolver<TParent = any> {
  clientMutationId?: UpdatePullRequestReviewCommentPayloadToClientMutationIdResolver<TParent>;
  pullRequestReviewComment?: UpdatePullRequestReviewCommentPayloadToPullRequestReviewCommentResolver<TParent>;
}

export interface UpdatePullRequestReviewCommentPayloadToClientMutationIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UpdatePullRequestReviewCommentPayloadToPullRequestReviewCommentResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLUpdateSubscriptionPayloadTypeResolver<TParent = any> {
  clientMutationId?: UpdateSubscriptionPayloadToClientMutationIdResolver<TParent>;
  subscribable?: UpdateSubscriptionPayloadToSubscribableResolver<TParent>;
}

export interface UpdateSubscriptionPayloadToClientMutationIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UpdateSubscriptionPayloadToSubscribableResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLUpdateTopicsPayloadTypeResolver<TParent = any> {
  clientMutationId?: UpdateTopicsPayloadToClientMutationIdResolver<TParent>;
  invalidTopicNames?: UpdateTopicsPayloadToInvalidTopicNamesResolver<TParent>;
  repository?: UpdateTopicsPayloadToRepositoryResolver<TParent>;
}

export interface UpdateTopicsPayloadToClientMutationIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UpdateTopicsPayloadToInvalidTopicNamesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UpdateTopicsPayloadToRepositoryResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLAddedToProjectEventTypeResolver<TParent = any> {
  actor?: AddedToProjectEventToActorResolver<TParent>;
  createdAt?: AddedToProjectEventToCreatedAtResolver<TParent>;
  databaseId?: AddedToProjectEventToDatabaseIdResolver<TParent>;
  id?: AddedToProjectEventToIdResolver<TParent>;
}

export interface AddedToProjectEventToActorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AddedToProjectEventToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AddedToProjectEventToDatabaseIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AddedToProjectEventToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLAppEdgeTypeResolver<TParent = any> {
  cursor?: AppEdgeToCursorResolver<TParent>;
  node?: AppEdgeToNodeResolver<TParent>;
}

export interface AppEdgeToCursorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AppEdgeToNodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLBaseRefChangedEventTypeResolver<TParent = any> {
  actor?: BaseRefChangedEventToActorResolver<TParent>;
  createdAt?: BaseRefChangedEventToCreatedAtResolver<TParent>;
  databaseId?: BaseRefChangedEventToDatabaseIdResolver<TParent>;
  id?: BaseRefChangedEventToIdResolver<TParent>;
}

export interface BaseRefChangedEventToActorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BaseRefChangedEventToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BaseRefChangedEventToDatabaseIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BaseRefChangedEventToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLBlobTypeResolver<TParent = any> {
  abbreviatedOid?: BlobToAbbreviatedOidResolver<TParent>;
  byteSize?: BlobToByteSizeResolver<TParent>;
  commitResourcePath?: BlobToCommitResourcePathResolver<TParent>;
  commitUrl?: BlobToCommitUrlResolver<TParent>;
  id?: BlobToIdResolver<TParent>;
  isBinary?: BlobToIsBinaryResolver<TParent>;
  isTruncated?: BlobToIsTruncatedResolver<TParent>;
  oid?: BlobToOidResolver<TParent>;
  repository?: BlobToRepositoryResolver<TParent>;
  text?: BlobToTextResolver<TParent>;
}

export interface BlobToAbbreviatedOidResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BlobToByteSizeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BlobToCommitResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BlobToCommitUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BlobToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BlobToIsBinaryResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BlobToIsTruncatedResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BlobToOidResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BlobToRepositoryResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BlobToTextResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLBotTypeResolver<TParent = any> {
  avatarUrl?: BotToAvatarUrlResolver<TParent>;
  createdAt?: BotToCreatedAtResolver<TParent>;
  databaseId?: BotToDatabaseIdResolver<TParent>;
  id?: BotToIdResolver<TParent>;
  login?: BotToLoginResolver<TParent>;
  resourcePath?: BotToResourcePathResolver<TParent>;
  updatedAt?: BotToUpdatedAtResolver<TParent>;
  url?: BotToUrlResolver<TParent>;
}

export interface BotToAvatarUrlArgs {
  size?: number;
}
export interface BotToAvatarUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: BotToAvatarUrlArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BotToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BotToDatabaseIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BotToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BotToLoginResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BotToResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BotToUpdatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BotToUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLCollectionItemContentTypeResolver<TParent = any> {
  (parent: TParent, context: any, info: GraphQLResolveInfo): 'Organization' | 'Repository' | 'User';
}
export interface GQLCommentDeletedEventTypeResolver<TParent = any> {
  actor?: CommentDeletedEventToActorResolver<TParent>;
  createdAt?: CommentDeletedEventToCreatedAtResolver<TParent>;
  databaseId?: CommentDeletedEventToDatabaseIdResolver<TParent>;
  id?: CommentDeletedEventToIdResolver<TParent>;
}

export interface CommentDeletedEventToActorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommentDeletedEventToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommentDeletedEventToDatabaseIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommentDeletedEventToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLConvertedNoteToIssueEventTypeResolver<TParent = any> {
  actor?: ConvertedNoteToIssueEventToActorResolver<TParent>;
  createdAt?: ConvertedNoteToIssueEventToCreatedAtResolver<TParent>;
  databaseId?: ConvertedNoteToIssueEventToDatabaseIdResolver<TParent>;
  id?: ConvertedNoteToIssueEventToIdResolver<TParent>;
}

export interface ConvertedNoteToIssueEventToActorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ConvertedNoteToIssueEventToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ConvertedNoteToIssueEventToDatabaseIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ConvertedNoteToIssueEventToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLGpgSignatureTypeResolver<TParent = any> {
  email?: GpgSignatureToEmailResolver<TParent>;
  isValid?: GpgSignatureToIsValidResolver<TParent>;
  keyId?: GpgSignatureToKeyIdResolver<TParent>;
  payload?: GpgSignatureToPayloadResolver<TParent>;
  signature?: GpgSignatureToSignatureResolver<TParent>;
  signer?: GpgSignatureToSignerResolver<TParent>;
  state?: GpgSignatureToStateResolver<TParent>;
  wasSignedByGitHub?: GpgSignatureToWasSignedByGitHubResolver<TParent>;
}

export interface GpgSignatureToEmailResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GpgSignatureToIsValidResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GpgSignatureToKeyIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GpgSignatureToPayloadResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GpgSignatureToSignatureResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GpgSignatureToSignerResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GpgSignatureToStateResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GpgSignatureToWasSignedByGitHubResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLIssueTimelineItemsTypeResolver<TParent = any> {
  (parent: TParent, context: any, info: GraphQLResolveInfo): 'AddedToProjectEvent' | 'AssignedEvent' | 'ClosedEvent' | 'CommentDeletedEvent' | 'ConvertedNoteToIssueEvent' | 'CrossReferencedEvent' | 'DemilestonedEvent' | 'IssueComment' | 'LabeledEvent' | 'LockedEvent' | 'MentionedEvent' | 'MilestonedEvent' | 'MovedColumnsInProjectEvent' | 'ReferencedEvent' | 'RemovedFromProjectEvent' | 'RenamedTitleEvent' | 'ReopenedEvent' | 'SubscribedEvent' | 'TransferredEvent' | 'UnassignedEvent' | 'UnlabeledEvent' | 'UnlockedEvent' | 'UnsubscribedEvent';
}
export interface GQLMentionedEventTypeResolver<TParent = any> {
  actor?: MentionedEventToActorResolver<TParent>;
  createdAt?: MentionedEventToCreatedAtResolver<TParent>;
  databaseId?: MentionedEventToDatabaseIdResolver<TParent>;
  id?: MentionedEventToIdResolver<TParent>;
}

export interface MentionedEventToActorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MentionedEventToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MentionedEventToDatabaseIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MentionedEventToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLMovedColumnsInProjectEventTypeResolver<TParent = any> {
  actor?: MovedColumnsInProjectEventToActorResolver<TParent>;
  createdAt?: MovedColumnsInProjectEventToCreatedAtResolver<TParent>;
  databaseId?: MovedColumnsInProjectEventToDatabaseIdResolver<TParent>;
  id?: MovedColumnsInProjectEventToIdResolver<TParent>;
}

export interface MovedColumnsInProjectEventToActorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MovedColumnsInProjectEventToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MovedColumnsInProjectEventToDatabaseIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MovedColumnsInProjectEventToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLRemovedFromProjectEventTypeResolver<TParent = any> {
  actor?: RemovedFromProjectEventToActorResolver<TParent>;
  createdAt?: RemovedFromProjectEventToCreatedAtResolver<TParent>;
  databaseId?: RemovedFromProjectEventToDatabaseIdResolver<TParent>;
  id?: RemovedFromProjectEventToIdResolver<TParent>;
}

export interface RemovedFromProjectEventToActorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RemovedFromProjectEventToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RemovedFromProjectEventToDatabaseIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RemovedFromProjectEventToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLIssueTimelineItemsEdgeTypeResolver<TParent = any> {
  cursor?: IssueTimelineItemsEdgeToCursorResolver<TParent>;
  node?: IssueTimelineItemsEdgeToNodeResolver<TParent>;
}

export interface IssueTimelineItemsEdgeToCursorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IssueTimelineItemsEdgeToNodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLPullRequestTimelineItemsTypeResolver<TParent = any> {
  (parent: TParent, context: any, info: GraphQLResolveInfo): 'AddedToProjectEvent' | 'AssignedEvent' | 'BaseRefChangedEvent' | 'BaseRefForcePushedEvent' | 'ClosedEvent' | 'CommentDeletedEvent' | 'ConvertedNoteToIssueEvent' | 'CrossReferencedEvent' | 'DemilestonedEvent' | 'DeployedEvent' | 'DeploymentEnvironmentChangedEvent' | 'HeadRefDeletedEvent' | 'HeadRefForcePushedEvent' | 'HeadRefRestoredEvent' | 'IssueComment' | 'LabeledEvent' | 'LockedEvent' | 'MentionedEvent' | 'MergedEvent' | 'MilestonedEvent' | 'MovedColumnsInProjectEvent' | 'PullRequestCommit' | 'PullRequestReview' | 'PullRequestReviewThread' | 'ReferencedEvent' | 'RemovedFromProjectEvent' | 'RenamedTitleEvent' | 'ReopenedEvent' | 'ReviewDismissedEvent' | 'ReviewRequestRemovedEvent' | 'ReviewRequestedEvent' | 'SubscribedEvent' | 'TransferredEvent' | 'UnassignedEvent' | 'UnlabeledEvent' | 'UnlockedEvent' | 'UnsubscribedEvent';
}
export interface GQLPullRequestTimelineItemsEdgeTypeResolver<TParent = any> {
  cursor?: PullRequestTimelineItemsEdgeToCursorResolver<TParent>;
  node?: PullRequestTimelineItemsEdgeToNodeResolver<TParent>;
}

export interface PullRequestTimelineItemsEdgeToCursorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestTimelineItemsEdgeToNodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLRepositoryInvitationTypeResolver<TParent = any> {
  id?: RepositoryInvitationToIdResolver<TParent>;
  invitee?: RepositoryInvitationToInviteeResolver<TParent>;
  inviter?: RepositoryInvitationToInviterResolver<TParent>;
  permission?: RepositoryInvitationToPermissionResolver<TParent>;
  repository?: RepositoryInvitationToRepositoryResolver<TParent>;
}

export interface RepositoryInvitationToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryInvitationToInviteeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryInvitationToInviterResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryInvitationToPermissionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryInvitationToRepositoryResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLRepositoryInvitationEdgeTypeResolver<TParent = any> {
  cursor?: RepositoryInvitationEdgeToCursorResolver<TParent>;
  node?: RepositoryInvitationEdgeToNodeResolver<TParent>;
}

export interface RepositoryInvitationEdgeToCursorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryInvitationEdgeToNodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLSmimeSignatureTypeResolver<TParent = any> {
  email?: SmimeSignatureToEmailResolver<TParent>;
  isValid?: SmimeSignatureToIsValidResolver<TParent>;
  payload?: SmimeSignatureToPayloadResolver<TParent>;
  signature?: SmimeSignatureToSignatureResolver<TParent>;
  signer?: SmimeSignatureToSignerResolver<TParent>;
  state?: SmimeSignatureToStateResolver<TParent>;
  wasSignedByGitHub?: SmimeSignatureToWasSignedByGitHubResolver<TParent>;
}

export interface SmimeSignatureToEmailResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SmimeSignatureToIsValidResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SmimeSignatureToPayloadResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SmimeSignatureToSignatureResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SmimeSignatureToSignerResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SmimeSignatureToStateResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SmimeSignatureToWasSignedByGitHubResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLTagTypeResolver<TParent = any> {
  abbreviatedOid?: TagToAbbreviatedOidResolver<TParent>;
  commitResourcePath?: TagToCommitResourcePathResolver<TParent>;
  commitUrl?: TagToCommitUrlResolver<TParent>;
  id?: TagToIdResolver<TParent>;
  message?: TagToMessageResolver<TParent>;
  name?: TagToNameResolver<TParent>;
  oid?: TagToOidResolver<TParent>;
  repository?: TagToRepositoryResolver<TParent>;
  tagger?: TagToTaggerResolver<TParent>;
  target?: TagToTargetResolver<TParent>;
}

export interface TagToAbbreviatedOidResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TagToCommitResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TagToCommitUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TagToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TagToMessageResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TagToNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TagToOidResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TagToRepositoryResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TagToTaggerResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TagToTargetResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLTopicConnectionTypeResolver<TParent = any> {
  edges?: TopicConnectionToEdgesResolver<TParent>;
  nodes?: TopicConnectionToNodesResolver<TParent>;
  pageInfo?: TopicConnectionToPageInfoResolver<TParent>;
  totalCount?: TopicConnectionToTotalCountResolver<TParent>;
}

export interface TopicConnectionToEdgesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TopicConnectionToNodesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TopicConnectionToPageInfoResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TopicConnectionToTotalCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLTopicEdgeTypeResolver<TParent = any> {
  cursor?: TopicEdgeToCursorResolver<TParent>;
  node?: TopicEdgeToNodeResolver<TParent>;
}

export interface TopicEdgeToCursorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TopicEdgeToNodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLUnknownSignatureTypeResolver<TParent = any> {
  email?: UnknownSignatureToEmailResolver<TParent>;
  isValid?: UnknownSignatureToIsValidResolver<TParent>;
  payload?: UnknownSignatureToPayloadResolver<TParent>;
  signature?: UnknownSignatureToSignatureResolver<TParent>;
  signer?: UnknownSignatureToSignerResolver<TParent>;
  state?: UnknownSignatureToStateResolver<TParent>;
  wasSignedByGitHub?: UnknownSignatureToWasSignedByGitHubResolver<TParent>;
}

export interface UnknownSignatureToEmailResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UnknownSignatureToIsValidResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UnknownSignatureToPayloadResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UnknownSignatureToSignatureResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UnknownSignatureToSignerResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UnknownSignatureToStateResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UnknownSignatureToWasSignedByGitHubResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
